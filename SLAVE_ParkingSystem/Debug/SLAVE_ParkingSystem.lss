
SLAVE_ParkingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00003c2c  00003cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008000e0  008000e0  00003d40  2**0
                  ALLOC
  3 .stab         0000369c  00000000  00000000  00003d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000177b  00000000  00000000  000073dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aa50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c6e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_1>
       8:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_2>
       c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 11 	call	0x23cc	; 0x23cc <main>
      8a:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 eb       	ldi	r26, 0xB4	; 180
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 eb       	ldi	r24, 0xB4	; 180
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_VidSetPinDirection>:
 ***************************************************************************************
 */

//******************************* setting Pin Direction ********************************
void DIO_VidSetPinDirection(uint8 Copy_Port , uint8 Copy_Pin , uint8 Copy_Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_Direction == Input)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	88 23       	and	r24, r24
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_VidSetPinDirection+0x22>
     b66:	74 c0       	rjmp	.+232    	; 0xc50 <DIO_VidSetPinDirection+0x10a>
	{
		switch(Copy_Port)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	59 f1       	breq	.+86     	; 0xbd2 <DIO_VidSetPinDirection+0x8c>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_VidSetPinDirection+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	69 f0       	breq	.+26     	; 0xba8 <DIO_VidSetPinDirection+0x62>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	89 f1       	breq	.+98     	; 0xbfc <DIO_VidSetPinDirection+0xb6>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <DIO_VidSetPinDirection+0x60>
     ba4:	40 c0       	rjmp	.+128    	; 0xc26 <DIO_VidSetPinDirection+0xe0>
     ba6:	c6 c0       	rjmp	.+396    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
		case Port_A:
			CLEAR_BIT(DDRA,Copy_Pin);
     ba8:	aa e3       	ldi	r26, 0x3A	; 58
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e3       	ldi	r30, 0x3A	; 58
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	48 2f       	mov	r20, r24
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 2e       	mov	r0, r18
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <DIO_VidSetPinDirection+0x80>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	0a 94       	dec	r0
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <DIO_VidSetPinDirection+0x7c>
     bca:	80 95       	com	r24
     bcc:	84 23       	and	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	b1 c0       	rjmp	.+354    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_B:
			CLEAR_BIT(DDRB,Copy_Pin);
     bd2:	a7 e3       	ldi	r26, 0x37	; 55
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e7 e3       	ldi	r30, 0x37	; 55
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_VidSetPinDirection+0xaa>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_VidSetPinDirection+0xa6>
     bf4:	80 95       	com	r24
     bf6:	84 23       	and	r24, r20
     bf8:	8c 93       	st	X, r24
     bfa:	9c c0       	rjmp	.+312    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_C:
			CLEAR_BIT(DDRC,Copy_Pin);
     bfc:	a4 e3       	ldi	r26, 0x34	; 52
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e3       	ldi	r30, 0x34	; 52
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_VidSetPinDirection+0xd4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_VidSetPinDirection+0xd0>
     c1e:	80 95       	com	r24
     c20:	84 23       	and	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	87 c0       	rjmp	.+270    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_D:
			CLEAR_BIT(DDRD,Copy_Pin);
     c26:	a1 e3       	ldi	r26, 0x31	; 49
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e1 e3       	ldi	r30, 0x31	; 49
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_VidSetPinDirection+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_VidSetPinDirection+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	72 c0       	rjmp	.+228    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			break;
		}
	}
	else if(Copy_Direction == Output)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	09 f0       	breq	.+2      	; 0xc58 <DIO_VidSetPinDirection+0x112>
     c56:	6e c0       	rjmp	.+220    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(Copy_Port)
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	3d 83       	std	Y+5, r19	; 0x05
     c60:	2c 83       	std	Y+4, r18	; 0x04
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	9d 81       	ldd	r25, Y+5	; 0x05
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	49 f1       	breq	.+82     	; 0xcbe <DIO_VidSetPinDirection+0x178>
     c6c:	2c 81       	ldd	r18, Y+4	; 0x04
     c6e:	3d 81       	ldd	r19, Y+5	; 0x05
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	2c f4       	brge	.+10     	; 0xc80 <DIO_VidSetPinDirection+0x13a>
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	61 f0       	breq	.+24     	; 0xc96 <DIO_VidSetPinDirection+0x150>
     c7e:	5a c0       	rjmp	.+180    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     c80:	2c 81       	ldd	r18, Y+4	; 0x04
     c82:	3d 81       	ldd	r19, Y+5	; 0x05
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	71 f1       	breq	.+92     	; 0xce6 <DIO_VidSetPinDirection+0x1a0>
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	e9 f1       	breq	.+122    	; 0xd0e <DIO_VidSetPinDirection+0x1c8>
     c94:	4f c0       	rjmp	.+158    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
		case Port_A:
			SET_BIT(DDRA,Copy_Pin);
     c96:	aa e3       	ldi	r26, 0x3A	; 58
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	ea e3       	ldi	r30, 0x3A	; 58
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_VidSetPinDirection+0x16e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_VidSetPinDirection+0x16a>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	3b c0       	rjmp	.+118    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_B:
			SET_BIT(DDRB,Copy_Pin);
     cbe:	a7 e3       	ldi	r26, 0x37	; 55
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e7 e3       	ldi	r30, 0x37	; 55
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_VidSetPinDirection+0x196>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_VidSetPinDirection+0x192>
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	27 c0       	rjmp	.+78     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_C:
			SET_BIT(DDRC,Copy_Pin);
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_VidSetPinDirection+0x1be>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_VidSetPinDirection+0x1ba>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_D:
			SET_BIT(DDRD,Copy_Pin);
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_VidSetPinDirection+0x1e6>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_VidSetPinDirection+0x1e2>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
			break;
		}
	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_VidSetPinValue>:

//******************************** setting Pin Value ***********************************
void DIO_VidSetPinValue(uint8 Copy_Port , uint8 Copy_Pin ,uint8 Copy_Value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_Value == PinHigh)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_VidSetPinValue+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_VidSetPinValue+0x100>
	{
		switch(Copy_Port)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	49 f1       	breq	.+82     	; 0xdce <DIO_VidSetPinValue+0x88>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_VidSetPinValue+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_VidSetPinValue+0x60>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <DIO_VidSetPinValue+0xb0>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <DIO_VidSetPinValue+0xd8>
     da4:	c7 c0       	rjmp	.+398    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
		case Port_A:
			SET_BIT(PORTA,Copy_Pin);
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_VidSetPinValue+0x7e>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_VidSetPinValue+0x7a>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	b3 c0       	rjmp	.+358    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_B:
			SET_BIT(PORTB,Copy_Pin);
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_VidSetPinValue+0xa6>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_VidSetPinValue+0xa2>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	9f c0       	rjmp	.+318    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_C:
			SET_BIT(PORTC,Copy_Pin);
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_VidSetPinValue+0xce>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_VidSetPinValue+0xca>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	8b c0       	rjmp	.+278    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_D:
			SET_BIT(PORTD,Copy_Pin);
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_VidSetPinValue+0xf6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_VidSetPinValue+0xf2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			break;
		}
	}

	else if(Copy_Value == PinLow)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_VidSetPinValue+0x108>
     e4c:	73 c0       	rjmp	.+230    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
	{
		switch(Copy_Port)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	59 f1       	breq	.+86     	; 0xeb8 <DIO_VidSetPinValue+0x172>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_VidSetPinValue+0x130>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f0       	breq	.+26     	; 0xe8e <DIO_VidSetPinValue+0x148>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f1       	breq	.+98     	; 0xee2 <DIO_VidSetPinValue+0x19c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_VidSetPinValue+0x146>
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <DIO_VidSetPinValue+0x1c6>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
		case Port_A:
			CLEAR_BIT(PORTA,Copy_Pin);
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinValue+0x166>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinValue+0x162>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_B:
			CLEAR_BIT(PORTB,Copy_Pin);
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_VidSetPinValue+0x190>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_VidSetPinValue+0x18c>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_C:
			CLEAR_BIT(PORTC,Copy_Pin);
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_VidSetPinValue+0x1ba>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_VidSetPinValue+0x1b6>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_D:
			CLEAR_BIT(PORTD,Copy_Pin);
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_VidSetPinValue+0x1e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_VidSetPinValue+0x1e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
			break;
		}
	}
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <DIO_VidGetPinValue>:


//********************************* Getting Pin Value *********************************
void DIO_VidGetPinValue(uint8 Copy_Port , uint8 Copy_Pin ,uint8 *Ptr_Data)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <DIO_VidGetPinValue+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_VidGetPinValue+0x8>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_VidGetPinValue+0xa>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	6a 83       	std	Y+2, r22	; 0x02
     f58:	5c 83       	std	Y+4, r21	; 0x04
     f5a:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_Port)
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	3e 83       	std	Y+6, r19	; 0x06
     f64:	2d 83       	std	Y+5, r18	; 0x05
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	9e 81       	ldd	r25, Y+6	; 0x06
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	91 05       	cpc	r25, r1
     f6e:	49 f1       	breq	.+82     	; 0xfc2 <DIO_VidGetPinValue+0x7c>
     f70:	2d 81       	ldd	r18, Y+5	; 0x05
     f72:	3e 81       	ldd	r19, Y+6	; 0x06
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	2c f4       	brge	.+10     	; 0xf84 <DIO_VidGetPinValue+0x3e>
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_VidGetPinValue+0x54>
     f82:	5a c0       	rjmp	.+180    	; 0x1038 <DIO_VidGetPinValue+0xf2>
     f84:	2d 81       	ldd	r18, Y+5	; 0x05
     f86:	3e 81       	ldd	r19, Y+6	; 0x06
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	71 f1       	breq	.+92     	; 0xfea <DIO_VidGetPinValue+0xa4>
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	e9 f1       	breq	.+122    	; 0x1012 <DIO_VidGetPinValue+0xcc>
     f98:	4f c0       	rjmp	.+158    	; 0x1038 <DIO_VidGetPinValue+0xf2>
	{
	case Port_A:
		*Ptr_Data = GET_BIT(PINA,Copy_Pin);
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_VidGetPinValue+0x6e>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_VidGetPinValue+0x6a>
     fb8:	84 23       	and	r24, r20
     fba:	eb 81       	ldd	r30, Y+3	; 0x03
     fbc:	fc 81       	ldd	r31, Y+4	; 0x04
     fbe:	80 83       	st	Z, r24
     fc0:	3b c0       	rjmp	.+118    	; 0x1038 <DIO_VidGetPinValue+0xf2>
		break;
	case Port_B:
		*Ptr_Data = GET_BIT(PINB,Copy_Pin);
     fc2:	e6 e3       	ldi	r30, 0x36	; 54
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_VidGetPinValue+0x96>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_VidGetPinValue+0x92>
     fe0:	84 23       	and	r24, r20
     fe2:	eb 81       	ldd	r30, Y+3	; 0x03
     fe4:	fc 81       	ldd	r31, Y+4	; 0x04
     fe6:	80 83       	st	Z, r24
     fe8:	27 c0       	rjmp	.+78     	; 0x1038 <DIO_VidGetPinValue+0xf2>
		break;
	case Port_C:
		*Ptr_Data = GET_BIT(PINC,Copy_Pin);
     fea:	e3 e3       	ldi	r30, 0x33	; 51
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_VidGetPinValue+0xbe>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_VidGetPinValue+0xba>
    1008:	84 23       	and	r24, r20
    100a:	eb 81       	ldd	r30, Y+3	; 0x03
    100c:	fc 81       	ldd	r31, Y+4	; 0x04
    100e:	80 83       	st	Z, r24
    1010:	13 c0       	rjmp	.+38     	; 0x1038 <DIO_VidGetPinValue+0xf2>
		break;
	case Port_D:
		*Ptr_Data = GET_BIT(PIND,Copy_Pin);
    1012:	e0 e3       	ldi	r30, 0x30	; 48
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_VidGetPinValue+0xe6>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_VidGetPinValue+0xe2>
    1030:	84 23       	and	r24, r20
    1032:	eb 81       	ldd	r30, Y+3	; 0x03
    1034:	fc 81       	ldd	r31, Y+4	; 0x04
    1036:	80 83       	st	Z, r24
		break;
	}
}
    1038:	26 96       	adiw	r28, 0x06	; 6
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <DIO_VidSetPortDirection>:
 ***************************************************************************************
 */

//******************************* setting Port Direction *******************************
void DIO_VidSetPortDirection(uint8 Copy_Port , uint8 Copy_Direction)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <DIO_VidSetPortDirection+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <DIO_VidSetPortDirection+0x8>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <DIO_VidSetPortDirection+0xa>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_Direction == Input)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	88 23       	and	r24, r24
    1060:	79 f5       	brne	.+94     	; 0x10c0 <DIO_VidSetPortDirection+0x76>
	{
		switch(Copy_Port)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3e 83       	std	Y+6, r19	; 0x06
    106a:	2d 83       	std	Y+5, r18	; 0x05
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	c9 f0       	breq	.+50     	; 0x10a8 <DIO_VidSetPortDirection+0x5e>
    1076:	2d 81       	ldd	r18, Y+5	; 0x05
    1078:	3e 81       	ldd	r19, Y+6	; 0x06
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	2c f4       	brge	.+10     	; 0x108a <DIO_VidSetPortDirection+0x40>
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	61 f0       	breq	.+24     	; 0x10a0 <DIO_VidSetPortDirection+0x56>
    1088:	50 c0       	rjmp	.+160    	; 0x112a <DIO_VidSetPortDirection+0xe0>
    108a:	2d 81       	ldd	r18, Y+5	; 0x05
    108c:	3e 81       	ldd	r19, Y+6	; 0x06
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	71 f0       	breq	.+28     	; 0x10b0 <DIO_VidSetPortDirection+0x66>
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	69 f0       	breq	.+26     	; 0x10b8 <DIO_VidSetPortDirection+0x6e>
    109e:	45 c0       	rjmp	.+138    	; 0x112a <DIO_VidSetPortDirection+0xe0>
		{
		case Port_A:
			DDRA = 0x00;
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	10 82       	st	Z, r1
    10a6:	41 c0       	rjmp	.+130    	; 0x112a <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_B:
			DDRB = 0x00;
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	10 82       	st	Z, r1
    10ae:	3d c0       	rjmp	.+122    	; 0x112a <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_C:
			DDRC = 0x00;
    10b0:	e4 e3       	ldi	r30, 0x34	; 52
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	10 82       	st	Z, r1
    10b6:	39 c0       	rjmp	.+114    	; 0x112a <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_D:
			DDRD = 0x00;
    10b8:	e1 e3       	ldi	r30, 0x31	; 49
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	10 82       	st	Z, r1
    10be:	35 c0       	rjmp	.+106    	; 0x112a <DIO_VidSetPortDirection+0xe0>
			break;
		}
	}
	else if(Copy_Direction == Output)
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	91 f5       	brne	.+100    	; 0x112a <DIO_VidSetPortDirection+0xe0>
	{
		switch(Copy_Port)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <DIO_VidSetPortDirection+0xc4>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <DIO_VidSetPortDirection+0xa4>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_VidSetPortDirection+0xba>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <DIO_VidSetPortDirection+0xe0>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <DIO_VidSetPortDirection+0xce>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <DIO_VidSetPortDirection+0xd8>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <DIO_VidSetPortDirection+0xe0>
		{
		case Port_A:
			DDRA = 0xFF;
    1104:	ea e3       	ldi	r30, 0x3A	; 58
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_B:
			DDRB = 0xFF;
    110e:	e7 e3       	ldi	r30, 0x37	; 55
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_C:
			DDRC = 0xFF;
    1118:	e4 e3       	ldi	r30, 0x34	; 52
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_D:
			DDRD = 0xFF;
    1122:	e1 e3       	ldi	r30, 0x31	; 49
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8f ef       	ldi	r24, 0xFF	; 255
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	26 96       	adiw	r28, 0x06	; 6
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_VidSetPortValue>:


//******************************* setting Port Value **********************************
void DIO_VidSetPortValue(uint8 Copy_Port , uint8 Copy_Value)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_VidSetPortValue+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_VidSetPortValue+0x8>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_Port)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3c 83       	std	Y+4, r19	; 0x04
    1154:	2b 83       	std	Y+3, r18	; 0x03
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	d1 f0       	breq	.+52     	; 0x1194 <DIO_VidSetPortValue+0x58>
    1160:	2b 81       	ldd	r18, Y+3	; 0x03
    1162:	3c 81       	ldd	r19, Y+4	; 0x04
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	2c f4       	brge	.+10     	; 0x1174 <DIO_VidSetPortValue+0x38>
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	61 f0       	breq	.+24     	; 0x118a <DIO_VidSetPortValue+0x4e>
    1172:	1e c0       	rjmp	.+60     	; 0x11b0 <DIO_VidSetPortValue+0x74>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	81 f0       	breq	.+32     	; 0x119e <DIO_VidSetPortValue+0x62>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <DIO_VidSetPortValue+0x6c>
    1188:	13 c0       	rjmp	.+38     	; 0x11b0 <DIO_VidSetPortValue+0x74>
		{
		case Port_A:
			PORTA = Copy_Value;
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	80 83       	st	Z, r24
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <DIO_VidSetPortValue+0x74>
			break;
		case Port_B:
			PORTB = Copy_Value;
    1194:	e8 e3       	ldi	r30, 0x38	; 56
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	80 83       	st	Z, r24
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <DIO_VidSetPortValue+0x74>
			break;
		case Port_C:
			PORTC = Copy_Value;
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	80 83       	st	Z, r24
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <DIO_VidSetPortValue+0x74>
			break;
		case Port_D:
			PORTD = Copy_Value;
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 83       	st	Z, r24
			break;
		}
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <DIO_VidGetPortValue>:

//******************************* Getting Port Value **********************************
void DIO_VidGetPortValue(uint8 Copy_Port , uint8 *Ptr_Data)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <DIO_VidGetPortValue+0x6>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <DIO_VidGetPortValue+0x8>
    11c6:	0f 92       	push	r0
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	7b 83       	std	Y+3, r23	; 0x03
    11d0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_Port)
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3d 83       	std	Y+5, r19	; 0x05
    11da:	2c 83       	std	Y+4, r18	; 0x04
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	9d 81       	ldd	r25, Y+5	; 0x05
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	e1 f0       	breq	.+56     	; 0x121e <DIO_VidGetPortValue+0x60>
    11e6:	2c 81       	ldd	r18, Y+4	; 0x04
    11e8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	2c f4       	brge	.+10     	; 0x11fa <DIO_VidGetPortValue+0x3c>
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	61 f0       	breq	.+24     	; 0x1210 <DIO_VidGetPortValue+0x52>
    11f8:	26 c0       	rjmp	.+76     	; 0x1246 <DIO_VidGetPortValue+0x88>
    11fa:	2c 81       	ldd	r18, Y+4	; 0x04
    11fc:	3d 81       	ldd	r19, Y+5	; 0x05
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	a1 f0       	breq	.+40     	; 0x122c <DIO_VidGetPortValue+0x6e>
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	b1 f0       	breq	.+44     	; 0x123a <DIO_VidGetPortValue+0x7c>
    120e:	1b c0       	rjmp	.+54     	; 0x1246 <DIO_VidGetPortValue+0x88>
		{
		case Port_A:
			*Ptr_Data = PINA;
    1210:	e9 e3       	ldi	r30, 0x39	; 57
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	ea 81       	ldd	r30, Y+2	; 0x02
    1218:	fb 81       	ldd	r31, Y+3	; 0x03
    121a:	80 83       	st	Z, r24
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <DIO_VidGetPortValue+0x88>
			break;
		case Port_B:
			*Ptr_Data = PINB;
    121e:	e6 e3       	ldi	r30, 0x36	; 54
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	ea 81       	ldd	r30, Y+2	; 0x02
    1226:	fb 81       	ldd	r31, Y+3	; 0x03
    1228:	80 83       	st	Z, r24
    122a:	0d c0       	rjmp	.+26     	; 0x1246 <DIO_VidGetPortValue+0x88>
			break;
		case Port_C:
			*Ptr_Data = PINC;
    122c:	e3 e3       	ldi	r30, 0x33	; 51
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	ea 81       	ldd	r30, Y+2	; 0x02
    1234:	fb 81       	ldd	r31, Y+3	; 0x03
    1236:	80 83       	st	Z, r24
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <DIO_VidGetPortValue+0x88>
			break;
		case Port_D:
			*Ptr_Data = PIND;
    123a:	e0 e3       	ldi	r30, 0x30	; 48
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	ea 81       	ldd	r30, Y+2	; 0x02
    1242:	fb 81       	ldd	r31, Y+3	; 0x03
    1244:	80 83       	st	Z, r24
			break;
		}
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <EXTINT_VidINT0_Init>:

/*  Global pointer to function  to hold INT2 ISR address */
void (*EXTI_pvINT2Func)(void) = NULL;

void EXTINT_VidINT0_Init()
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	// set sens control to any logical change
	SET_BIT(MCUCR ,MCUCR_ISC00);
    125e:	a5 e5       	ldi	r26, 0x55	; 85
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e5       	ldi	r30, 0x55	; 85
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	81 60       	ori	r24, 0x01	; 1
    126a:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR ,MCUCR_ISC01);
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	8d 7f       	andi	r24, 0xFD	; 253
    1278:	8c 93       	st	X, r24

	// peripheral interrupt enableINT0
	SET_BIT(GICR ,GICR_INT0);
    127a:	ab e5       	ldi	r26, 0x5B	; 91
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e5       	ldi	r30, 0x5B	; 91
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 64       	ori	r24, 0x40	; 64
    1286:	8c 93       	st	X, r24
}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <EXTINT_VidINT1_Init>:


void EXTINT_VidINT1_Init()
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	// set sense control to any logical change
	SET_BIT(MCUCR ,MCUCR_ISC10);
    1296:	a5 e5       	ldi	r26, 0x55	; 85
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e5 e5       	ldi	r30, 0x55	; 85
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	84 60       	ori	r24, 0x04	; 4
    12a2:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR ,MCUCR_ISC11);
    12a4:	a5 e5       	ldi	r26, 0x55	; 85
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e5       	ldi	r30, 0x55	; 85
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	87 7f       	andi	r24, 0xF7	; 247
    12b0:	8c 93       	st	X, r24

	// peripheral interrupt enable INT1
	SET_BIT(GICR ,GICR_INT1);
    12b2:	ab e5       	ldi	r26, 0x5B	; 91
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	eb e5       	ldi	r30, 0x5B	; 91
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 68       	ori	r24, 0x80	; 128
    12be:	8c 93       	st	X, r24

}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <EXTINT_VidINT2_Init>:

void EXTINT_VidINT2_Init()
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	// set sense control to rising edge
	SET_BIT(MCUCSR ,MCUCSR_INT2);
    12ce:	a4 e5       	ldi	r26, 0x54	; 84
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e4 e5       	ldi	r30, 0x54	; 84
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 64       	ori	r24, 0x40	; 64
    12da:	8c 93       	st	X, r24

	// peripheral interrupt enable INT2
	SET_BIT(GICR ,GICR_INT2);
    12dc:	ab e5       	ldi	r26, 0x5B	; 91
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e5       	ldi	r30, 0x5B	; 91
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 62       	ori	r24, 0x20	; 32
    12e8:	8c 93       	st	X, r24
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <EXTINT_U8INT0_CallBack>:

/* CALL BACK DFUNCTION OF INT0 */
uint8 EXTINT_U8INT0_CallBack(void(* Copy_PtrToFunc(void)))
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <EXTINT_U8INT0_CallBack+0x6>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	9b 83       	std	Y+3, r25	; 0x03
    12fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_State = NO_ERROR_STATE;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PtrToFunc != NULL)
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	9b 81       	ldd	r25, Y+3	; 0x03
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	39 f0       	breq	.+14     	; 0x131a <EXTINT_U8INT0_CallBack+0x2a>
	{
		EXTI_pvINT0Func = Copy_PtrToFunc;
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	90 93 e1 00 	sts	0x00E1, r25
    1314:	80 93 e0 00 	sts	0x00E0, r24
    1318:	02 c0       	rjmp	.+4      	; 0x131e <EXTINT_U8INT0_CallBack+0x2e>
	}
	else
	{
		Error_State = NULLPOINTER;
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <EXTINT_U8INT1_CallBack>:


/* CALL BACK DFUNCTION OF INT1 */
uint8 EXTINT_U8INT1_CallBack(void(* Copy_PtrToFunc(void)))
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <EXTINT_U8INT1_CallBack+0x6>
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	9b 83       	std	Y+3, r25	; 0x03
    133a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_State = NO_ERROR_STATE;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PtrToFunc != NULL)
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	9b 81       	ldd	r25, Y+3	; 0x03
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	39 f0       	breq	.+14     	; 0x1356 <EXTINT_U8INT1_CallBack+0x2a>
	{
		EXTI_pvINT1Func = Copy_PtrToFunc;
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	9b 81       	ldd	r25, Y+3	; 0x03
    134c:	90 93 e3 00 	sts	0x00E3, r25
    1350:	80 93 e2 00 	sts	0x00E2, r24
    1354:	02 c0       	rjmp	.+4      	; 0x135a <EXTINT_U8INT1_CallBack+0x2e>
	}
	else
	{
		Error_State = NULLPOINTER;
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <EXTINT_U8INT2_CallBack>:

/* CALL BACK DFUNCTION OF INT2 */
uint8 EXTINT_U8INT2_CallBack(void(* Copy_PtrToFunc(void)))
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <EXTINT_U8INT2_CallBack+0x6>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9b 83       	std	Y+3, r25	; 0x03
    1376:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_State = NO_ERROR_STATE;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PtrToFunc != NULL)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	9b 81       	ldd	r25, Y+3	; 0x03
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	39 f0       	breq	.+14     	; 0x1392 <EXTINT_U8INT2_CallBack+0x2a>
	{
		EXTI_pvINT2Func = Copy_PtrToFunc;
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	90 93 e5 00 	sts	0x00E5, r25
    138c:	80 93 e4 00 	sts	0x00E4, r24
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <EXTINT_U8INT2_CallBack+0x2e>
	}
	else
	{
		Error_State = NULLPOINTER;
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <__vector_1>:

/* ISR function for INT0 */
void __vector_1 (void) __attribute__((signal));

void __vector_1 (void)
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvINT0Func();
    13ce:	e0 91 e0 00 	lds	r30, 0x00E0
    13d2:	f0 91 e1 00 	lds	r31, 0x00E1
    13d6:	09 95       	icall
}
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	7f 91       	pop	r23
    13ea:	6f 91       	pop	r22
    13ec:	5f 91       	pop	r21
    13ee:	4f 91       	pop	r20
    13f0:	3f 91       	pop	r19
    13f2:	2f 91       	pop	r18
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	1f 90       	pop	r1
    13fc:	18 95       	reti

000013fe <__vector_2>:

/* ISR function for INT1 */
void __vector_2 (void) __attribute__((signal));

void __vector_2 (void)
{
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	2f 93       	push	r18
    140a:	3f 93       	push	r19
    140c:	4f 93       	push	r20
    140e:	5f 93       	push	r21
    1410:	6f 93       	push	r22
    1412:	7f 93       	push	r23
    1414:	8f 93       	push	r24
    1416:	9f 93       	push	r25
    1418:	af 93       	push	r26
    141a:	bf 93       	push	r27
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvINT1Func();
    1428:	e0 91 e2 00 	lds	r30, 0x00E2
    142c:	f0 91 e3 00 	lds	r31, 0x00E3
    1430:	09 95       	icall
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	ff 91       	pop	r31
    1438:	ef 91       	pop	r30
    143a:	bf 91       	pop	r27
    143c:	af 91       	pop	r26
    143e:	9f 91       	pop	r25
    1440:	8f 91       	pop	r24
    1442:	7f 91       	pop	r23
    1444:	6f 91       	pop	r22
    1446:	5f 91       	pop	r21
    1448:	4f 91       	pop	r20
    144a:	3f 91       	pop	r19
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	0f 90       	pop	r0
    1454:	1f 90       	pop	r1
    1456:	18 95       	reti

00001458 <__vector_3>:

/* ISR function for INT2 */
void __vector_3 (void) __attribute__((signal));

void __vector_3 (void)
{
    1458:	1f 92       	push	r1
    145a:	0f 92       	push	r0
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	0f 92       	push	r0
    1460:	11 24       	eor	r1, r1
    1462:	2f 93       	push	r18
    1464:	3f 93       	push	r19
    1466:	4f 93       	push	r20
    1468:	5f 93       	push	r21
    146a:	6f 93       	push	r22
    146c:	7f 93       	push	r23
    146e:	8f 93       	push	r24
    1470:	9f 93       	push	r25
    1472:	af 93       	push	r26
    1474:	bf 93       	push	r27
    1476:	ef 93       	push	r30
    1478:	ff 93       	push	r31
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvINT2Func();
    1482:	e0 91 e4 00 	lds	r30, 0x00E4
    1486:	f0 91 e5 00 	lds	r31, 0x00E5
    148a:	09 95       	icall
}
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	ff 91       	pop	r31
    1492:	ef 91       	pop	r30
    1494:	bf 91       	pop	r27
    1496:	af 91       	pop	r26
    1498:	9f 91       	pop	r25
    149a:	8f 91       	pop	r24
    149c:	7f 91       	pop	r23
    149e:	6f 91       	pop	r22
    14a0:	5f 91       	pop	r21
    14a2:	4f 91       	pop	r20
    14a4:	3f 91       	pop	r19
    14a6:	2f 91       	pop	r18
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti

000014b2 <GIE_VidEnable>:
#include "GIE_Private.h"
#include "GIE_Interface.h"

//enable the interrupt
void GIE_VidEnable()
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREF_I);
    14ba:	af e5       	ldi	r26, 0x5F	; 95
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ef e5       	ldi	r30, 0x5F	; 95
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 68       	ori	r24, 0x80	; 128
    14c6:	8c 93       	st	X, r24
}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <GIE_VidDisable>:

//disable the interrupt
void GIE_VidDisable()
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREF_I);
    14d6:	af e5       	ldi	r26, 0x5F	; 95
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ef e5       	ldi	r30, 0x5F	; 95
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8f 77       	andi	r24, 0x7F	; 127
    14e2:	8c 93       	st	X, r24
}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <LCD_VidSendCommand>:
#include<stdlib.h>

static uint8 cursor = 1;

void LCD_VidSendCommand(uint8 Copy_Command)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	2f 97       	sbiw	r28, 0x0f	; 15
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	8f 87       	std	Y+15, r24	; 0x0f
	//make RS = 0; to send command
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_RS_PIN , PinLow);
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>

	// set RW = 0; to write
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_RW_PIN ,PinLow);
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	61 e0       	ldi	r22, 0x01	; 1
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>

	// set command to data pin on port
	DIO_VidSetPortValue(LCD_DATA_PORT , Copy_Command);
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	6f 85       	ldd	r22, Y+15	; 0x0f
    1518:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_VidSetPortValue>

	// send enable pulse.
	// set enable to high
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_E_PIN ,PinHigh);
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	62 e0       	ldi	r22, 0x02	; 2
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e4       	ldi	r27, 0x40	; 64
    152e:	8b 87       	std	Y+11, r24	; 0x0b
    1530:	9c 87       	std	Y+12, r25	; 0x0c
    1532:	ad 87       	std	Y+13, r26	; 0x0d
    1534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	6b 85       	ldd	r22, Y+11	; 0x0b
    1538:	7c 85       	ldd	r23, Y+12	; 0x0c
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a e7       	ldi	r20, 0x7A	; 122
    1544:	53 e4       	ldi	r21, 0x43	; 67
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	8f 83       	std	Y+7, r24	; 0x07
    1550:	98 87       	std	Y+8, r25	; 0x08
    1552:	a9 87       	std	Y+9, r26	; 0x09
    1554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1556:	6f 81       	ldd	r22, Y+7	; 0x07
    1558:	78 85       	ldd	r23, Y+8	; 0x08
    155a:	89 85       	ldd	r24, Y+9	; 0x09
    155c:	9a 85       	ldd	r25, Y+10	; 0x0a
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156a:	88 23       	and	r24, r24
    156c:	2c f4       	brge	.+10     	; 0x1578 <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158c:	18 16       	cp	r1, r24
    158e:	4c f5       	brge	.+82     	; 0x15e2 <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	6b 85       	ldd	r22, Y+11	; 0x0b
    1592:	7c 85       	ldd	r23, Y+12	; 0x0c
    1594:	8d 85       	ldd	r24, Y+13	; 0x0d
    1596:	9e 85       	ldd	r25, Y+14	; 0x0e
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <LCD_VidSendCommand+0xee>
    15ba:	89 e1       	ldi	r24, 0x19	; 25
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_VidSendCommand+0xdc>
    15ca:	9c 83       	std	Y+4, r25	; 0x04
    15cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <LCD_VidSendCommand+0xd0>
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_VidSendCommand+0x118>
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	// set enable to low
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_E_PIN ,PinLow);
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
}
    1614:	2f 96       	adiw	r28, 0x0f	; 15
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <LCD_VidSendData>:

void LCD_VidSendData(uint8 Copy_Data)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	2f 97       	sbiw	r28, 0x0f	; 15
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	8f 87       	std	Y+15, r24	; 0x0f
	//make RS = 0; to send command
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_RS_PIN , PinHigh);
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>

	// set RW = 0; to write
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_RW_PIN ,PinLow);
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>

	// set command to data pin on port
	DIO_VidSetPortValue(LCD_DATA_PORT , Copy_Data);
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	6f 85       	ldd	r22, Y+15	; 0x0f
    1654:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_VidSetPortValue>

	// send enable pulse.
	// set enable to high
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_E_PIN ,PinHigh);
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	62 e0       	ldi	r22, 0x02	; 2
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e4       	ldi	r27, 0x40	; 64
    166a:	8b 87       	std	Y+11, r24	; 0x0b
    166c:	9c 87       	std	Y+12, r25	; 0x0c
    166e:	ad 87       	std	Y+13, r26	; 0x0d
    1670:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1672:	6b 85       	ldd	r22, Y+11	; 0x0b
    1674:	7c 85       	ldd	r23, Y+12	; 0x0c
    1676:	8d 85       	ldd	r24, Y+13	; 0x0d
    1678:	9e 85       	ldd	r25, Y+14	; 0x0e
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4a e7       	ldi	r20, 0x7A	; 122
    1680:	53 e4       	ldi	r21, 0x43	; 67
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	8f 83       	std	Y+7, r24	; 0x07
    168c:	98 87       	std	Y+8, r25	; 0x08
    168e:	a9 87       	std	Y+9, r26	; 0x09
    1690:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e8       	ldi	r20, 0x80	; 128
    16a0:	5f e3       	ldi	r21, 0x3F	; 63
    16a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <LCD_VidSendData+0x8e>
		__ticks = 1;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	3f c0       	rjmp	.+126    	; 0x1732 <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	4f e7       	ldi	r20, 0x7F	; 127
    16c2:	57 e4       	ldi	r21, 0x47	; 71
    16c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	4c f5       	brge	.+82     	; 0x171e <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e2       	ldi	r20, 0x20	; 32
    16da:	51 e4       	ldi	r21, 0x41	; 65
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <LCD_VidSendData+0xee>
    16f6:	89 e1       	ldi	r24, 0x19	; 25
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <LCD_VidSendData+0xdc>
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	69 f7       	brne	.-38     	; 0x16f6 <LCD_VidSendData+0xd0>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171e:	6f 81       	ldd	r22, Y+7	; 0x07
    1720:	78 85       	ldd	r23, Y+8	; 0x08
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_VidSendData+0x118>
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	// set enable to low
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_E_PIN ,PinLow);
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	62 e0       	ldi	r22, 0x02	; 2
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
}
    1750:	2f 96       	adiw	r28, 0x0f	; 15
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <LCD_Vid_Init>:

void LCD_Vid_Init(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	2e 97       	sbiw	r28, 0x0e	; 14
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e2       	ldi	r26, 0x20	; 32
    177c:	b2 e4       	ldi	r27, 0x42	; 66
    177e:	8b 87       	std	Y+11, r24	; 0x0b
    1780:	9c 87       	std	Y+12, r25	; 0x0c
    1782:	ad 87       	std	Y+13, r26	; 0x0d
    1784:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1786:	6b 85       	ldd	r22, Y+11	; 0x0b
    1788:	7c 85       	ldd	r23, Y+12	; 0x0c
    178a:	8d 85       	ldd	r24, Y+13	; 0x0d
    178c:	9e 85       	ldd	r25, Y+14	; 0x0e
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a e7       	ldi	r20, 0x7A	; 122
    1794:	53 e4       	ldi	r21, 0x43	; 67
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	8f 83       	std	Y+7, r24	; 0x07
    17a0:	98 87       	std	Y+8, r25	; 0x08
    17a2:	a9 87       	std	Y+9, r26	; 0x09
    17a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a6:	6f 81       	ldd	r22, Y+7	; 0x07
    17a8:	78 85       	ldd	r23, Y+8	; 0x08
    17aa:	89 85       	ldd	r24, Y+9	; 0x09
    17ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <LCD_Vid_Init+0x66>
		__ticks = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    17c6:	3f c0       	rjmp	.+126    	; 0x1846 <LCD_Vid_Init+0xe4>
	else if (__tmp > 65535)
    17c8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ca:	78 85       	ldd	r23, Y+8	; 0x08
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17dc:	18 16       	cp	r1, r24
    17de:	4c f5       	brge	.+82     	; 0x1832 <LCD_Vid_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <LCD_Vid_Init+0xc6>
    180a:	89 e1       	ldi	r24, 0x19	; 25
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9c 83       	std	Y+4, r25	; 0x04
    1810:	8b 83       	std	Y+3, r24	; 0x03
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <LCD_Vid_Init+0xb4>
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	69 f7       	brne	.-38     	; 0x180a <LCD_Vid_Init+0xa8>
    1830:	14 c0       	rjmp	.+40     	; 0x185a <LCD_Vid_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_Vid_Init+0xf0>
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
	// wait for more than 30 ms
	_delay_ms(40);

	// function set command 2 line ,and  5*8 font size.
	LCD_VidSendCommand(0b00111000);
    185a:	88 e3       	ldi	r24, 0x38	; 56
    185c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_VidSendCommand>

	//display on off control : display enable disable cursor , no blink cursor.
	LCD_VidSendCommand(0b00001100);
    1860:	8c e0       	ldi	r24, 0x0C	; 12
    1862:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_VidSendCommand>

	// clear screen.
	LCD_VidSendCommand(1);
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_VidSendCommand>


}
    186c:	2e 96       	adiw	r28, 0x0e	; 14
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <LCD_VidMoveCursor>:
// move cursor
void LCD_VidMoveCursor(uint8 row , uint8 column)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <LCD_VidMoveCursor+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <LCD_VidMoveCursor+0x8>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3c 83       	std	Y+4, r19	; 0x04
    1896:	2b 83       	std	Y+3, r18	; 0x03
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	31 f0       	breq	.+12     	; 0x18ac <LCD_VidMoveCursor+0x2e>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	21 30       	cpi	r18, 0x01	; 1
    18a6:	31 05       	cpc	r19, r1
    18a8:	61 f0       	breq	.+24     	; 0x18c2 <LCD_VidMoveCursor+0x44>
    18aa:	16 c0       	rjmp	.+44     	; 0x18d8 <LCD_VidMoveCursor+0x5a>
	{
	case 0 :
		if(column < 16)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	80 31       	cpi	r24, 0x10	; 16
    18b0:	98 f4       	brcc	.+38     	; 0x18d8 <LCD_VidMoveCursor+0x5a>
		{
			LCD_VidSendCommand((0x80) + (column));
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	80 58       	subi	r24, 0x80	; 128
    18b6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_VidSendCommand>
			cursor = column;
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	80 93 bc 00 	sts	0x00BC, r24
    18c0:	0b c0       	rjmp	.+22     	; 0x18d8 <LCD_VidMoveCursor+0x5a>
		}
		break;
	case 1:
		if(column < 16)
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	80 31       	cpi	r24, 0x10	; 16
    18c6:	40 f4       	brcc	.+16     	; 0x18d8 <LCD_VidMoveCursor+0x5a>
		{
			LCD_VidSendCommand((0x80) + 0x40 + (column));
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	80 54       	subi	r24, 0x40	; 64
    18cc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_VidSendCommand>
			cursor = 17 + column;
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	8f 5e       	subi	r24, 0xEF	; 239
    18d4:	80 93 bc 00 	sts	0x00BC, r24
		}
		break;
	}
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <LCD_VidPrintStringRowColumn>:
// print string in spasefic adderss
void LCD_VidPrintStringRowColumn(uint8 *Copy_Str , uint8 row , uint8 column)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <LCD_VidPrintStringRowColumn+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <LCD_VidPrintStringRowColumn+0x8>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	6b 83       	std	Y+3, r22	; 0x03
    18f8:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidMoveCursor(row , column);
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	6c 81       	ldd	r22, Y+4	; 0x04
    18fe:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
	LCD_VidPrintString(Copy_Str);
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>

}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <LCD_VidPrintString>:

// print string
void LCD_VidPrintString(uint8 *Copy_Str)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <LCD_VidPrintString+0x6>
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	9b 83       	std	Y+3, r25	; 0x03
    1926:	8a 83       	std	Y+2, r24	; 0x02

	uint8 iterator = 0;
    1928:	19 82       	std	Y+1, r1	; 0x01
    192a:	15 c0       	rjmp	.+42     	; 0x1956 <LCD_VidPrintString+0x3e>
	// check if the string is ending or not
	while(Copy_Str[iterator] != '\0')
	{
		if(iterator == 16)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	80 31       	cpi	r24, 0x10	; 16
    1930:	21 f4       	brne	.+8      	; 0x193a <LCD_VidPrintString+0x22>
		{
			LCD_VidMoveCursor(1,0);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
		}
		// print the data
		LCD_VidSendData(Copy_Str[iterator]);
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	fc 01       	movw	r30, r24
    1946:	e2 0f       	add	r30, r18
    1948:	f3 1f       	adc	r31, r19
    194a:	80 81       	ld	r24, Z
    194c:	0e 94 13 0b 	call	0x1626	; 0x1626 <LCD_VidSendData>

		//increase the address by one to send the next element.
		iterator++;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidPrintString(uint8 *Copy_Str)
{

	uint8 iterator = 0;
	// check if the string is ending or not
	while(Copy_Str[iterator] != '\0')
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	fc 01       	movw	r30, r24
    1962:	e2 0f       	add	r30, r18
    1964:	f3 1f       	adc	r31, r19
    1966:	80 81       	ld	r24, Z
    1968:	88 23       	and	r24, r24
    196a:	01 f7       	brne	.-64     	; 0x192c <LCD_VidPrintString+0x14>
		LCD_VidSendData(Copy_Str[iterator]);

		//increase the address by one to send the next element.
		iterator++;
	}
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <LCD_VidPrintNumber>:


void LCD_VidPrintNumber(uint32 Copy_Integer)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	64 97       	sbiw	r28, 0x14	; 20
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	69 8b       	std	Y+17, r22	; 0x11
    198e:	7a 8b       	std	Y+18, r23	; 0x12
    1990:	8b 8b       	std	Y+19, r24	; 0x13
    1992:	9c 8b       	std	Y+20, r25	; 0x14
	// string to hold the ascii
	uint8 Hold_Ascii[16] ;

	// function itoa convert the data to its corresponding the ascii value from (0 to 9)decimal;
	itoa(Copy_Integer,Hold_Ascii,10);
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	9a 89       	ldd	r25, Y+18	; 0x12
    1998:	9e 01       	movw	r18, r28
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	b9 01       	movw	r22, r18
    19a0:	4a e0       	ldi	r20, 0x0A	; 10
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <itoa>

	//print the integer as a string .
	LCD_VidPrintString(Hold_Ascii);
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
}
    19b0:	64 96       	adiw	r28, 0x14	; 20
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <LCD_VidClear_Screen>:

void LCD_VidClear_Screen(void)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
	// send command clear screen
	LCD_VidSendCommand(0x01);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_VidSendCommand>
	cursor = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	80 93 bc 00 	sts	0x00BC, r24
}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <SPI_VidMaterInit>:
#include "SPI_Interface.h"


/* initialize master */
void SPI_VidMaterInit(ClkRate_type copy_Prescaler,ClkPhase_type copy_CPHA ,ClkPolarity_type copy_CLOP)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	29 97       	sbiw	r28, 0x09	; 9
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	6a 83       	std	Y+2, r22	; 0x02
    19f4:	4b 83       	std	Y+3, r20	; 0x03
	/* Master initialization */
	SET_BIT(SPCR,SPCR_MSTR);
    19f6:	ad e2       	ldi	r26, 0x2D	; 45
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ed e2       	ldi	r30, 0x2D	; 45
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 61       	ori	r24, 0x10	; 16
    1a02:	8c 93       	st	X, r24

	/* clock polarity */
	switch(copy_CLOP)
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	39 87       	std	Y+9, r19	; 0x09
    1a0c:	28 87       	std	Y+8, r18	; 0x08
    1a0e:	88 85       	ldd	r24, Y+8	; 0x08
    1a10:	99 85       	ldd	r25, Y+9	; 0x09
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	31 f0       	breq	.+12     	; 0x1a22 <SPI_VidMaterInit+0x46>
    1a16:	28 85       	ldd	r18, Y+8	; 0x08
    1a18:	39 85       	ldd	r19, Y+9	; 0x09
    1a1a:	21 30       	cpi	r18, 0x01	; 1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	49 f0       	breq	.+18     	; 0x1a32 <SPI_VidMaterInit+0x56>
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <SPI_VidMaterInit+0x64>
	{
	case CPOL0:
		CLEAR_BIT(SPCR,SPCR_CPOL);
    1a22:	ad e2       	ldi	r26, 0x2D	; 45
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ed e2       	ldi	r30, 0x2D	; 45
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	87 7f       	andi	r24, 0xF7	; 247
    1a2e:	8c 93       	st	X, r24
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <SPI_VidMaterInit+0x64>
		break;
	case CPOL1:
		SET_BIT(SPCR,SPCR_CPOL);
    1a32:	ad e2       	ldi	r26, 0x2D	; 45
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	ed e2       	ldi	r30, 0x2D	; 45
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	88 60       	ori	r24, 0x08	; 8
    1a3e:	8c 93       	st	X, r24
		break;
	}

	/* clock phase */
	switch(copy_CPHA)
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	3f 83       	std	Y+7, r19	; 0x07
    1a48:	2e 83       	std	Y+6, r18	; 0x06
    1a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <SPI_VidMaterInit+0x82>
    1a52:	2e 81       	ldd	r18, Y+6	; 0x06
    1a54:	3f 81       	ldd	r19, Y+7	; 0x07
    1a56:	21 30       	cpi	r18, 0x01	; 1
    1a58:	31 05       	cpc	r19, r1
    1a5a:	49 f0       	breq	.+18     	; 0x1a6e <SPI_VidMaterInit+0x92>
    1a5c:	0f c0       	rjmp	.+30     	; 0x1a7c <SPI_VidMaterInit+0xa0>
	{
	case CPHAS0:
		CLEAR_BIT(SPCR,SPCR_CPHA);
    1a5e:	ad e2       	ldi	r26, 0x2D	; 45
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	ed e2       	ldi	r30, 0x2D	; 45
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8b 7f       	andi	r24, 0xFB	; 251
    1a6a:	8c 93       	st	X, r24
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <SPI_VidMaterInit+0xa0>
		break;
	case CPHAS1:
		SET_BIT(SPCR,SPCR_CPHA);
    1a6e:	ad e2       	ldi	r26, 0x2D	; 45
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ed e2       	ldi	r30, 0x2D	; 45
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	84 60       	ori	r24, 0x04	; 4
    1a7a:	8c 93       	st	X, r24
		break;
	}

	/* Clock prescaler /16*/
	switch(copy_Prescaler)
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	3d 83       	std	Y+5, r19	; 0x05
    1a84:	2c 83       	std	Y+4, r18	; 0x04
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	83 30       	cpi	r24, 0x03	; 3
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <SPI_VidMaterInit+0xb6>
    1a90:	70 c0       	rjmp	.+224    	; 0x1b72 <SPI_VidMaterInit+0x196>
    1a92:	2c 81       	ldd	r18, Y+4	; 0x04
    1a94:	3d 81       	ldd	r19, Y+5	; 0x05
    1a96:	24 30       	cpi	r18, 0x04	; 4
    1a98:	31 05       	cpc	r19, r1
    1a9a:	84 f4       	brge	.+32     	; 0x1abc <SPI_VidMaterInit+0xe0>
    1a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	d1 f1       	breq	.+116    	; 0x1b1a <SPI_VidMaterInit+0x13e>
    1aa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	0c f0       	brlt	.+2      	; 0x1ab2 <SPI_VidMaterInit+0xd6>
    1ab0:	4a c0       	rjmp	.+148    	; 0x1b46 <SPI_VidMaterInit+0x16a>
    1ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	d1 f0       	breq	.+52     	; 0x1aee <SPI_VidMaterInit+0x112>
    1aba:	c8 c0       	rjmp	.+400    	; 0x1c4c <SPI_VidMaterInit+0x270>
    1abc:	2c 81       	ldd	r18, Y+4	; 0x04
    1abe:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac0:	25 30       	cpi	r18, 0x05	; 5
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <SPI_VidMaterInit+0xec>
    1ac6:	81 c0       	rjmp	.+258    	; 0x1bca <SPI_VidMaterInit+0x1ee>
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	85 30       	cpi	r24, 0x05	; 5
    1ace:	91 05       	cpc	r25, r1
    1ad0:	0c f4       	brge	.+2      	; 0x1ad4 <SPI_VidMaterInit+0xf8>
    1ad2:	65 c0       	rjmp	.+202    	; 0x1b9e <SPI_VidMaterInit+0x1c2>
    1ad4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad8:	26 30       	cpi	r18, 0x06	; 6
    1ada:	31 05       	cpc	r19, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <SPI_VidMaterInit+0x104>
    1ade:	8b c0       	rjmp	.+278    	; 0x1bf6 <SPI_VidMaterInit+0x21a>
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	87 30       	cpi	r24, 0x07	; 7
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <SPI_VidMaterInit+0x110>
    1aea:	9b c0       	rjmp	.+310    	; 0x1c22 <SPI_VidMaterInit+0x246>
    1aec:	af c0       	rjmp	.+350    	; 0x1c4c <SPI_VidMaterInit+0x270>
	{
	case Fosc_4:
		CLEAR_BIT(SPCR,SPCR_SPR0);
    1aee:	ad e2       	ldi	r26, 0x2D	; 45
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ed e2       	ldi	r30, 0x2D	; 45
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8e 7f       	andi	r24, 0xFE	; 254
    1afa:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,SPCR_SPR1);
    1afc:	ad e2       	ldi	r26, 0x2D	; 45
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	ed e2       	ldi	r30, 0x2D	; 45
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8d 7f       	andi	r24, 0xFD	; 253
    1b08:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR,SPSR_SPI2X);
    1b0a:	ae e2       	ldi	r26, 0x2E	; 46
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ee e2       	ldi	r30, 0x2E	; 46
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8e 7f       	andi	r24, 0xFE	; 254
    1b16:	8c 93       	st	X, r24
    1b18:	99 c0       	rjmp	.+306    	; 0x1c4c <SPI_VidMaterInit+0x270>
		break;
	case Fosc_16:
		SET_BIT(SPCR,SPCR_SPR0);
    1b1a:	ad e2       	ldi	r26, 0x2D	; 45
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	ed e2       	ldi	r30, 0x2D	; 45
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	81 60       	ori	r24, 0x01	; 1
    1b26:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,SPCR_SPR1);
    1b28:	ad e2       	ldi	r26, 0x2D	; 45
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ed e2       	ldi	r30, 0x2D	; 45
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8d 7f       	andi	r24, 0xFD	; 253
    1b34:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR,SPSR_SPI2X);
    1b36:	ae e2       	ldi	r26, 0x2E	; 46
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ee e2       	ldi	r30, 0x2E	; 46
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8e 7f       	andi	r24, 0xFE	; 254
    1b42:	8c 93       	st	X, r24
    1b44:	83 c0       	rjmp	.+262    	; 0x1c4c <SPI_VidMaterInit+0x270>
		break;
	case Fosc_64:
		CLEAR_BIT(SPCR,SPCR_SPR0);
    1b46:	ad e2       	ldi	r26, 0x2D	; 45
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ed e2       	ldi	r30, 0x2D	; 45
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8e 7f       	andi	r24, 0xFE	; 254
    1b52:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
    1b54:	ad e2       	ldi	r26, 0x2D	; 45
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	ed e2       	ldi	r30, 0x2D	; 45
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	82 60       	ori	r24, 0x02	; 2
    1b60:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR,SPSR_SPI2X);
    1b62:	ae e2       	ldi	r26, 0x2E	; 46
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ee e2       	ldi	r30, 0x2E	; 46
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	8c 93       	st	X, r24
    1b70:	6d c0       	rjmp	.+218    	; 0x1c4c <SPI_VidMaterInit+0x270>
		break;
	case Fosc_128:
		SET_BIT(SPCR,SPCR_SPR0);
    1b72:	ad e2       	ldi	r26, 0x2D	; 45
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ed e2       	ldi	r30, 0x2D	; 45
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
    1b80:	ad e2       	ldi	r26, 0x2D	; 45
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ed e2       	ldi	r30, 0x2D	; 45
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	82 60       	ori	r24, 0x02	; 2
    1b8c:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR,SPSR_SPI2X);
    1b8e:	ae e2       	ldi	r26, 0x2E	; 46
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ee e2       	ldi	r30, 0x2E	; 46
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	8e 7f       	andi	r24, 0xFE	; 254
    1b9a:	8c 93       	st	X, r24
    1b9c:	57 c0       	rjmp	.+174    	; 0x1c4c <SPI_VidMaterInit+0x270>
		break;
	case Fosc_2:
		CLEAR_BIT(SPCR,SPCR_SPR0);
    1b9e:	ad e2       	ldi	r26, 0x2D	; 45
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	ed e2       	ldi	r30, 0x2D	; 45
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8e 7f       	andi	r24, 0xFE	; 254
    1baa:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,SPCR_SPR1);
    1bac:	ad e2       	ldi	r26, 0x2D	; 45
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ed e2       	ldi	r30, 0x2D	; 45
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8d 7f       	andi	r24, 0xFD	; 253
    1bb8:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
    1bba:	ae e2       	ldi	r26, 0x2E	; 46
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	ee e2       	ldi	r30, 0x2E	; 46
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	81 60       	ori	r24, 0x01	; 1
    1bc6:	8c 93       	st	X, r24
    1bc8:	41 c0       	rjmp	.+130    	; 0x1c4c <SPI_VidMaterInit+0x270>
		break;
	case Fosc_8:
		SET_BIT(SPCR,SPCR_SPR0);
    1bca:	ad e2       	ldi	r26, 0x2D	; 45
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ed e2       	ldi	r30, 0x2D	; 45
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	81 60       	ori	r24, 0x01	; 1
    1bd6:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,SPCR_SPR1);
    1bd8:	ad e2       	ldi	r26, 0x2D	; 45
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ed e2       	ldi	r30, 0x2D	; 45
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8d 7f       	andi	r24, 0xFD	; 253
    1be4:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
    1be6:	ae e2       	ldi	r26, 0x2E	; 46
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ee e2       	ldi	r30, 0x2E	; 46
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	81 60       	ori	r24, 0x01	; 1
    1bf2:	8c 93       	st	X, r24
    1bf4:	2b c0       	rjmp	.+86     	; 0x1c4c <SPI_VidMaterInit+0x270>
		break;
	case Fosc_32:
		CLEAR_BIT(SPCR,SPCR_SPR0);
    1bf6:	ad e2       	ldi	r26, 0x2D	; 45
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	ed e2       	ldi	r30, 0x2D	; 45
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8e 7f       	andi	r24, 0xFE	; 254
    1c02:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
    1c04:	ad e2       	ldi	r26, 0x2D	; 45
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	ed e2       	ldi	r30, 0x2D	; 45
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	82 60       	ori	r24, 0x02	; 2
    1c10:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
    1c12:	ae e2       	ldi	r26, 0x2E	; 46
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ee e2       	ldi	r30, 0x2E	; 46
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	81 60       	ori	r24, 0x01	; 1
    1c1e:	8c 93       	st	X, r24
    1c20:	15 c0       	rjmp	.+42     	; 0x1c4c <SPI_VidMaterInit+0x270>
		break;
	case FoscDouble_64:
		SET_BIT(SPCR,SPCR_SPR0);
    1c22:	ad e2       	ldi	r26, 0x2D	; 45
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ed e2       	ldi	r30, 0x2D	; 45
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
    1c30:	ad e2       	ldi	r26, 0x2D	; 45
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ed e2       	ldi	r30, 0x2D	; 45
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	82 60       	ori	r24, 0x02	; 2
    1c3c:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
    1c3e:	ae e2       	ldi	r26, 0x2E	; 46
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	ee e2       	ldi	r30, 0x2E	; 46
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	81 60       	ori	r24, 0x01	; 1
    1c4a:	8c 93       	st	X, r24
		break;
	}

	/* Enable SPI */
	SET_BIT(SPCR,SPCR_SPE);
    1c4c:	ad e2       	ldi	r26, 0x2D	; 45
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	ed e2       	ldi	r30, 0x2D	; 45
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	80 64       	ori	r24, 0x40	; 64
    1c58:	8c 93       	st	X, r24
}
    1c5a:	29 96       	adiw	r28, 0x09	; 9
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <SPI_VidSlaveInit>:

/* initialize slave */
void SPI_VidSlaveInit(ClkPhase_type copy_CPHA ,ClkPolarity_type copy_CLOP)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <SPI_VidSlaveInit+0x6>
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <SPI_VidSlaveInit+0x8>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <SPI_VidSlaveInit+0xa>
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	6a 83       	std	Y+2, r22	; 0x02
	/* Slave initialization to prevent the to be low */
	CLEAR_BIT(SPCR,SPCR_MSTR);
    1c7e:	ad e2       	ldi	r26, 0x2D	; 45
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	ed e2       	ldi	r30, 0x2D	; 45
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8f 7e       	andi	r24, 0xEF	; 239
    1c8a:	8c 93       	st	X, r24

	/* clock polarity */
	switch(copy_CLOP)
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	3e 83       	std	Y+6, r19	; 0x06
    1c94:	2d 83       	std	Y+5, r18	; 0x05
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <SPI_VidSlaveInit+0x3e>
    1c9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca2:	21 30       	cpi	r18, 0x01	; 1
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	49 f0       	breq	.+18     	; 0x1cba <SPI_VidSlaveInit+0x4e>
    1ca8:	0f c0       	rjmp	.+30     	; 0x1cc8 <SPI_VidSlaveInit+0x5c>
	{
	case CPOL0:
		CLEAR_BIT(SPCR,SPCR_CPOL);
    1caa:	ad e2       	ldi	r26, 0x2D	; 45
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ed e2       	ldi	r30, 0x2D	; 45
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	87 7f       	andi	r24, 0xF7	; 247
    1cb6:	8c 93       	st	X, r24
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <SPI_VidSlaveInit+0x5c>
		break;
	case CPOL1:
		SET_BIT(SPCR,SPCR_CPOL);
    1cba:	ad e2       	ldi	r26, 0x2D	; 45
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	ed e2       	ldi	r30, 0x2D	; 45
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 60       	ori	r24, 0x08	; 8
    1cc6:	8c 93       	st	X, r24
		break;
	}

	/* clock phase */
	switch(copy_CPHA)
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	3c 83       	std	Y+4, r19	; 0x04
    1cd0:	2b 83       	std	Y+3, r18	; 0x03
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	31 f0       	breq	.+12     	; 0x1ce6 <SPI_VidSlaveInit+0x7a>
    1cda:	2b 81       	ldd	r18, Y+3	; 0x03
    1cdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cde:	21 30       	cpi	r18, 0x01	; 1
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	49 f0       	breq	.+18     	; 0x1cf6 <SPI_VidSlaveInit+0x8a>
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <SPI_VidSlaveInit+0x98>
	{
	case CPHAS0:
		CLEAR_BIT(SPCR,SPCR_CPHA);
    1ce6:	ad e2       	ldi	r26, 0x2D	; 45
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	ed e2       	ldi	r30, 0x2D	; 45
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8b 7f       	andi	r24, 0xFB	; 251
    1cf2:	8c 93       	st	X, r24
    1cf4:	07 c0       	rjmp	.+14     	; 0x1d04 <SPI_VidSlaveInit+0x98>
		break;
	case CPHAS1:
		SET_BIT(SPCR,SPCR_CPHA);
    1cf6:	ad e2       	ldi	r26, 0x2D	; 45
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	ed e2       	ldi	r30, 0x2D	; 45
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	84 60       	ori	r24, 0x04	; 4
    1d02:	8c 93       	st	X, r24
		break;
	}

	/* Enable SPI */
	SET_BIT(SPCR,SPCR_SPE);
    1d04:	ad e2       	ldi	r26, 0x2D	; 45
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	ed e2       	ldi	r30, 0x2D	; 45
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 64       	ori	r24, 0x40	; 64
    1d10:	8c 93       	st	X, r24
}
    1d12:	26 96       	adiw	r28, 0x06	; 6
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <SPI_TransReceive>:

/* transmit and receive at the same time */
uint8 SPI_TransReceive(uint8 copy_data)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	0f 92       	push	r0
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	89 83       	std	Y+1, r24	; 0x01

	/* Send the data */
	SPDR = copy_data;
    1d30:	ef e2       	ldi	r30, 0x2F	; 47
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	80 83       	st	Z, r24

	/* wait until  transfer complete */
    while(GET_BIT(SPSR,SPSR_SPIF)== 0);
    1d38:	ee e2       	ldi	r30, 0x2E	; 46
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	88 23       	and	r24, r24
    1d40:	dc f7       	brge	.-10     	; 0x1d38 <SPI_TransReceive+0x14>
    /* after the tranfer comlete ,return the value of SPDR after update */
    return SPDR;
    1d42:	ef e2       	ldi	r30, 0x2F	; 47
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
}
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <TIMER1_VidInit>:
#include "TIMER1_Private.h"
#include "TIMER1_Interface.h"

/* initialize timer1*/
void TIMER1_VidInit()
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	/* non inverting mode FPWM (table 45 data sheet) */
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1d58:	af e4       	ldi	r26, 0x4F	; 79
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	ef e4       	ldi	r30, 0x4F	; 79
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	80 68       	ori	r24, 0x80	; 128
    1d64:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1d66:	af e4       	ldi	r26, 0x4F	; 79
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	ef e4       	ldi	r30, 0x4F	; 79
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 7b       	andi	r24, 0xBF	; 191
    1d72:	8c 93       	st	X, r24

	/* setting waveform generation mode(table 14 data sheet) */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1d74:	af e4       	ldi	r26, 0x4F	; 79
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	ef e4       	ldi	r30, 0x4F	; 79
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8e 7f       	andi	r24, 0xFE	; 254
    1d80:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1d82:	af e4       	ldi	r26, 0x4F	; 79
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ef e4       	ldi	r30, 0x4F	; 79
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	82 60       	ori	r24, 0x02	; 2
    1d8e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1B_WGM12);
    1d90:	af e4       	ldi	r26, 0x4F	; 79
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ef e4       	ldi	r30, 0x4F	; 79
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 60       	ori	r24, 0x08	; 8
    1d9c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1B_WGM13);
    1d9e:	af e4       	ldi	r26, 0x4F	; 79
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	ef e4       	ldi	r30, 0x4F	; 79
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 61       	ori	r24, 0x10	; 16
    1daa:	8c 93       	st	X, r24

	/* SRT prescaler divided by 8 (table 48 data sheet) */
	TCCR1B &=0xF8; /*0b11111000*/
    1dac:	ae e4       	ldi	r26, 0x4E	; 78
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	ee e4       	ldi	r30, 0x4E	; 78
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	88 7f       	andi	r24, 0xF8	; 248
    1db8:	8c 93       	st	X, r24
	TCCR1B |=0xF2; /*0b11111010*/
    1dba:	ae e4       	ldi	r26, 0x4E	; 78
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ee e4       	ldi	r30, 0x4E	; 78
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	82 6f       	ori	r24, 0xF2	; 242
    1dc6:	8c 93       	st	X, r24
}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <TIMER1_VidSet_ICR_TopVlue>:

/* setting top value */
void TIMER1_VidSet_ICR_TopVlue(uint16 value)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <TIMER1_VidSet_ICR_TopVlue+0x6>
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    1ddc:	e6 e4       	ldi	r30, 0x46	; 70
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <TIMER1_VidSet_OCR_CompMatch>:

void TIMER1_VidSet_OCR_CompMatch(uint16 value)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <TIMER1_VidSet_OCR_CompMatch+0x6>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = value;
    1e00:	ea e4       	ldi	r30, 0x4A	; 74
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <TIMER0_VidInit>:
/* Description : initialization of TIMER0
   Input : Timer mode and clock prescaler
   output : select mode and prescaler
 */
void TIMER0_VidInit(et_TIMER0MODE mode , et_TIMER0PRESCALLER prescaler)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <TIMER0_VidInit+0x6>
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <TIMER0_VidInit+0x8>
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3c 83       	std	Y+4, r19	; 0x04
    1e2e:	2b 83       	std	Y+3, r18	; 0x03
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	91 05       	cpc	r25, r1
    1e38:	21 f1       	breq	.+72     	; 0x1e82 <TIMER0_VidInit+0x6c>
    1e3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <TIMER0_VidInit+0x38>
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	61 f0       	breq	.+24     	; 0x1e64 <TIMER0_VidInit+0x4e>
    1e4c:	46 c0       	rjmp	.+140    	; 0x1eda <TIMER0_VidInit+0xc4>
    1e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e50:	3c 81       	ldd	r19, Y+4	; 0x04
    1e52:	22 30       	cpi	r18, 0x02	; 2
    1e54:	31 05       	cpc	r19, r1
    1e56:	21 f1       	breq	.+72     	; 0x1ea0 <TIMER0_VidInit+0x8a>
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	83 30       	cpi	r24, 0x03	; 3
    1e5e:	91 05       	cpc	r25, r1
    1e60:	71 f1       	breq	.+92     	; 0x1ebe <TIMER0_VidInit+0xa8>
    1e62:	3b c0       	rjmp	.+118    	; 0x1eda <TIMER0_VidInit+0xc4>
	{
	case TIMER0_NORMAL_MODE :
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    1e64:	a3 e5       	ldi	r26, 0x53	; 83
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e3 e5       	ldi	r30, 0x53	; 83
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	8f 7b       	andi	r24, 0xBF	; 191
    1e70:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01);
    1e72:	a3 e5       	ldi	r26, 0x53	; 83
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e3 e5       	ldi	r30, 0x53	; 83
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	87 7f       	andi	r24, 0xF7	; 247
    1e7e:	8c 93       	st	X, r24
    1e80:	2c c0       	rjmp	.+88     	; 0x1eda <TIMER0_VidInit+0xc4>
		break;

	case TIMER0_PHASECORRECT_MODE :
		SET_BIT(TCCR0,TCCR0_WGM00);
    1e82:	a3 e5       	ldi	r26, 0x53	; 83
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e3 e5       	ldi	r30, 0x53	; 83
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 64       	ori	r24, 0x40	; 64
    1e8e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01);
    1e90:	a3 e5       	ldi	r26, 0x53	; 83
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e3 e5       	ldi	r30, 0x53	; 83
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	87 7f       	andi	r24, 0xF7	; 247
    1e9c:	8c 93       	st	X, r24
    1e9e:	1d c0       	rjmp	.+58     	; 0x1eda <TIMER0_VidInit+0xc4>
		break;

	case TIMER0_CTC_MODE :
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    1ea0:	a3 e5       	ldi	r26, 0x53	; 83
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e3 e5       	ldi	r30, 0x53	; 83
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8f 7b       	andi	r24, 0xBF	; 191
    1eac:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    1eae:	a3 e5       	ldi	r26, 0x53	; 83
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e3 e5       	ldi	r30, 0x53	; 83
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 60       	ori	r24, 0x08	; 8
    1eba:	8c 93       	st	X, r24
    1ebc:	0e c0       	rjmp	.+28     	; 0x1eda <TIMER0_VidInit+0xc4>
		break;

	case TIMER0_FASTPWM_MODE :
		SET_BIT(TCCR0,TCCR0_WGM00);
    1ebe:	a3 e5       	ldi	r26, 0x53	; 83
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e3 e5       	ldi	r30, 0x53	; 83
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 64       	ori	r24, 0x40	; 64
    1eca:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    1ecc:	a3 e5       	ldi	r26, 0x53	; 83
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e3 e5       	ldi	r30, 0x53	; 83
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	88 60       	ori	r24, 0x08	; 8
    1ed8:	8c 93       	st	X, r24
		break;
	}
	/* Prescaler */
	TCCR0 |= 0xF8; //0b11111000 make the first 3bit = 0
    1eda:	a3 e5       	ldi	r26, 0x53	; 83
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e3 e5       	ldi	r30, 0x53	; 83
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	88 6f       	ori	r24, 0xF8	; 248
    1ee6:	8c 93       	st	X, r24
	TCCR0 |= prescaler;
    1ee8:	a3 e5       	ldi	r26, 0x53	; 83
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e3 e5       	ldi	r30, 0x53	; 83
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	90 81       	ld	r25, Z
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	89 2b       	or	r24, r25
    1ef6:	8c 93       	st	X, r24
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <TIMER0_CompareOutputMode>:
   Input : Mode
   output : select output compare mode of CTC or PWM.
 */

void TIMER0_CompareOutputMode(et_FastPWM Mode)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <TIMER0_CompareOutputMode+0x6>
    1f0c:	0f 92       	push	r0
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode)
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	3b 83       	std	Y+3, r19	; 0x03
    1f1c:	2a 83       	std	Y+2, r18	; 0x02
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	9b 81       	ldd	r25, Y+3	; 0x03
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	91 05       	cpc	r25, r1
    1f26:	21 f1       	breq	.+72     	; 0x1f70 <TIMER0_CompareOutputMode+0x6a>
    1f28:	2a 81       	ldd	r18, Y+2	; 0x02
    1f2a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <TIMER0_CompareOutputMode+0x36>
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	9b 81       	ldd	r25, Y+3	; 0x03
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	61 f0       	breq	.+24     	; 0x1f52 <TIMER0_CompareOutputMode+0x4c>
    1f3a:	46 c0       	rjmp	.+140    	; 0x1fc8 <TIMER0_CompareOutputMode+0xc2>
    1f3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	21 f1       	breq	.+72     	; 0x1f8e <TIMER0_CompareOutputMode+0x88>
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	83 30       	cpi	r24, 0x03	; 3
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	71 f1       	breq	.+92     	; 0x1fac <TIMER0_CompareOutputMode+0xa6>
    1f50:	3b c0       	rjmp	.+118    	; 0x1fc8 <TIMER0_CompareOutputMode+0xc2>
	{
	/* COM01   COM00
	     0       0
	   Normal Operation In Fast-PWM OR CTC. */
	case Normal_Operation:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1f52:	a3 e5       	ldi	r26, 0x53	; 83
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e3 e5       	ldi	r30, 0x53	; 83
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8f 7e       	andi	r24, 0xEF	; 239
    1f5e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    1f60:	a3 e5       	ldi	r26, 0x53	; 83
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e3 e5       	ldi	r30, 0x53	; 83
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	8f 7d       	andi	r24, 0xDF	; 223
    1f6c:	8c 93       	st	X, r24
    1f6e:	2c c0       	rjmp	.+88     	; 0x1fc8 <TIMER0_CompareOutputMode+0xc2>
		break;
		/* COM01   COM00
		 0       1
	   Reserved In Fast-PWM And Toggle In CTC. */
	case Reserved_OR_Toggle:
		SET_BIT(TCCR0,TCCR0_COM00);
    1f70:	a3 e5       	ldi	r26, 0x53	; 83
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e3 e5       	ldi	r30, 0x53	; 83
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	80 61       	ori	r24, 0x10	; 16
    1f7c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    1f7e:	a3 e5       	ldi	r26, 0x53	; 83
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e3 e5       	ldi	r30, 0x53	; 83
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8f 7d       	andi	r24, 0xDF	; 223
    1f8a:	8c 93       	st	X, r24
    1f8c:	1d c0       	rjmp	.+58     	; 0x1fc8 <TIMER0_CompareOutputMode+0xc2>
		break;
		/* COM01   COM00
		     1       0
	       Non Inverting In Fast-PWM And Clear OC0 On Compare In CTC. */
	case NonInverting_OR_ClearOC0:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1f8e:	a3 e5       	ldi	r26, 0x53	; 83
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e3 e5       	ldi	r30, 0x53	; 83
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8f 7e       	andi	r24, 0xEF	; 239
    1f9a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    1f9c:	a3 e5       	ldi	r26, 0x53	; 83
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e3 e5       	ldi	r30, 0x53	; 83
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	80 62       	ori	r24, 0x20	; 32
    1fa8:	8c 93       	st	X, r24
    1faa:	0e c0       	rjmp	.+28     	; 0x1fc8 <TIMER0_CompareOutputMode+0xc2>
		break;
		/* COM01   COM00
			 1       1
		   Inverting In Fast-PWM And Set OC0 On Compare In CTC. */
	case Inverting_OR_SetOC0:
		SET_BIT(TCCR0,TCCR0_COM00);
    1fac:	a3 e5       	ldi	r26, 0x53	; 83
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e3 e5       	ldi	r30, 0x53	; 83
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 61       	ori	r24, 0x10	; 16
    1fb8:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    1fba:	a3 e5       	ldi	r26, 0x53	; 83
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e3 e5       	ldi	r30, 0x53	; 83
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	80 62       	ori	r24, 0x20	; 32
    1fc6:	8c 93       	st	X, r24
		break;
	}

}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <TIMER0_Interrupt_Enable>:

/* Description :  Enable interrupt of TIMER0
   Input : void
   output : Enable the normal mode interrupt enable */
void TIMER0_Interrupt_Enable(INT_ENABLE Enable_Mode)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01
	if(Enable_Mode == NORMAL)
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	88 23       	and	r24, r24
    1fe4:	41 f4       	brne	.+16     	; 0x1ff6 <TIMER0_Interrupt_Enable+0x22>
	{
		SET_BIT(TIMSK, TIMSK_TOIE0);
    1fe6:	a9 e5       	ldi	r26, 0x59	; 89
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e9 e5       	ldi	r30, 0x59	; 89
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	81 60       	ori	r24, 0x01	; 1
    1ff2:	8c 93       	st	X, r24
    1ff4:	0a c0       	rjmp	.+20     	; 0x200a <TIMER0_Interrupt_Enable+0x36>
	}
	else if(Enable_Mode == COMP_CTC)
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	39 f4       	brne	.+14     	; 0x200a <TIMER0_Interrupt_Enable+0x36>
	{
		SET_BIT(TIMSK, TIMSK_OCIE0);
    1ffc:	a9 e5       	ldi	r26, 0x59	; 89
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e9 e5       	ldi	r30, 0x59	; 89
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	82 60       	ori	r24, 0x02	; 2
    2008:	8c 93       	st	X, r24
	}

}
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <TIMER0_Interrupt_Disable>:

/* Description : Disable interrupt of TIMER0
   Input : void
   output : Disable the normal mode interrupt enable */
void TIMER0_Interrupt_Disable(INT_ENABLE Enable_Mode)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	89 83       	std	Y+1, r24	; 0x01
	if(Enable_Mode == NORMAL)
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	88 23       	and	r24, r24
    2022:	41 f4       	brne	.+16     	; 0x2034 <TIMER0_Interrupt_Disable+0x22>
	{
		CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    2024:	a9 e5       	ldi	r26, 0x59	; 89
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e9 e5       	ldi	r30, 0x59	; 89
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8e 7f       	andi	r24, 0xFE	; 254
    2030:	8c 93       	st	X, r24
    2032:	0a c0       	rjmp	.+20     	; 0x2048 <TIMER0_Interrupt_Disable+0x36>
	}
	else if(Enable_Mode == COMP_CTC)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	39 f4       	brne	.+14     	; 0x2048 <TIMER0_Interrupt_Disable+0x36>
	{
		CLEAR_BIT(TIMSK, TIMSK_OCIE0);
    203a:	a9 e5       	ldi	r26, 0x59	; 89
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e9 e5       	ldi	r30, 0x59	; 89
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	8d 7f       	andi	r24, 0xFD	; 253
    2046:	8c 93       	st	X, r24
	}
}
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <TIMER0_VidSetCompMatchValue>:


/* Set value to OCR0 */
void TIMER0_VidSetCompMatchValue(uint8 copy_value)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	0f 92       	push	r0
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_value;
    205c:	ec e5       	ldi	r30, 0x5C	; 92
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	80 83       	st	Z, r24
}
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <TIMER0_SetCallBack>:

void TIMER0_SetCallBack(void (*Copy_CallBackFunc)(void))
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <TIMER0_SetCallBack+0x6>
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_pvCallBackFun = Copy_CallBackFunc;
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	90 93 e7 00 	sts	0x00E7, r25
    2082:	80 93 e6 00 	sts	0x00E6, r24
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <__vector_10>:

/* ISR function for INT1 */
void __vector_10 (void) __attribute__((signal));

void __vector_10 (void)
{
    2090:	1f 92       	push	r1
    2092:	0f 92       	push	r0
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	0f 92       	push	r0
    2098:	11 24       	eor	r1, r1
    209a:	2f 93       	push	r18
    209c:	3f 93       	push	r19
    209e:	4f 93       	push	r20
    20a0:	5f 93       	push	r21
    20a2:	6f 93       	push	r22
    20a4:	7f 93       	push	r23
    20a6:	8f 93       	push	r24
    20a8:	9f 93       	push	r25
    20aa:	af 93       	push	r26
    20ac:	bf 93       	push	r27
    20ae:	ef 93       	push	r30
    20b0:	ff 93       	push	r31
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
	TIMER0_pvCallBackFun();
    20ba:	e0 91 e6 00 	lds	r30, 0x00E6
    20be:	f0 91 e7 00 	lds	r31, 0x00E7
    20c2:	09 95       	icall
}
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	ff 91       	pop	r31
    20ca:	ef 91       	pop	r30
    20cc:	bf 91       	pop	r27
    20ce:	af 91       	pop	r26
    20d0:	9f 91       	pop	r25
    20d2:	8f 91       	pop	r24
    20d4:	7f 91       	pop	r23
    20d6:	6f 91       	pop	r22
    20d8:	5f 91       	pop	r21
    20da:	4f 91       	pop	r20
    20dc:	3f 91       	pop	r19
    20de:	2f 91       	pop	r18
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	0f 90       	pop	r0
    20e6:	1f 90       	pop	r1
    20e8:	18 95       	reti

000020ea <UART_VidSendData>:
#include "UART_Private.h"
#include "UART_Interface.h"

/* Send Data */
void UART_VidSendData(uint8 copy_data)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	0f 92       	push	r0
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	89 83       	std	Y+1, r24	; 0x01
	/* wait until the transmit is empty*/
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    20f6:	eb e2       	ldi	r30, 0x2B	; 43
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	80 72       	andi	r24, 0x20	; 32
    2102:	90 70       	andi	r25, 0x00	; 0
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	b9 f3       	breq	.-18     	; 0x20f6 <UART_VidSendData+0xc>

	/* write the data in UDR */
	UDR = copy_data;
    2108:	ec e2       	ldi	r30, 0x2C	; 44
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	80 83       	st	Z, r24
}
    2110:	0f 90       	pop	r0
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <UART_U8ReciveData>:

/* Receive Data */
uint8 UART_U8ReciveData(void)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	/* wait receive operation until complete */
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0);
    2120:	eb e2       	ldi	r30, 0x2B	; 43
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	88 23       	and	r24, r24
    2128:	dc f7       	brge	.-10     	; 0x2120 <UART_U8ReciveData+0x8>

	/* return the value of UDR */
	return UDR;
    212a:	ec e2       	ldi	r30, 0x2C	; 44
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
}
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <UART_VidSendDataString>:

/*send string to UART */
void UART_VidSendDataString(char *copy_dataString)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <UART_VidSendDataString+0x6>
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	9b 83       	std	Y+3, r25	; 0x03
    2144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_counter=0;
    2146:	19 82       	std	Y+1, r1	; 0x01
    2148:	0e c0       	rjmp	.+28     	; 0x2166 <UART_VidSendDataString+0x30>
	while(copy_dataString[local_counter] != '\0')
	{
		UART_VidSendData(copy_dataString[local_counter]);
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	fc 01       	movw	r30, r24
    2156:	e2 0f       	add	r30, r18
    2158:	f3 1f       	adc	r31, r19
    215a:	80 81       	ld	r24, Z
    215c:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_VidSendData>
		local_counter++;
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	89 83       	std	Y+1, r24	; 0x01

/*send string to UART */
void UART_VidSendDataString(char *copy_dataString)
{
	uint8 local_counter=0;
	while(copy_dataString[local_counter] != '\0')
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	9b 81       	ldd	r25, Y+3	; 0x03
    2170:	fc 01       	movw	r30, r24
    2172:	e2 0f       	add	r30, r18
    2174:	f3 1f       	adc	r31, r19
    2176:	80 81       	ld	r24, Z
    2178:	88 23       	and	r24, r24
    217a:	39 f7       	brne	.-50     	; 0x214a <UART_VidSendDataString+0x14>
	{
		UART_VidSendData(copy_dataString[local_counter]);
		local_counter++;
	}
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <UART_U8ReciveDataString>:

uint8 UART_U8ReciveDataString(uint8 *copy_dataString , uint8 copy_stringSize)
{
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <UART_U8ReciveDataString+0xa>
    2192:	00 d0       	rcall	.+0      	; 0x2194 <UART_U8ReciveDataString+0xc>
    2194:	0f 92       	push	r0
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
    219e:	6d 83       	std	Y+5, r22	; 0x05
	    uint8 local_counter = 0;
    21a0:	1a 82       	std	Y+2, r1	; 0x02
	    uint8 local_ErrorState = NO_ERROR_STATE;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
	    if(copy_dataString == NULL)
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	19 f4       	brne	.+6      	; 0x21b4 <UART_U8ReciveDataString+0x2c>
	    {
	    	local_ErrorState = NULLPOINTER;
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	15 c0       	rjmp	.+42     	; 0x21de <UART_U8ReciveDataString+0x56>
	    }
	    else
	    {
		    for(local_counter = 0 ; local_counter < copy_stringSize ; local_counter++)
    21b4:	1a 82       	std	Y+2, r1	; 0x02
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <UART_U8ReciveDataString+0x4e>
		    {
		    	copy_dataString[local_counter] = UART_U8ReciveData();
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	8c 01       	movw	r16, r24
    21c4:	02 0f       	add	r16, r18
    21c6:	13 1f       	adc	r17, r19
    21c8:	0e 94 8c 10 	call	0x2118	; 0x2118 <UART_U8ReciveData>
    21cc:	f8 01       	movw	r30, r16
    21ce:	80 83       	st	Z, r24
	    {
	    	local_ErrorState = NULLPOINTER;
	    }
	    else
	    {
		    for(local_counter = 0 ; local_counter < copy_stringSize ; local_counter++)
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	8a 83       	std	Y+2, r24	; 0x02
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	98 17       	cp	r25, r24
    21dc:	68 f3       	brcs	.-38     	; 0x21b8 <UART_U8ReciveDataString+0x30>
		    {
		    	copy_dataString[local_counter] = UART_U8ReciveData();
		    }

	    }
	    return local_ErrorState;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	08 95       	ret

000021f4 <UART_VidInit>:

/* initialize UART */
void UART_VidInit(uint8 copy_stopBit ,uint8 copy_ParityBit ,uint8 copy_dataBit)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	2a 97       	sbiw	r28, 0x0a	; 10
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	8a 83       	std	Y+2, r24	; 0x02
    220a:	6b 83       	std	Y+3, r22	; 0x03
    220c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local = 0;
    220e:	19 82       	std	Y+1, r1	; 0x01

	/* RX Enable And TX Enable */
	SET_BIT(UCSRB,UCSRB_RXEN);
    2210:	aa e2       	ldi	r26, 0x2A	; 42
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ea e2       	ldi	r30, 0x2A	; 42
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	88 60       	ori	r24, 0x08	; 8
    221c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
    221e:	aa e2       	ldi	r26, 0x2A	; 42
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	ea e2       	ldi	r30, 0x2A	; 42
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	80 61       	ori	r24, 0x10	; 16
    222a:	8c 93       	st	X, r24

	/* Register Select */
	SET_BIT(Local,UCSRC_URSEL);
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	80 68       	ori	r24, 0x80	; 128
    2230:	89 83       	std	Y+1, r24	; 0x01

	/* select stop bit */
	switch(copy_stopBit)
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	3a 87       	std	Y+10, r19	; 0x0a
    223a:	29 87       	std	Y+9, r18	; 0x09
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	31 f0       	breq	.+12     	; 0x2250 <UART_VidInit+0x5c>
    2244:	29 85       	ldd	r18, Y+9	; 0x09
    2246:	3a 85       	ldd	r19, Y+10	; 0x0a
    2248:	21 30       	cpi	r18, 0x01	; 1
    224a:	31 05       	cpc	r19, r1
    224c:	29 f0       	breq	.+10     	; 0x2258 <UART_VidInit+0x64>
    224e:	07 c0       	rjmp	.+14     	; 0x225e <UART_VidInit+0x6a>
	{
	case STOP_1BIT:
		CLEAR_BIT(Local,UCSRC_USBS);
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	87 7f       	andi	r24, 0xF7	; 247
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	03 c0       	rjmp	.+6      	; 0x225e <UART_VidInit+0x6a>
		break;
	case STOP_2BIT:
		SET_BIT(Local,UCSRC_USBS);
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	88 60       	ori	r24, 0x08	; 8
    225c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* select parity bit */
	switch(copy_ParityBit)
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	38 87       	std	Y+8, r19	; 0x08
    2266:	2f 83       	std	Y+7, r18	; 0x07
    2268:	8f 81       	ldd	r24, Y+7	; 0x07
    226a:	98 85       	ldd	r25, Y+8	; 0x08
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	91 05       	cpc	r25, r1
    2270:	e1 f0       	breq	.+56     	; 0x22aa <UART_VidInit+0xb6>
    2272:	2f 81       	ldd	r18, Y+7	; 0x07
    2274:	38 85       	ldd	r19, Y+8	; 0x08
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	2c f4       	brge	.+10     	; 0x2286 <UART_VidInit+0x92>
    227c:	8f 81       	ldd	r24, Y+7	; 0x07
    227e:	98 85       	ldd	r25, Y+8	; 0x08
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	61 f0       	breq	.+24     	; 0x229c <UART_VidInit+0xa8>
    2284:	26 c0       	rjmp	.+76     	; 0x22d2 <UART_VidInit+0xde>
    2286:	2f 81       	ldd	r18, Y+7	; 0x07
    2288:	38 85       	ldd	r19, Y+8	; 0x08
    228a:	22 30       	cpi	r18, 0x02	; 2
    228c:	31 05       	cpc	r19, r1
    228e:	a1 f0       	breq	.+40     	; 0x22b8 <UART_VidInit+0xc4>
    2290:	8f 81       	ldd	r24, Y+7	; 0x07
    2292:	98 85       	ldd	r25, Y+8	; 0x08
    2294:	83 30       	cpi	r24, 0x03	; 3
    2296:	91 05       	cpc	r25, r1
    2298:	b1 f0       	breq	.+44     	; 0x22c6 <UART_VidInit+0xd2>
    229a:	1b c0       	rjmp	.+54     	; 0x22d2 <UART_VidInit+0xde>
	{
	case DISABLED:
		CLEAR_BIT(Local,UCSRC_UPM0);
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	8f 7e       	andi	r24, 0xEF	; 239
    22a0:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(Local,UCSRC_UPM1);
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	8f 7d       	andi	r24, 0xDF	; 223
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <UART_VidInit+0xde>
		break;
	case RESEVED:
		SET_BIT(Local,UCSRC_UPM0);
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	80 61       	ori	r24, 0x10	; 16
    22ae:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(Local,UCSRC_UPM1);
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	8f 7d       	andi	r24, 0xDF	; 223
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	0d c0       	rjmp	.+26     	; 0x22d2 <UART_VidInit+0xde>
		break;
	case EVEN_PARITY:
		CLEAR_BIT(Local,UCSRC_UPM0);
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	8f 7e       	andi	r24, 0xEF	; 239
    22bc:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UPM1);
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	80 62       	ori	r24, 0x20	; 32
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	06 c0       	rjmp	.+12     	; 0x22d2 <UART_VidInit+0xde>
		break;
	case ODD_PARITY:
		SET_BIT(Local,UCSRC_UPM0);
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	80 61       	ori	r24, 0x10	; 16
    22ca:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UPM1);
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	80 62       	ori	r24, 0x20	; 32
    22d0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* select no of data bit */
	switch(copy_dataBit)
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	3e 83       	std	Y+6, r19	; 0x06
    22da:	2d 83       	std	Y+5, r18	; 0x05
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	82 30       	cpi	r24, 0x02	; 2
    22e2:	91 05       	cpc	r25, r1
    22e4:	b1 f1       	breq	.+108    	; 0x2352 <UART_VidInit+0x15e>
    22e6:	2d 81       	ldd	r18, Y+5	; 0x05
    22e8:	3e 81       	ldd	r19, Y+6	; 0x06
    22ea:	23 30       	cpi	r18, 0x03	; 3
    22ec:	31 05       	cpc	r19, r1
    22ee:	54 f4       	brge	.+20     	; 0x2304 <UART_VidInit+0x110>
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	89 f0       	breq	.+34     	; 0x231a <UART_VidInit+0x126>
    22f8:	2d 81       	ldd	r18, Y+5	; 0x05
    22fa:	3e 81       	ldd	r19, Y+6	; 0x06
    22fc:	21 30       	cpi	r18, 0x01	; 1
    22fe:	31 05       	cpc	r19, r1
    2300:	d1 f0       	breq	.+52     	; 0x2336 <UART_VidInit+0x142>
    2302:	50 c0       	rjmp	.+160    	; 0x23a4 <UART_VidInit+0x1b0>
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	83 30       	cpi	r24, 0x03	; 3
    230a:	91 05       	cpc	r25, r1
    230c:	81 f1       	breq	.+96     	; 0x236e <UART_VidInit+0x17a>
    230e:	2d 81       	ldd	r18, Y+5	; 0x05
    2310:	3e 81       	ldd	r19, Y+6	; 0x06
    2312:	27 30       	cpi	r18, 0x07	; 7
    2314:	31 05       	cpc	r19, r1
    2316:	c9 f1       	breq	.+114    	; 0x238a <UART_VidInit+0x196>
    2318:	45 c0       	rjmp	.+138    	; 0x23a4 <UART_VidInit+0x1b0>
	{
	case DATA_5BIT:
		CLEAR_BIT(Local,UCSRC_UCSZ0);
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	8d 7f       	andi	r24, 0xFD	; 253
    231e:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(Local,UCSRC_UCSZ1);
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	8b 7f       	andi	r24, 0xFB	; 251
    2324:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRB,UCSRB_UCSZ2);
    2326:	aa e2       	ldi	r26, 0x2A	; 42
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	ea e2       	ldi	r30, 0x2A	; 42
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	8b 7f       	andi	r24, 0xFB	; 251
    2332:	8c 93       	st	X, r24
    2334:	37 c0       	rjmp	.+110    	; 0x23a4 <UART_VidInit+0x1b0>
		break;
	case DATA_6BIT:
		SET_BIT(Local,UCSRC_UCSZ0);
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	82 60       	ori	r24, 0x02	; 2
    233a:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(Local,UCSRC_UCSZ1);
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	8b 7f       	andi	r24, 0xFB	; 251
    2340:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRB,UCSRB_UCSZ2);
    2342:	aa e2       	ldi	r26, 0x2A	; 42
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	ea e2       	ldi	r30, 0x2A	; 42
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	8b 7f       	andi	r24, 0xFB	; 251
    234e:	8c 93       	st	X, r24
    2350:	29 c0       	rjmp	.+82     	; 0x23a4 <UART_VidInit+0x1b0>
		break;
	case DATA_7BIT:
		CLEAR_BIT(Local,UCSRC_UCSZ0);
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	8d 7f       	andi	r24, 0xFD	; 253
    2356:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UCSZ1);
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	84 60       	ori	r24, 0x04	; 4
    235c:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRB,UCSRB_UCSZ2);
    235e:	aa e2       	ldi	r26, 0x2A	; 42
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	ea e2       	ldi	r30, 0x2A	; 42
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	8b 7f       	andi	r24, 0xFB	; 251
    236a:	8c 93       	st	X, r24
    236c:	1b c0       	rjmp	.+54     	; 0x23a4 <UART_VidInit+0x1b0>
		break;
	case DATA_8BIT:
		SET_BIT(Local,UCSRC_UCSZ0);
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	82 60       	ori	r24, 0x02	; 2
    2372:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UCSZ1);
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	84 60       	ori	r24, 0x04	; 4
    2378:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRB,UCSRB_UCSZ2);
    237a:	aa e2       	ldi	r26, 0x2A	; 42
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	ea e2       	ldi	r30, 0x2A	; 42
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	8b 7f       	andi	r24, 0xFB	; 251
    2386:	8c 93       	st	X, r24
    2388:	0d c0       	rjmp	.+26     	; 0x23a4 <UART_VidInit+0x1b0>
		break;
	case DATA_9BIT:
		SET_BIT(Local,UCSRC_UCSZ0);
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	82 60       	ori	r24, 0x02	; 2
    238e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UCSZ1);
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	84 60       	ori	r24, 0x04	; 4
    2394:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRB,UCSRB_UCSZ2);
    2396:	aa e2       	ldi	r26, 0x2A	; 42
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	ea e2       	ldi	r30, 0x2A	; 42
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	84 60       	ori	r24, 0x04	; 4
    23a2:	8c 93       	st	X, r24
		break;
	}

	/* Synchronos mode */
	CLEAR_BIT(Local,UCSRC_UMSEL);
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	8f 7b       	andi	r24, 0xBF	; 191
    23a8:	89 83       	std	Y+1, r24	; 0x01

	/* 0x86 or 0b10000110 */
	UCSRC = Local;
    23aa:	e0 e4       	ldi	r30, 0x40	; 64
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	80 83       	st	Z, r24


	/* Baud rate 9600bps */
	UBRRL = 51;
    23b2:	e9 e2       	ldi	r30, 0x29	; 41
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	83 e3       	ldi	r24, 0x33	; 51
    23b8:	80 83       	st	Z, r24
}
    23ba:	2a 96       	adiw	r28, 0x0a	; 10
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <main>:
void initialize_pins(void);
void initialize_peripherals(void);
void lighting_control(void);
void Gate_control(void);
int main ()
{
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	ca 59       	subi	r28, 0x9A	; 154
    23da:	d0 40       	sbci	r29, 0x00	; 0
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61

	initialize_pins();
    23e6:	0e 94 39 1a 	call	0x3472	; 0x3472 <initialize_pins>

	initialize_peripherals();
    23ea:	0e 94 b2 1a 	call	0x3564	; 0x3564 <initialize_peripherals>
    23ee:	fe 01       	movw	r30, r28
    23f0:	e9 56       	subi	r30, 0x69	; 105
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	aa e7       	ldi	r26, 0x7A	; 122
    23fa:	b3 e4       	ldi	r27, 0x43	; 67
    23fc:	80 83       	st	Z, r24
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	a2 83       	std	Z+2, r26	; 0x02
    2402:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	8e 01       	movw	r16, r28
    2406:	0d 56       	subi	r16, 0x6D	; 109
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e9 56       	subi	r30, 0x69	; 105
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a e7       	ldi	r20, 0x7A	; 122
    241e:	53 e4       	ldi	r21, 0x43	; 67
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	f8 01       	movw	r30, r16
    242a:	80 83       	st	Z, r24
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	a2 83       	std	Z+2, r26	; 0x02
    2430:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2432:	fe 01       	movw	r30, r28
    2434:	ed 56       	subi	r30, 0x6D	; 109
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	44 f4       	brge	.+16     	; 0x2460 <main+0x94>
		__ticks = 1;
    2450:	fe 01       	movw	r30, r28
    2452:	ef 56       	subi	r30, 0x6F	; 111
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    245e:	64 c0       	rjmp	.+200    	; 0x2528 <main+0x15c>
	else if (__tmp > 65535)
    2460:	fe 01       	movw	r30, r28
    2462:	ed 56       	subi	r30, 0x6D	; 109
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	0c f0       	brlt	.+2      	; 0x2480 <main+0xb4>
    247e:	43 c0       	rjmp	.+134    	; 0x2506 <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	fe 01       	movw	r30, r28
    2482:	e9 56       	subi	r30, 0x69	; 105
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8e 01       	movw	r16, r28
    24a0:	0f 56       	subi	r16, 0x6F	; 111
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	f8 01       	movw	r30, r16
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
    24b6:	1f c0       	rjmp	.+62     	; 0x24f6 <main+0x12a>
    24b8:	fe 01       	movw	r30, r28
    24ba:	e1 57       	subi	r30, 0x71	; 113
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	89 e1       	ldi	r24, 0x19	; 25
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	fe 01       	movw	r30, r28
    24c8:	e1 57       	subi	r30, 0x71	; 113
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <main+0x104>
    24d4:	fe 01       	movw	r30, r28
    24d6:	e1 57       	subi	r30, 0x71	; 113
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	de 01       	movw	r26, r28
    24e0:	af 56       	subi	r26, 0x6F	; 111
    24e2:	bf 4f       	sbci	r27, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	ef 56       	subi	r30, 0x6F	; 111
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	11 96       	adiw	r26, 0x01	; 1
    24f2:	9c 93       	st	X, r25
    24f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	fe 01       	movw	r30, r28
    24f8:	ef 56       	subi	r30, 0x6F	; 111
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	d1 f6       	brne	.-76     	; 0x24b8 <main+0xec>
    2504:	27 c0       	rjmp	.+78     	; 0x2554 <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	8e 01       	movw	r16, r28
    2508:	0f 56       	subi	r16, 0x6F	; 111
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	ed 56       	subi	r30, 0x6D	; 109
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	f8 01       	movw	r30, r16
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
    2528:	de 01       	movw	r26, r28
    252a:	a3 57       	subi	r26, 0x73	; 115
    252c:	bf 4f       	sbci	r27, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	ef 56       	subi	r30, 0x6F	; 111
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	8d 93       	st	X+, r24
    253a:	9c 93       	st	X, r25
    253c:	fe 01       	movw	r30, r28
    253e:	e3 57       	subi	r30, 0x73	; 115
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <main+0x17a>
    254a:	fe 01       	movw	r30, r28
    254c:	e3 57       	subi	r30, 0x73	; 115
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	80 83       	st	Z, r24

	_delay_ms(250);
	LCD_VidPrintString("CAR_ID: ");
    2554:	80 e6       	ldi	r24, 0x60	; 96
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
    255c:	fe 01       	movw	r30, r28
    255e:	e7 57       	subi	r30, 0x77	; 119
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	aa e7       	ldi	r26, 0x7A	; 122
    2568:	b3 e4       	ldi	r27, 0x43	; 67
    256a:	80 83       	st	Z, r24
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	a2 83       	std	Z+2, r26	; 0x02
    2570:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	8e 01       	movw	r16, r28
    2574:	0b 57       	subi	r16, 0x7B	; 123
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e7 57       	subi	r30, 0x77	; 119
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a e7       	ldi	r20, 0x7A	; 122
    258c:	53 e4       	ldi	r21, 0x43	; 67
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	f8 01       	movw	r30, r16
    2598:	80 83       	st	Z, r24
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	a2 83       	std	Z+2, r26	; 0x02
    259e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a0:	fe 01       	movw	r30, r28
    25a2:	eb 57       	subi	r30, 0x7B	; 123
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	44 f4       	brge	.+16     	; 0x25ce <main+0x202>
		__ticks = 1;
    25be:	fe 01       	movw	r30, r28
    25c0:	ed 57       	subi	r30, 0x7D	; 125
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
    25cc:	64 c0       	rjmp	.+200    	; 0x2696 <main+0x2ca>
	else if (__tmp > 65535)
    25ce:	fe 01       	movw	r30, r28
    25d0:	eb 57       	subi	r30, 0x7B	; 123
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	0c f0       	brlt	.+2      	; 0x25ee <main+0x222>
    25ec:	43 c0       	rjmp	.+134    	; 0x2674 <main+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	fe 01       	movw	r30, r28
    25f0:	e7 57       	subi	r30, 0x77	; 119
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	8e 01       	movw	r16, r28
    260e:	0d 57       	subi	r16, 0x7D	; 125
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24
    2624:	1f c0       	rjmp	.+62     	; 0x2664 <main+0x298>
    2626:	fe 01       	movw	r30, r28
    2628:	ef 57       	subi	r30, 0x7F	; 127
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	89 e1       	ldi	r24, 0x19	; 25
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	80 83       	st	Z, r24
    2634:	fe 01       	movw	r30, r28
    2636:	ef 57       	subi	r30, 0x7F	; 127
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <main+0x272>
    2642:	fe 01       	movw	r30, r28
    2644:	ef 57       	subi	r30, 0x7F	; 127
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264c:	de 01       	movw	r26, r28
    264e:	ad 57       	subi	r26, 0x7D	; 125
    2650:	bf 4f       	sbci	r27, 0xFF	; 255
    2652:	fe 01       	movw	r30, r28
    2654:	ed 57       	subi	r30, 0x7D	; 125
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	11 96       	adiw	r26, 0x01	; 1
    2660:	9c 93       	st	X, r25
    2662:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	fe 01       	movw	r30, r28
    2666:	ed 57       	subi	r30, 0x7D	; 125
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	d1 f6       	brne	.-76     	; 0x2626 <main+0x25a>
    2672:	27 c0       	rjmp	.+78     	; 0x26c2 <main+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2674:	8e 01       	movw	r16, r28
    2676:	0d 57       	subi	r16, 0x7D	; 125
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
    267a:	fe 01       	movw	r30, r28
    267c:	eb 57       	subi	r30, 0x7B	; 123
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	f8 01       	movw	r30, r16
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	de 01       	movw	r26, r28
    2698:	a1 58       	subi	r26, 0x81	; 129
    269a:	bf 4f       	sbci	r27, 0xFF	; 255
    269c:	fe 01       	movw	r30, r28
    269e:	ed 57       	subi	r30, 0x7D	; 125
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	8d 93       	st	X+, r24
    26a8:	9c 93       	st	X, r25
    26aa:	fe 01       	movw	r30, r28
    26ac:	e1 58       	subi	r30, 0x81	; 129
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 81       	ld	r24, Z
    26b2:	91 81       	ldd	r25, Z+1	; 0x01
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <main+0x2e8>
    26b8:	fe 01       	movw	r30, r28
    26ba:	e1 58       	subi	r30, 0x81	; 129
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
	_delay_ms(250);
	LCD_VidMoveCursor(1,0);
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
	LCD_VidPrintString("NO_OF_CARS: ");
    26ca:	89 e6       	ldi	r24, 0x69	; 105
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
	while(1)
	{
		/* control the lighting of garage */
		lighting_control();
    26d2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <lighting_control>

		/* control the gate of garage */
		if((counter>=0)&&(counter<=5))
    26d6:	80 91 e9 00 	lds	r24, 0x00E9
    26da:	86 30       	cpi	r24, 0x06	; 6
    26dc:	08 f0       	brcs	.+2      	; 0x26e0 <main+0x314>
    26de:	ba c6       	rjmp	.+3444   	; 0x3454 <main+0x1088>
		{
			if(BTN1==PinLow)
    26e0:	e0 e3       	ldi	r30, 0x30	; 48
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	88 2f       	mov	r24, r24
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	88 70       	andi	r24, 0x08	; 8
    26ec:	90 70       	andi	r25, 0x00	; 0
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <main+0x328>
    26f2:	22 c5       	rjmp	.+2628   	; 0x3138 <main+0xd6c>
			{
				if(counter<6)
    26f4:	80 91 e9 00 	lds	r24, 0x00E9
    26f8:	86 30       	cpi	r24, 0x06	; 6
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <main+0x332>
    26fc:	19 c5       	rjmp	.+2610   	; 0x3130 <main+0xd64>
    26fe:	92 c4       	rjmp	.+2340   	; 0x3024 <main+0xc58>
				{
					while(BTN1==PinLow)
					{
						DIO_VidSetPinValue(Port_D, Pin6 ,PinHigh);
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	66 e0       	ldi	r22, 0x06	; 6
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>

						/* receive data from SPI */
						for(local_counter = 0 ; local_counter <6 ; local_counter++)
    270a:	10 92 e8 00 	sts	0x00E8, r1
    270e:	10 c0       	rjmp	.+32     	; 0x2730 <main+0x364>
						{
							RFID[local_counter]= SPI_TransReceive(DEFAULT);
    2710:	80 91 e8 00 	lds	r24, 0x00E8
    2714:	08 2f       	mov	r16, r24
    2716:	10 e0       	ldi	r17, 0x00	; 0
    2718:	8f ef       	ldi	r24, 0xFF	; 255
    271a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <SPI_TransReceive>
    271e:	f8 01       	movw	r30, r16
    2720:	e4 51       	subi	r30, 0x14	; 20
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 83       	st	Z, r24
					while(BTN1==PinLow)
					{
						DIO_VidSetPinValue(Port_D, Pin6 ,PinHigh);

						/* receive data from SPI */
						for(local_counter = 0 ; local_counter <6 ; local_counter++)
    2726:	80 91 e8 00 	lds	r24, 0x00E8
    272a:	8f 5f       	subi	r24, 0xFF	; 255
    272c:	80 93 e8 00 	sts	0x00E8, r24
    2730:	80 91 e8 00 	lds	r24, 0x00E8
    2734:	86 30       	cpi	r24, 0x06	; 6
    2736:	60 f3       	brcs	.-40     	; 0x2710 <main+0x344>
						{
							RFID[local_counter]= SPI_TransReceive(DEFAULT);
						}

						/* chack on data receiving */
						if(local_counter == 6)
    2738:	80 91 e8 00 	lds	r24, 0x00E8
    273c:	86 30       	cpi	r24, 0x06	; 6
    273e:	09 f0       	breq	.+2      	; 0x2742 <main+0x376>
    2740:	71 c4       	rjmp	.+2274   	; 0x3024 <main+0xc58>
						{
							for(local_counterID = 0 ;RFID_NO1[local_counterID] != '\0'; local_counterID++)
    2742:	10 92 ea 00 	sts	0x00EA, r1
    2746:	1c c0       	rjmp	.+56     	; 0x2780 <main+0x3b4>
							{

								if(RFID[local_counterID] == RFID_NO1[local_counterID])
    2748:	80 91 ea 00 	lds	r24, 0x00EA
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	fc 01       	movw	r30, r24
    2752:	e4 51       	subi	r30, 0x14	; 20
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	20 81       	ld	r18, Z
    2758:	80 91 ea 00 	lds	r24, 0x00EA
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	fc 01       	movw	r30, r24
    2762:	e3 54       	subi	r30, 0x43	; 67
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	28 17       	cp	r18, r24
    276a:	29 f4       	brne	.+10     	; 0x2776 <main+0x3aa>
								{
									local_ID ++;
    276c:	80 91 eb 00 	lds	r24, 0x00EB
    2770:	8f 5f       	subi	r24, 0xFF	; 255
    2772:	80 93 eb 00 	sts	0x00EB, r24
						}

						/* chack on data receiving */
						if(local_counter == 6)
						{
							for(local_counterID = 0 ;RFID_NO1[local_counterID] != '\0'; local_counterID++)
    2776:	80 91 ea 00 	lds	r24, 0x00EA
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	80 93 ea 00 	sts	0x00EA, r24
    2780:	80 91 ea 00 	lds	r24, 0x00EA
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	fc 01       	movw	r30, r24
    278a:	e3 54       	subi	r30, 0x43	; 67
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	88 23       	and	r24, r24
    2792:	d1 f6       	brne	.-76     	; 0x2748 <main+0x37c>
								{
									local_ID ++;
								}
							}

							if(local_ID == 6)
    2794:	80 91 eb 00 	lds	r24, 0x00EB
    2798:	86 30       	cpi	r24, 0x06	; 6
    279a:	19 f4       	brne	.+6      	; 0x27a2 <main+0x3d6>
							{
								Gate_control();
    279c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <Gate_control>
    27a0:	41 c4       	rjmp	.+2178   	; 0x3024 <main+0xc58>
							}
							else
							{
								local_ID = 0;
    27a2:	10 92 eb 00 	sts	0x00EB, r1
								for(local_counterID = 0 ;RFID_NO2[local_counterID] != '\0'; local_counterID++)
    27a6:	10 92 ea 00 	sts	0x00EA, r1
    27aa:	1c c0       	rjmp	.+56     	; 0x27e4 <main+0x418>
								{

									if(RFID[local_counterID] == RFID_NO2[local_counterID])
    27ac:	80 91 ea 00 	lds	r24, 0x00EA
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	fc 01       	movw	r30, r24
    27b6:	e4 51       	subi	r30, 0x14	; 20
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	20 81       	ld	r18, Z
    27bc:	80 91 ea 00 	lds	r24, 0x00EA
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	fc 01       	movw	r30, r24
    27c6:	ec 53       	subi	r30, 0x3C	; 60
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 81       	ld	r24, Z
    27cc:	28 17       	cp	r18, r24
    27ce:	29 f4       	brne	.+10     	; 0x27da <main+0x40e>
									{
										local_ID ++;
    27d0:	80 91 eb 00 	lds	r24, 0x00EB
    27d4:	8f 5f       	subi	r24, 0xFF	; 255
    27d6:	80 93 eb 00 	sts	0x00EB, r24
								Gate_control();
							}
							else
							{
								local_ID = 0;
								for(local_counterID = 0 ;RFID_NO2[local_counterID] != '\0'; local_counterID++)
    27da:	80 91 ea 00 	lds	r24, 0x00EA
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	80 93 ea 00 	sts	0x00EA, r24
    27e4:	80 91 ea 00 	lds	r24, 0x00EA
    27e8:	88 2f       	mov	r24, r24
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	fc 01       	movw	r30, r24
    27ee:	ec 53       	subi	r30, 0x3C	; 60
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	88 23       	and	r24, r24
    27f6:	d1 f6       	brne	.-76     	; 0x27ac <main+0x3e0>
									if(RFID[local_counterID] == RFID_NO2[local_counterID])
									{
										local_ID ++;
									}
								}
								if(local_ID == 6)
    27f8:	80 91 eb 00 	lds	r24, 0x00EB
    27fc:	86 30       	cpi	r24, 0x06	; 6
    27fe:	19 f4       	brne	.+6      	; 0x2806 <main+0x43a>
								{
									Gate_control();
    2800:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <Gate_control>
    2804:	0f c4       	rjmp	.+2078   	; 0x3024 <main+0xc58>

								}
								else
								{
									local_ID = 0;
    2806:	10 92 eb 00 	sts	0x00EB, r1
									for(local_counterID = 0 ;RFID_NO3[local_counterID] != '\0'; local_counterID++)
    280a:	10 92 ea 00 	sts	0x00EA, r1
    280e:	1c c0       	rjmp	.+56     	; 0x2848 <main+0x47c>
									{

										if(RFID[local_counterID] == RFID_NO3[local_counterID])
    2810:	80 91 ea 00 	lds	r24, 0x00EA
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	fc 01       	movw	r30, r24
    281a:	e4 51       	subi	r30, 0x14	; 20
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	20 81       	ld	r18, Z
    2820:	80 91 ea 00 	lds	r24, 0x00EA
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	fc 01       	movw	r30, r24
    282a:	e5 53       	subi	r30, 0x35	; 53
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 81       	ld	r24, Z
    2830:	28 17       	cp	r18, r24
    2832:	29 f4       	brne	.+10     	; 0x283e <main+0x472>
										{
											local_ID ++;
    2834:	80 91 eb 00 	lds	r24, 0x00EB
    2838:	8f 5f       	subi	r24, 0xFF	; 255
    283a:	80 93 eb 00 	sts	0x00EB, r24

								}
								else
								{
									local_ID = 0;
									for(local_counterID = 0 ;RFID_NO3[local_counterID] != '\0'; local_counterID++)
    283e:	80 91 ea 00 	lds	r24, 0x00EA
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	80 93 ea 00 	sts	0x00EA, r24
    2848:	80 91 ea 00 	lds	r24, 0x00EA
    284c:	88 2f       	mov	r24, r24
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	fc 01       	movw	r30, r24
    2852:	e5 53       	subi	r30, 0x35	; 53
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	88 23       	and	r24, r24
    285a:	d1 f6       	brne	.-76     	; 0x2810 <main+0x444>
										if(RFID[local_counterID] == RFID_NO3[local_counterID])
										{
											local_ID ++;
										}
									}
									if(local_ID == 6)
    285c:	80 91 eb 00 	lds	r24, 0x00EB
    2860:	86 30       	cpi	r24, 0x06	; 6
    2862:	19 f4       	brne	.+6      	; 0x286a <main+0x49e>
									{
										Gate_control();
    2864:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <Gate_control>
    2868:	dd c3       	rjmp	.+1978   	; 0x3024 <main+0xc58>
									}
									else
									{
										local_ID = 0;
    286a:	10 92 eb 00 	sts	0x00EB, r1
										for(local_counterID = 0 ;RFID_NO4[local_counterID] != '\0'; local_counterID++)
    286e:	10 92 ea 00 	sts	0x00EA, r1
    2872:	1c c0       	rjmp	.+56     	; 0x28ac <main+0x4e0>
										{

											if(RFID[local_counterID] == RFID_NO4[local_counterID])
    2874:	80 91 ea 00 	lds	r24, 0x00EA
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	fc 01       	movw	r30, r24
    287e:	e4 51       	subi	r30, 0x14	; 20
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	20 81       	ld	r18, Z
    2884:	80 91 ea 00 	lds	r24, 0x00EA
    2888:	88 2f       	mov	r24, r24
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	fc 01       	movw	r30, r24
    288e:	ee 52       	subi	r30, 0x2E	; 46
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	28 17       	cp	r18, r24
    2896:	29 f4       	brne	.+10     	; 0x28a2 <main+0x4d6>
											{
												local_ID ++;
    2898:	80 91 eb 00 	lds	r24, 0x00EB
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	80 93 eb 00 	sts	0x00EB, r24
										Gate_control();
									}
									else
									{
										local_ID = 0;
										for(local_counterID = 0 ;RFID_NO4[local_counterID] != '\0'; local_counterID++)
    28a2:	80 91 ea 00 	lds	r24, 0x00EA
    28a6:	8f 5f       	subi	r24, 0xFF	; 255
    28a8:	80 93 ea 00 	sts	0x00EA, r24
    28ac:	80 91 ea 00 	lds	r24, 0x00EA
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	fc 01       	movw	r30, r24
    28b6:	ee 52       	subi	r30, 0x2E	; 46
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	88 23       	and	r24, r24
    28be:	d1 f6       	brne	.-76     	; 0x2874 <main+0x4a8>
											if(RFID[local_counterID] == RFID_NO4[local_counterID])
											{
												local_ID ++;
											}
										}
										if(local_ID == 6)
    28c0:	80 91 eb 00 	lds	r24, 0x00EB
    28c4:	86 30       	cpi	r24, 0x06	; 6
    28c6:	19 f4       	brne	.+6      	; 0x28ce <main+0x502>
										{
											Gate_control();
    28c8:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <Gate_control>
    28cc:	ab c3       	rjmp	.+1878   	; 0x3024 <main+0xc58>

										}
										else
										{
											local_ID = 0;
    28ce:	10 92 eb 00 	sts	0x00EB, r1
											for(local_counterID = 0 ;RFID_NO5[local_counterID] != '\0'; local_counterID++)
    28d2:	10 92 ea 00 	sts	0x00EA, r1
    28d6:	1c c0       	rjmp	.+56     	; 0x2910 <main+0x544>
											{

												if(RFID[local_counterID] == RFID_NO5[local_counterID])
    28d8:	80 91 ea 00 	lds	r24, 0x00EA
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	fc 01       	movw	r30, r24
    28e2:	e4 51       	subi	r30, 0x14	; 20
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	20 81       	ld	r18, Z
    28e8:	80 91 ea 00 	lds	r24, 0x00EA
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	fc 01       	movw	r30, r24
    28f2:	e7 52       	subi	r30, 0x27	; 39
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 81       	ld	r24, Z
    28f8:	28 17       	cp	r18, r24
    28fa:	29 f4       	brne	.+10     	; 0x2906 <main+0x53a>
												{
													local_ID ++;
    28fc:	80 91 eb 00 	lds	r24, 0x00EB
    2900:	8f 5f       	subi	r24, 0xFF	; 255
    2902:	80 93 eb 00 	sts	0x00EB, r24

										}
										else
										{
											local_ID = 0;
											for(local_counterID = 0 ;RFID_NO5[local_counterID] != '\0'; local_counterID++)
    2906:	80 91 ea 00 	lds	r24, 0x00EA
    290a:	8f 5f       	subi	r24, 0xFF	; 255
    290c:	80 93 ea 00 	sts	0x00EA, r24
    2910:	80 91 ea 00 	lds	r24, 0x00EA
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	fc 01       	movw	r30, r24
    291a:	e7 52       	subi	r30, 0x27	; 39
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	88 23       	and	r24, r24
    2922:	d1 f6       	brne	.-76     	; 0x28d8 <main+0x50c>
												if(RFID[local_counterID] == RFID_NO5[local_counterID])
												{
													local_ID ++;
												}
											}
											if(local_ID == 6)
    2924:	80 91 eb 00 	lds	r24, 0x00EB
    2928:	86 30       	cpi	r24, 0x06	; 6
    292a:	19 f4       	brne	.+6      	; 0x2932 <main+0x566>
											{
												Gate_control();
    292c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <Gate_control>
    2930:	79 c3       	rjmp	.+1778   	; 0x3024 <main+0xc58>
											}
											else
											{
												UART_VidSendDataString("Access Not Allowed");
    2932:	86 e7       	ldi	r24, 0x76	; 118
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	0e 94 9b 10 	call	0x2136	; 0x2136 <UART_VidSendDataString>
												UART_VidSendData('\r');
    293a:	8d e0       	ldi	r24, 0x0D	; 13
    293c:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_VidSendData>
    2940:	fe 01       	movw	r30, r28
    2942:	e5 58       	subi	r30, 0x85	; 133
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	aa e7       	ldi	r26, 0x7A	; 122
    294c:	b3 e4       	ldi	r27, 0x43	; 67
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2956:	8e 01       	movw	r16, r28
    2958:	09 58       	subi	r16, 0x89	; 137
    295a:	1f 4f       	sbci	r17, 0xFF	; 255
    295c:	fe 01       	movw	r30, r28
    295e:	e5 58       	subi	r30, 0x85	; 133
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a e7       	ldi	r20, 0x7A	; 122
    2970:	53 e4       	ldi	r21, 0x43	; 67
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	f8 01       	movw	r30, r16
    297c:	80 83       	st	Z, r24
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	a2 83       	std	Z+2, r26	; 0x02
    2982:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2984:	fe 01       	movw	r30, r28
    2986:	e9 58       	subi	r30, 0x89	; 137
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	44 f4       	brge	.+16     	; 0x29b2 <main+0x5e6>
		__ticks = 1;
    29a2:	fe 01       	movw	r30, r28
    29a4:	eb 58       	subi	r30, 0x8B	; 139
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	64 c0       	rjmp	.+200    	; 0x2a7a <main+0x6ae>
	else if (__tmp > 65535)
    29b2:	fe 01       	movw	r30, r28
    29b4:	e9 58       	subi	r30, 0x89	; 137
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	4f e7       	ldi	r20, 0x7F	; 127
    29c6:	57 e4       	ldi	r21, 0x47	; 71
    29c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	0c f0       	brlt	.+2      	; 0x29d2 <main+0x606>
    29d0:	43 c0       	rjmp	.+134    	; 0x2a58 <main+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d2:	fe 01       	movw	r30, r28
    29d4:	e5 58       	subi	r30, 0x85	; 133
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	60 81       	ld	r22, Z
    29da:	71 81       	ldd	r23, Z+1	; 0x01
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	8e 01       	movw	r16, r28
    29f2:	0b 58       	subi	r16, 0x8B	; 139
    29f4:	1f 4f       	sbci	r17, 0xFF	; 255
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	f8 01       	movw	r30, r16
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	1f c0       	rjmp	.+62     	; 0x2a48 <main+0x67c>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ed 58       	subi	r30, 0x8D	; 141
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	89 e1       	ldi	r24, 0x19	; 25
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	fe 01       	movw	r30, r28
    2a1a:	ed 58       	subi	r30, 0x8D	; 141
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <main+0x656>
    2a26:	fe 01       	movw	r30, r28
    2a28:	ed 58       	subi	r30, 0x8D	; 141
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	de 01       	movw	r26, r28
    2a32:	ab 58       	subi	r26, 0x8B	; 139
    2a34:	bf 4f       	sbci	r27, 0xFF	; 255
    2a36:	fe 01       	movw	r30, r28
    2a38:	eb 58       	subi	r30, 0x8B	; 139
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	11 96       	adiw	r26, 0x01	; 1
    2a44:	9c 93       	st	X, r25
    2a46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	fe 01       	movw	r30, r28
    2a4a:	eb 58       	subi	r30, 0x8B	; 139
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	d1 f6       	brne	.-76     	; 0x2a0a <main+0x63e>
    2a56:	27 c0       	rjmp	.+78     	; 0x2aa6 <main+0x6da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	8e 01       	movw	r16, r28
    2a5a:	0b 58       	subi	r16, 0x8B	; 139
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e9 58       	subi	r30, 0x89	; 137
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	de 01       	movw	r26, r28
    2a7c:	af 58       	subi	r26, 0x8F	; 143
    2a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	eb 58       	subi	r30, 0x8B	; 139
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	8d 93       	st	X+, r24
    2a8c:	9c 93       	st	X, r25
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ef 58       	subi	r30, 0x8F	; 143
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <main+0x6cc>
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ef 58       	subi	r30, 0x8F	; 143
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
												_delay_ms(250);
												LCD_VidMoveCursor(0,7);
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	67 e0       	ldi	r22, 0x07	; 7
    2aaa:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
												LCD_VidPrintString("Not Exist");
    2aae:	89 e8       	ldi	r24, 0x89	; 137
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e3 59       	subi	r30, 0x93	; 147
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e4       	ldi	r25, 0x40	; 64
    2ac0:	ac e9       	ldi	r26, 0x9C	; 156
    2ac2:	b5 e4       	ldi	r27, 0x45	; 69
    2ac4:	80 83       	st	Z, r24
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	a2 83       	std	Z+2, r26	; 0x02
    2aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	8e 01       	movw	r16, r28
    2ace:	07 59       	subi	r16, 0x97	; 151
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e3 59       	subi	r30, 0x93	; 147
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a e7       	ldi	r20, 0x7A	; 122
    2ae6:	53 e4       	ldi	r21, 0x43	; 67
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	f8 01       	movw	r30, r16
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2afa:	fe 01       	movw	r30, r28
    2afc:	e7 59       	subi	r30, 0x97	; 151
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	44 f4       	brge	.+16     	; 0x2b28 <main+0x75c>
		__ticks = 1;
    2b18:	fe 01       	movw	r30, r28
    2b1a:	e9 59       	subi	r30, 0x99	; 153
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	80 83       	st	Z, r24
    2b26:	64 c0       	rjmp	.+200    	; 0x2bf0 <main+0x824>
	else if (__tmp > 65535)
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e7 59       	subi	r30, 0x97	; 151
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	3f ef       	ldi	r19, 0xFF	; 255
    2b3a:	4f e7       	ldi	r20, 0x7F	; 127
    2b3c:	57 e4       	ldi	r21, 0x47	; 71
    2b3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b42:	18 16       	cp	r1, r24
    2b44:	0c f0       	brlt	.+2      	; 0x2b48 <main+0x77c>
    2b46:	43 c0       	rjmp	.+134    	; 0x2bce <main+0x802>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e3 59       	subi	r30, 0x93	; 147
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e2       	ldi	r20, 0x20	; 32
    2b5c:	51 e4       	ldi	r21, 0x41	; 65
    2b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	8e 01       	movw	r16, r28
    2b68:	09 59       	subi	r16, 0x99	; 153
    2b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	f8 01       	movw	r30, r16
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	1f c0       	rjmp	.+62     	; 0x2bbe <main+0x7f2>
    2b80:	fe 01       	movw	r30, r28
    2b82:	eb 59       	subi	r30, 0x9B	; 155
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	89 e1       	ldi	r24, 0x19	; 25
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	80 83       	st	Z, r24
    2b8e:	fe 01       	movw	r30, r28
    2b90:	eb 59       	subi	r30, 0x9B	; 155
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <main+0x7cc>
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	eb 59       	subi	r30, 0x9B	; 155
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba6:	de 01       	movw	r26, r28
    2ba8:	a9 59       	subi	r26, 0x99	; 153
    2baa:	bf 4f       	sbci	r27, 0xFF	; 255
    2bac:	fe 01       	movw	r30, r28
    2bae:	e9 59       	subi	r30, 0x99	; 153
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	11 96       	adiw	r26, 0x01	; 1
    2bba:	9c 93       	st	X, r25
    2bbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e9 59       	subi	r30, 0x99	; 153
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	d1 f6       	brne	.-76     	; 0x2b80 <main+0x7b4>
    2bcc:	27 c0       	rjmp	.+78     	; 0x2c1c <main+0x850>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	8e 01       	movw	r16, r28
    2bd0:	09 59       	subi	r16, 0x99	; 153
    2bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e7 59       	subi	r30, 0x97	; 151
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	60 81       	ld	r22, Z
    2bdc:	71 81       	ldd	r23, Z+1	; 0x01
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	93 81       	ldd	r25, Z+3	; 0x03
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	f8 01       	movw	r30, r16
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24
    2bf0:	de 01       	movw	r26, r28
    2bf2:	ad 59       	subi	r26, 0x9D	; 157
    2bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e9 59       	subi	r30, 0x99	; 153
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	8d 93       	st	X+, r24
    2c02:	9c 93       	st	X, r25
    2c04:	fe 01       	movw	r30, r28
    2c06:	ed 59       	subi	r30, 0x9D	; 157
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <main+0x842>
    2c12:	fe 01       	movw	r30, r28
    2c14:	ed 59       	subi	r30, 0x9D	; 157
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
												_delay_ms(5000);
												LCD_VidSendCommand(0x01);
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_VidSendCommand>
    2c22:	fe 01       	movw	r30, r28
    2c24:	e1 5a       	subi	r30, 0xA1	; 161
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	aa e7       	ldi	r26, 0x7A	; 122
    2c2e:	b3 e4       	ldi	r27, 0x43	; 67
    2c30:	80 83       	st	Z, r24
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	a2 83       	std	Z+2, r26	; 0x02
    2c36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	8e 01       	movw	r16, r28
    2c3a:	05 5a       	subi	r16, 0xA5	; 165
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e1 5a       	subi	r30, 0xA1	; 161
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a e7       	ldi	r20, 0x7A	; 122
    2c52:	53 e4       	ldi	r21, 0x43	; 67
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c66:	fe 01       	movw	r30, r28
    2c68:	e5 5a       	subi	r30, 0xA5	; 165
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	44 f4       	brge	.+16     	; 0x2c94 <main+0x8c8>
		__ticks = 1;
    2c84:	fe 01       	movw	r30, r28
    2c86:	e7 5a       	subi	r30, 0xA7	; 167
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	80 83       	st	Z, r24
    2c92:	64 c0       	rjmp	.+200    	; 0x2d5c <main+0x990>
	else if (__tmp > 65535)
    2c94:	fe 01       	movw	r30, r28
    2c96:	e5 5a       	subi	r30, 0xA5	; 165
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	0c f0       	brlt	.+2      	; 0x2cb4 <main+0x8e8>
    2cb2:	43 c0       	rjmp	.+134    	; 0x2d3a <main+0x96e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e1 5a       	subi	r30, 0xA1	; 161
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e2       	ldi	r20, 0x20	; 32
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8e 01       	movw	r16, r28
    2cd4:	07 5a       	subi	r16, 0xA7	; 167
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
    2cea:	1f c0       	rjmp	.+62     	; 0x2d2a <main+0x95e>
    2cec:	fe 01       	movw	r30, r28
    2cee:	e9 5a       	subi	r30, 0xA9	; 169
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	89 e1       	ldi	r24, 0x19	; 25
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e9 5a       	subi	r30, 0xA9	; 169
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <main+0x938>
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e9 5a       	subi	r30, 0xA9	; 169
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	de 01       	movw	r26, r28
    2d14:	a7 5a       	subi	r26, 0xA7	; 167
    2d16:	bf 4f       	sbci	r27, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e7 5a       	subi	r30, 0xA7	; 167
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	11 96       	adiw	r26, 0x01	; 1
    2d26:	9c 93       	st	X, r25
    2d28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e7 5a       	subi	r30, 0xA7	; 167
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	d1 f6       	brne	.-76     	; 0x2cec <main+0x920>
    2d38:	27 c0       	rjmp	.+78     	; 0x2d88 <main+0x9bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3a:	8e 01       	movw	r16, r28
    2d3c:	07 5a       	subi	r16, 0xA7	; 167
    2d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d40:	fe 01       	movw	r30, r28
    2d42:	e5 5a       	subi	r30, 0xA5	; 165
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	f8 01       	movw	r30, r16
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
    2d5c:	de 01       	movw	r26, r28
    2d5e:	ab 5a       	subi	r26, 0xAB	; 171
    2d60:	bf 4f       	sbci	r27, 0xFF	; 255
    2d62:	fe 01       	movw	r30, r28
    2d64:	e7 5a       	subi	r30, 0xA7	; 167
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	8d 93       	st	X+, r24
    2d6e:	9c 93       	st	X, r25
    2d70:	fe 01       	movw	r30, r28
    2d72:	eb 5a       	subi	r30, 0xAB	; 171
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <main+0x9ae>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	eb 5a       	subi	r30, 0xAB	; 171
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
												_delay_ms(250);
												LCD_VidPrintString("CAR_ID: ");
    2d88:	80 e6       	ldi	r24, 0x60	; 96
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
    2d90:	fe 01       	movw	r30, r28
    2d92:	ef 5a       	subi	r30, 0xAF	; 175
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	aa e7       	ldi	r26, 0x7A	; 122
    2d9c:	b3 e4       	ldi	r27, 0x43	; 67
    2d9e:	80 83       	st	Z, r24
    2da0:	91 83       	std	Z+1, r25	; 0x01
    2da2:	a2 83       	std	Z+2, r26	; 0x02
    2da4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	8e 01       	movw	r16, r28
    2da8:	03 5b       	subi	r16, 0xB3	; 179
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	ef 5a       	subi	r30, 0xAF	; 175
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	4a e7       	ldi	r20, 0x7A	; 122
    2dc0:	53 e4       	ldi	r21, 0x43	; 67
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	f8 01       	movw	r30, r16
    2dcc:	80 83       	st	Z, r24
    2dce:	91 83       	std	Z+1, r25	; 0x01
    2dd0:	a2 83       	std	Z+2, r26	; 0x02
    2dd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e3 5b       	subi	r30, 0xB3	; 179
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	60 81       	ld	r22, Z
    2ddc:	71 81       	ldd	r23, Z+1	; 0x01
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 e8       	ldi	r20, 0x80	; 128
    2de8:	5f e3       	ldi	r21, 0x3F	; 63
    2dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dee:	88 23       	and	r24, r24
    2df0:	44 f4       	brge	.+16     	; 0x2e02 <main+0xa36>
		__ticks = 1;
    2df2:	fe 01       	movw	r30, r28
    2df4:	e5 5b       	subi	r30, 0xB5	; 181
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	91 83       	std	Z+1, r25	; 0x01
    2dfe:	80 83       	st	Z, r24
    2e00:	64 c0       	rjmp	.+200    	; 0x2eca <main+0xafe>
	else if (__tmp > 65535)
    2e02:	fe 01       	movw	r30, r28
    2e04:	e3 5b       	subi	r30, 0xB3	; 179
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	60 81       	ld	r22, Z
    2e0a:	71 81       	ldd	r23, Z+1	; 0x01
    2e0c:	82 81       	ldd	r24, Z+2	; 0x02
    2e0e:	93 81       	ldd	r25, Z+3	; 0x03
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	3f ef       	ldi	r19, 0xFF	; 255
    2e14:	4f e7       	ldi	r20, 0x7F	; 127
    2e16:	57 e4       	ldi	r21, 0x47	; 71
    2e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e1c:	18 16       	cp	r1, r24
    2e1e:	0c f0       	brlt	.+2      	; 0x2e22 <main+0xa56>
    2e20:	43 c0       	rjmp	.+134    	; 0x2ea8 <main+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	fe 01       	movw	r30, r28
    2e24:	ef 5a       	subi	r30, 0xAF	; 175
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	60 81       	ld	r22, Z
    2e2a:	71 81       	ldd	r23, Z+1	; 0x01
    2e2c:	82 81       	ldd	r24, Z+2	; 0x02
    2e2e:	93 81       	ldd	r25, Z+3	; 0x03
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e2       	ldi	r20, 0x20	; 32
    2e36:	51 e4       	ldi	r21, 0x41	; 65
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	8e 01       	movw	r16, r28
    2e42:	05 5b       	subi	r16, 0xB5	; 181
    2e44:	1f 4f       	sbci	r17, 0xFF	; 255
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	f8 01       	movw	r30, r16
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
    2e58:	1f c0       	rjmp	.+62     	; 0x2e98 <main+0xacc>
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e7 5b       	subi	r30, 0xB7	; 183
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	89 e1       	ldi	r24, 0x19	; 25
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	91 83       	std	Z+1, r25	; 0x01
    2e66:	80 83       	st	Z, r24
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e7 5b       	subi	r30, 0xB7	; 183
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <main+0xaa6>
    2e76:	fe 01       	movw	r30, r28
    2e78:	e7 5b       	subi	r30, 0xB7	; 183
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	de 01       	movw	r26, r28
    2e82:	a5 5b       	subi	r26, 0xB5	; 181
    2e84:	bf 4f       	sbci	r27, 0xFF	; 255
    2e86:	fe 01       	movw	r30, r28
    2e88:	e5 5b       	subi	r30, 0xB5	; 181
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	11 96       	adiw	r26, 0x01	; 1
    2e94:	9c 93       	st	X, r25
    2e96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e5 5b       	subi	r30, 0xB5	; 181
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	80 81       	ld	r24, Z
    2ea0:	91 81       	ldd	r25, Z+1	; 0x01
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	d1 f6       	brne	.-76     	; 0x2e5a <main+0xa8e>
    2ea6:	27 c0       	rjmp	.+78     	; 0x2ef6 <main+0xb2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea8:	8e 01       	movw	r16, r28
    2eaa:	05 5b       	subi	r16, 0xB5	; 181
    2eac:	1f 4f       	sbci	r17, 0xFF	; 255
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e3 5b       	subi	r30, 0xB3	; 179
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	60 81       	ld	r22, Z
    2eb6:	71 81       	ldd	r23, Z+1	; 0x01
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	f8 01       	movw	r30, r16
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
    2eca:	de 01       	movw	r26, r28
    2ecc:	a9 5b       	subi	r26, 0xB9	; 185
    2ece:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e5 5b       	subi	r30, 0xB5	; 181
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	8d 93       	st	X+, r24
    2edc:	9c 93       	st	X, r25
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e9 5b       	subi	r30, 0xB9	; 185
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <main+0xb1c>
    2eec:	fe 01       	movw	r30, r28
    2eee:	e9 5b       	subi	r30, 0xB9	; 185
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	80 83       	st	Z, r24
												_delay_ms(250);
												LCD_VidMoveCursor(1,0);
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	60 e0       	ldi	r22, 0x00	; 0
    2efa:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
												LCD_VidPrintString("NO_OF_CARS: ");
    2efe:	89 e6       	ldi	r24, 0x69	; 105
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
												DIO_VidSetPinValue(Port_B,Pin0,PinHigh);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    2f10:	fe 01       	movw	r30, r28
    2f12:	ed 5b       	subi	r30, 0xBD	; 189
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	90 e4       	ldi	r25, 0x40	; 64
    2f1a:	ac e9       	ldi	r26, 0x9C	; 156
    2f1c:	b5 e4       	ldi	r27, 0x45	; 69
    2f1e:	80 83       	st	Z, r24
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	a2 83       	std	Z+2, r26	; 0x02
    2f24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f26:	8e 01       	movw	r16, r28
    2f28:	01 5c       	subi	r16, 0xC1	; 193
    2f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ed 5b       	subi	r30, 0xBD	; 189
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a e7       	ldi	r20, 0x7A	; 122
    2f40:	53 e4       	ldi	r21, 0x43	; 67
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	80 83       	st	Z, r24
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	a2 83       	std	Z+2, r26	; 0x02
    2f52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f54:	fe 01       	movw	r30, r28
    2f56:	ff 96       	adiw	r30, 0x3f	; 63
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 e8       	ldi	r20, 0x80	; 128
    2f66:	5f e3       	ldi	r21, 0x3F	; 63
    2f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6c:	88 23       	and	r24, r24
    2f6e:	2c f4       	brge	.+10     	; 0x2f7a <main+0xbae>
		__ticks = 1;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9e af       	std	Y+62, r25	; 0x3e
    2f76:	8d af       	std	Y+61, r24	; 0x3d
    2f78:	46 c0       	rjmp	.+140    	; 0x3006 <main+0xc3a>
	else if (__tmp > 65535)
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	ff 96       	adiw	r30, 0x3f	; 63
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	3f ef       	ldi	r19, 0xFF	; 255
    2f8a:	4f e7       	ldi	r20, 0x7F	; 127
    2f8c:	57 e4       	ldi	r21, 0x47	; 71
    2f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f92:	18 16       	cp	r1, r24
    2f94:	64 f5       	brge	.+88     	; 0x2fee <main+0xc22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	fe 01       	movw	r30, r28
    2f98:	ed 5b       	subi	r30, 0xBD	; 189
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	60 81       	ld	r22, Z
    2f9e:	71 81       	ldd	r23, Z+1	; 0x01
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e2       	ldi	r20, 0x20	; 32
    2faa:	51 e4       	ldi	r21, 0x41	; 65
    2fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	9e af       	std	Y+62, r25	; 0x3e
    2fc2:	8d af       	std	Y+61, r24	; 0x3d
    2fc4:	0f c0       	rjmp	.+30     	; 0x2fe4 <main+0xc18>
    2fc6:	89 e1       	ldi	r24, 0x19	; 25
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	9c af       	std	Y+60, r25	; 0x3c
    2fcc:	8b af       	std	Y+59, r24	; 0x3b
    2fce:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fd0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <main+0xc06>
    2fd6:	9c af       	std	Y+60, r25	; 0x3c
    2fd8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9e af       	std	Y+62, r25	; 0x3e
    2fe2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fe6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	69 f7       	brne	.-38     	; 0x2fc6 <main+0xbfa>
    2fec:	16 c0       	rjmp	.+44     	; 0x301a <main+0xc4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	fe 01       	movw	r30, r28
    2ff0:	ff 96       	adiw	r30, 0x3f	; 63
    2ff2:	60 81       	ld	r22, Z
    2ff4:	71 81       	ldd	r23, Z+1	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	9e af       	std	Y+62, r25	; 0x3e
    3004:	8d af       	std	Y+61, r24	; 0x3d
    3006:	8d ad       	ldd	r24, Y+61	; 0x3d
    3008:	9e ad       	ldd	r25, Y+62	; 0x3e
    300a:	9a af       	std	Y+58, r25	; 0x3a
    300c:	89 af       	std	Y+57, r24	; 0x39
    300e:	89 ad       	ldd	r24, Y+57	; 0x39
    3010:	9a ad       	ldd	r25, Y+58	; 0x3a
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <main+0xc46>
    3016:	9a af       	std	Y+58, r25	; 0x3a
    3018:	89 af       	std	Y+57, r24	; 0x39
												_delay_ms(5000);
												DIO_VidSetPinValue(Port_B,Pin0,PinLow);
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	60 e0       	ldi	r22, 0x00	; 0
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		{
			if(BTN1==PinLow)
			{
				if(counter<6)
				{
					while(BTN1==PinLow)
    3024:	e0 e3       	ldi	r30, 0x30	; 48
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	88 2f       	mov	r24, r24
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	88 70       	andi	r24, 0x08	; 8
    3030:	90 70       	andi	r25, 0x00	; 0
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	09 f4       	brne	.+2      	; 0x3038 <main+0xc6c>
    3036:	64 cb       	rjmp	.-2360   	; 0x2700 <main+0x334>
									}
								}
							}
						}
					}
					DIO_VidSetPinValue(Port_D, Pin6 ,PinLow);
    3038:	83 e0       	ldi	r24, 0x03	; 3
    303a:	66 e0       	ldi	r22, 0x06	; 6
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	aa e7       	ldi	r26, 0x7A	; 122
    3048:	b4 e4       	ldi	r27, 0x44	; 68
    304a:	8d ab       	std	Y+53, r24	; 0x35
    304c:	9e ab       	std	Y+54, r25	; 0x36
    304e:	af ab       	std	Y+55, r26	; 0x37
    3050:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3052:	6d a9       	ldd	r22, Y+53	; 0x35
    3054:	7e a9       	ldd	r23, Y+54	; 0x36
    3056:	8f a9       	ldd	r24, Y+55	; 0x37
    3058:	98 ad       	ldd	r25, Y+56	; 0x38
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	4a e7       	ldi	r20, 0x7A	; 122
    3060:	53 e4       	ldi	r21, 0x43	; 67
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	89 ab       	std	Y+49, r24	; 0x31
    306c:	9a ab       	std	Y+50, r25	; 0x32
    306e:	ab ab       	std	Y+51, r26	; 0x33
    3070:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3072:	69 a9       	ldd	r22, Y+49	; 0x31
    3074:	7a a9       	ldd	r23, Y+50	; 0x32
    3076:	8b a9       	ldd	r24, Y+51	; 0x33
    3078:	9c a9       	ldd	r25, Y+52	; 0x34
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	2c f4       	brge	.+10     	; 0x3094 <main+0xcc8>
		__ticks = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	98 ab       	std	Y+48, r25	; 0x30
    3090:	8f a7       	std	Y+47, r24	; 0x2f
    3092:	3f c0       	rjmp	.+126    	; 0x3112 <main+0xd46>
	else if (__tmp > 65535)
    3094:	69 a9       	ldd	r22, Y+49	; 0x31
    3096:	7a a9       	ldd	r23, Y+50	; 0x32
    3098:	8b a9       	ldd	r24, Y+51	; 0x33
    309a:	9c a9       	ldd	r25, Y+52	; 0x34
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	4c f5       	brge	.+82     	; 0x30fe <main+0xd32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ac:	6d a9       	ldd	r22, Y+53	; 0x35
    30ae:	7e a9       	ldd	r23, Y+54	; 0x36
    30b0:	8f a9       	ldd	r24, Y+55	; 0x37
    30b2:	98 ad       	ldd	r25, Y+56	; 0x38
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e2       	ldi	r20, 0x20	; 32
    30ba:	51 e4       	ldi	r21, 0x41	; 65
    30bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	98 ab       	std	Y+48, r25	; 0x30
    30d2:	8f a7       	std	Y+47, r24	; 0x2f
    30d4:	0f c0       	rjmp	.+30     	; 0x30f4 <main+0xd28>
    30d6:	89 e1       	ldi	r24, 0x19	; 25
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	9e a7       	std	Y+46, r25	; 0x2e
    30dc:	8d a7       	std	Y+45, r24	; 0x2d
    30de:	8d a5       	ldd	r24, Y+45	; 0x2d
    30e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <main+0xd16>
    30e6:	9e a7       	std	Y+46, r25	; 0x2e
    30e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ec:	98 a9       	ldd	r25, Y+48	; 0x30
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	98 ab       	std	Y+48, r25	; 0x30
    30f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f6:	98 a9       	ldd	r25, Y+48	; 0x30
    30f8:	00 97       	sbiw	r24, 0x00	; 0
    30fa:	69 f7       	brne	.-38     	; 0x30d6 <main+0xd0a>
    30fc:	14 c0       	rjmp	.+40     	; 0x3126 <main+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3100:	7a a9       	ldd	r23, Y+50	; 0x32
    3102:	8b a9       	ldd	r24, Y+51	; 0x33
    3104:	9c a9       	ldd	r25, Y+52	; 0x34
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	98 ab       	std	Y+48, r25	; 0x30
    3110:	8f a7       	std	Y+47, r24	; 0x2f
    3112:	8f a5       	ldd	r24, Y+47	; 0x2f
    3114:	98 a9       	ldd	r25, Y+48	; 0x30
    3116:	9c a7       	std	Y+44, r25	; 0x2c
    3118:	8b a7       	std	Y+43, r24	; 0x2b
    311a:	8b a5       	ldd	r24, Y+43	; 0x2b
    311c:	9c a5       	ldd	r25, Y+44	; 0x2c
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <main+0xd52>
    3122:	9c a7       	std	Y+44, r25	; 0x2c
    3124:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					TIMER1_VidSet_OCR_CompMatch(250);
    3126:	8a ef       	ldi	r24, 0xFA	; 250
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <TIMER1_VidSet_OCR_CompMatch>
    312e:	92 c1       	rjmp	.+804    	; 0x3454 <main+0x1088>
				}
				else
				{
					counter=5;
    3130:	85 e0       	ldi	r24, 0x05	; 5
    3132:	80 93 e9 00 	sts	0x00E9, r24
    3136:	8e c1       	rjmp	.+796    	; 0x3454 <main+0x1088>
				}
			}
			else if(BTN2==PinLow)
    3138:	e0 e3       	ldi	r30, 0x30	; 48
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	80 71       	andi	r24, 0x10	; 16
    3144:	90 70       	andi	r25, 0x00	; 0
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	09 f0       	breq	.+2      	; 0x314c <main+0xd80>
    314a:	84 c1       	rjmp	.+776    	; 0x3454 <main+0x1088>
			{
				if(counter>=1){
    314c:	80 91 e9 00 	lds	r24, 0x00E9
    3150:	88 23       	and	r24, r24
    3152:	09 f4       	brne	.+2      	; 0x3156 <main+0xd8a>
    3154:	7d c1       	rjmp	.+762    	; 0x3450 <main+0x1084>
    3156:	f1 c0       	rjmp	.+482    	; 0x333a <main+0xf6e>
					while(BTN2==PinLow)
					{
						DIO_VidSetPinValue(Port_D, Pin7 ,PinHigh);
    3158:	83 e0       	ldi	r24, 0x03	; 3
    315a:	67 e0       	ldi	r22, 0x07	; 7
    315c:	41 e0       	ldi	r20, 0x01	; 1
    315e:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
						TIMER1_VidSet_OCR_CompMatch(0);
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <TIMER1_VidSet_OCR_CompMatch>
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e4       	ldi	r25, 0x40	; 64
    316e:	ac e9       	ldi	r26, 0x9C	; 156
    3170:	b5 e4       	ldi	r27, 0x45	; 69
    3172:	8f a3       	std	Y+39, r24	; 0x27
    3174:	98 a7       	std	Y+40, r25	; 0x28
    3176:	a9 a7       	std	Y+41, r26	; 0x29
    3178:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317a:	6f a1       	ldd	r22, Y+39	; 0x27
    317c:	78 a5       	ldd	r23, Y+40	; 0x28
    317e:	89 a5       	ldd	r24, Y+41	; 0x29
    3180:	9a a5       	ldd	r25, Y+42	; 0x2a
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	4a e7       	ldi	r20, 0x7A	; 122
    3188:	53 e4       	ldi	r21, 0x43	; 67
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	8b a3       	std	Y+35, r24	; 0x23
    3194:	9c a3       	std	Y+36, r25	; 0x24
    3196:	ad a3       	std	Y+37, r26	; 0x25
    3198:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    319a:	6b a1       	ldd	r22, Y+35	; 0x23
    319c:	7c a1       	ldd	r23, Y+36	; 0x24
    319e:	8d a1       	ldd	r24, Y+37	; 0x25
    31a0:	9e a1       	ldd	r25, Y+38	; 0x26
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e8       	ldi	r20, 0x80	; 128
    31a8:	5f e3       	ldi	r21, 0x3F	; 63
    31aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ae:	88 23       	and	r24, r24
    31b0:	2c f4       	brge	.+10     	; 0x31bc <main+0xdf0>
		__ticks = 1;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	9a a3       	std	Y+34, r25	; 0x22
    31b8:	89 a3       	std	Y+33, r24	; 0x21
    31ba:	3f c0       	rjmp	.+126    	; 0x323a <main+0xe6e>
	else if (__tmp > 65535)
    31bc:	6b a1       	ldd	r22, Y+35	; 0x23
    31be:	7c a1       	ldd	r23, Y+36	; 0x24
    31c0:	8d a1       	ldd	r24, Y+37	; 0x25
    31c2:	9e a1       	ldd	r25, Y+38	; 0x26
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	3f ef       	ldi	r19, 0xFF	; 255
    31c8:	4f e7       	ldi	r20, 0x7F	; 127
    31ca:	57 e4       	ldi	r21, 0x47	; 71
    31cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31d0:	18 16       	cp	r1, r24
    31d2:	4c f5       	brge	.+82     	; 0x3226 <main+0xe5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d4:	6f a1       	ldd	r22, Y+39	; 0x27
    31d6:	78 a5       	ldd	r23, Y+40	; 0x28
    31d8:	89 a5       	ldd	r24, Y+41	; 0x29
    31da:	9a a5       	ldd	r25, Y+42	; 0x2a
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e2       	ldi	r20, 0x20	; 32
    31e2:	51 e4       	ldi	r21, 0x41	; 65
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	bc 01       	movw	r22, r24
    31ee:	cd 01       	movw	r24, r26
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9a a3       	std	Y+34, r25	; 0x22
    31fa:	89 a3       	std	Y+33, r24	; 0x21
    31fc:	0f c0       	rjmp	.+30     	; 0x321c <main+0xe50>
    31fe:	89 e1       	ldi	r24, 0x19	; 25
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	98 a3       	std	Y+32, r25	; 0x20
    3204:	8f 8f       	std	Y+31, r24	; 0x1f
    3206:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3208:	98 a1       	ldd	r25, Y+32	; 0x20
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <main+0xe3e>
    320e:	98 a3       	std	Y+32, r25	; 0x20
    3210:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3212:	89 a1       	ldd	r24, Y+33	; 0x21
    3214:	9a a1       	ldd	r25, Y+34	; 0x22
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	9a a3       	std	Y+34, r25	; 0x22
    321a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321c:	89 a1       	ldd	r24, Y+33	; 0x21
    321e:	9a a1       	ldd	r25, Y+34	; 0x22
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	69 f7       	brne	.-38     	; 0x31fe <main+0xe32>
    3224:	14 c0       	rjmp	.+40     	; 0x324e <main+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3226:	6b a1       	ldd	r22, Y+35	; 0x23
    3228:	7c a1       	ldd	r23, Y+36	; 0x24
    322a:	8d a1       	ldd	r24, Y+37	; 0x25
    322c:	9e a1       	ldd	r25, Y+38	; 0x26
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9a a3       	std	Y+34, r25	; 0x22
    3238:	89 a3       	std	Y+33, r24	; 0x21
    323a:	89 a1       	ldd	r24, Y+33	; 0x21
    323c:	9a a1       	ldd	r25, Y+34	; 0x22
    323e:	9e 8f       	std	Y+30, r25	; 0x1e
    3240:	8d 8f       	std	Y+29, r24	; 0x1d
    3242:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3244:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <main+0xe7a>
    324a:	9e 8f       	std	Y+30, r25	; 0x1e
    324c:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(5000);

						TIMER1_VidSet_OCR_CompMatch(750);
    324e:	8e ee       	ldi	r24, 0xEE	; 238
    3250:	92 e0       	ldi	r25, 0x02	; 2
    3252:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <TIMER1_VidSet_OCR_CompMatch>
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e4       	ldi	r25, 0x40	; 64
    325a:	ac e1       	ldi	r26, 0x1C	; 28
    325c:	b6 e4       	ldi	r27, 0x46	; 70
    325e:	89 8f       	std	Y+25, r24	; 0x19
    3260:	9a 8f       	std	Y+26, r25	; 0x1a
    3262:	ab 8f       	std	Y+27, r26	; 0x1b
    3264:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3266:	69 8d       	ldd	r22, Y+25	; 0x19
    3268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    326a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    326c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	4a e7       	ldi	r20, 0x7A	; 122
    3274:	53 e4       	ldi	r21, 0x43	; 67
    3276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	8d 8b       	std	Y+21, r24	; 0x15
    3280:	9e 8b       	std	Y+22, r25	; 0x16
    3282:	af 8b       	std	Y+23, r26	; 0x17
    3284:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3286:	6d 89       	ldd	r22, Y+21	; 0x15
    3288:	7e 89       	ldd	r23, Y+22	; 0x16
    328a:	8f 89       	ldd	r24, Y+23	; 0x17
    328c:	98 8d       	ldd	r25, Y+24	; 0x18
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e8       	ldi	r20, 0x80	; 128
    3294:	5f e3       	ldi	r21, 0x3F	; 63
    3296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    329a:	88 23       	and	r24, r24
    329c:	2c f4       	brge	.+10     	; 0x32a8 <main+0xedc>
		__ticks = 1;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	9c 8b       	std	Y+20, r25	; 0x14
    32a4:	8b 8b       	std	Y+19, r24	; 0x13
    32a6:	3f c0       	rjmp	.+126    	; 0x3326 <main+0xf5a>
	else if (__tmp > 65535)
    32a8:	6d 89       	ldd	r22, Y+21	; 0x15
    32aa:	7e 89       	ldd	r23, Y+22	; 0x16
    32ac:	8f 89       	ldd	r24, Y+23	; 0x17
    32ae:	98 8d       	ldd	r25, Y+24	; 0x18
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	3f ef       	ldi	r19, 0xFF	; 255
    32b4:	4f e7       	ldi	r20, 0x7F	; 127
    32b6:	57 e4       	ldi	r21, 0x47	; 71
    32b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32bc:	18 16       	cp	r1, r24
    32be:	4c f5       	brge	.+82     	; 0x3312 <main+0xf46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c0:	69 8d       	ldd	r22, Y+25	; 0x19
    32c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e2       	ldi	r20, 0x20	; 32
    32ce:	51 e4       	ldi	r21, 0x41	; 65
    32d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	9c 8b       	std	Y+20, r25	; 0x14
    32e6:	8b 8b       	std	Y+19, r24	; 0x13
    32e8:	0f c0       	rjmp	.+30     	; 0x3308 <main+0xf3c>
    32ea:	89 e1       	ldi	r24, 0x19	; 25
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	9a 8b       	std	Y+18, r25	; 0x12
    32f0:	89 8b       	std	Y+17, r24	; 0x11
    32f2:	89 89       	ldd	r24, Y+17	; 0x11
    32f4:	9a 89       	ldd	r25, Y+18	; 0x12
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <main+0xf2a>
    32fa:	9a 8b       	std	Y+18, r25	; 0x12
    32fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3300:	9c 89       	ldd	r25, Y+20	; 0x14
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	9c 8b       	std	Y+20, r25	; 0x14
    3306:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3308:	8b 89       	ldd	r24, Y+19	; 0x13
    330a:	9c 89       	ldd	r25, Y+20	; 0x14
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	69 f7       	brne	.-38     	; 0x32ea <main+0xf1e>
    3310:	14 c0       	rjmp	.+40     	; 0x333a <main+0xf6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3312:	6d 89       	ldd	r22, Y+21	; 0x15
    3314:	7e 89       	ldd	r23, Y+22	; 0x16
    3316:	8f 89       	ldd	r24, Y+23	; 0x17
    3318:	98 8d       	ldd	r25, Y+24	; 0x18
    331a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	9c 8b       	std	Y+20, r25	; 0x14
    3324:	8b 8b       	std	Y+19, r24	; 0x13
    3326:	8b 89       	ldd	r24, Y+19	; 0x13
    3328:	9c 89       	ldd	r25, Y+20	; 0x14
    332a:	98 8b       	std	Y+16, r25	; 0x10
    332c:	8f 87       	std	Y+15, r24	; 0x0f
    332e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3330:	98 89       	ldd	r25, Y+16	; 0x10
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <main+0xf66>
    3336:	98 8b       	std	Y+16, r25	; 0x10
    3338:	8f 87       	std	Y+15, r24	; 0x0f
				}
			}
			else if(BTN2==PinLow)
			{
				if(counter>=1){
					while(BTN2==PinLow)
    333a:	e0 e3       	ldi	r30, 0x30	; 48
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	88 2f       	mov	r24, r24
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	80 71       	andi	r24, 0x10	; 16
    3346:	90 70       	andi	r25, 0x00	; 0
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	09 f4       	brne	.+2      	; 0x334e <main+0xf82>
    334c:	05 cf       	rjmp	.-502    	; 0x3158 <main+0xd8c>

						TIMER1_VidSet_OCR_CompMatch(750);
						_delay_ms(10000);

					}
					DIO_VidSetPinValue(Port_D, Pin7 ,PinLow);
    334e:	83 e0       	ldi	r24, 0x03	; 3
    3350:	67 e0       	ldi	r22, 0x07	; 7
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	aa e7       	ldi	r26, 0x7A	; 122
    335e:	b4 e4       	ldi	r27, 0x44	; 68
    3360:	8b 87       	std	Y+11, r24	; 0x0b
    3362:	9c 87       	std	Y+12, r25	; 0x0c
    3364:	ad 87       	std	Y+13, r26	; 0x0d
    3366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3368:	6b 85       	ldd	r22, Y+11	; 0x0b
    336a:	7c 85       	ldd	r23, Y+12	; 0x0c
    336c:	8d 85       	ldd	r24, Y+13	; 0x0d
    336e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	4a e7       	ldi	r20, 0x7A	; 122
    3376:	53 e4       	ldi	r21, 0x43	; 67
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	8f 83       	std	Y+7, r24	; 0x07
    3382:	98 87       	std	Y+8, r25	; 0x08
    3384:	a9 87       	std	Y+9, r26	; 0x09
    3386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3388:	6f 81       	ldd	r22, Y+7	; 0x07
    338a:	78 85       	ldd	r23, Y+8	; 0x08
    338c:	89 85       	ldd	r24, Y+9	; 0x09
    338e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e8       	ldi	r20, 0x80	; 128
    3396:	5f e3       	ldi	r21, 0x3F	; 63
    3398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    339c:	88 23       	and	r24, r24
    339e:	2c f4       	brge	.+10     	; 0x33aa <main+0xfde>
		__ticks = 1;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9e 83       	std	Y+6, r25	; 0x06
    33a6:	8d 83       	std	Y+5, r24	; 0x05
    33a8:	3f c0       	rjmp	.+126    	; 0x3428 <main+0x105c>
	else if (__tmp > 65535)
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	3f ef       	ldi	r19, 0xFF	; 255
    33b6:	4f e7       	ldi	r20, 0x7F	; 127
    33b8:	57 e4       	ldi	r21, 0x47	; 71
    33ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33be:	18 16       	cp	r1, r24
    33c0:	4c f5       	brge	.+82     	; 0x3414 <main+0x1048>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e2       	ldi	r20, 0x20	; 32
    33d0:	51 e4       	ldi	r21, 0x41	; 65
    33d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	bc 01       	movw	r22, r24
    33dc:	cd 01       	movw	r24, r26
    33de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	9e 83       	std	Y+6, r25	; 0x06
    33e8:	8d 83       	std	Y+5, r24	; 0x05
    33ea:	0f c0       	rjmp	.+30     	; 0x340a <main+0x103e>
    33ec:	89 e1       	ldi	r24, 0x19	; 25
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9c 83       	std	Y+4, r25	; 0x04
    33f2:	8b 83       	std	Y+3, r24	; 0x03
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	9c 81       	ldd	r25, Y+4	; 0x04
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	f1 f7       	brne	.-4      	; 0x33f8 <main+0x102c>
    33fc:	9c 83       	std	Y+4, r25	; 0x04
    33fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	9e 83       	std	Y+6, r25	; 0x06
    3408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	9e 81       	ldd	r25, Y+6	; 0x06
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	69 f7       	brne	.-38     	; 0x33ec <main+0x1020>
    3412:	14 c0       	rjmp	.+40     	; 0x343c <main+0x1070>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3414:	6f 81       	ldd	r22, Y+7	; 0x07
    3416:	78 85       	ldd	r23, Y+8	; 0x08
    3418:	89 85       	ldd	r24, Y+9	; 0x09
    341a:	9a 85       	ldd	r25, Y+10	; 0x0a
    341c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	9e 83       	std	Y+6, r25	; 0x06
    3426:	8d 83       	std	Y+5, r24	; 0x05
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	f1 f7       	brne	.-4      	; 0x3434 <main+0x1068>
    3438:	9a 83       	std	Y+2, r25	; 0x02
    343a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					TIMER1_VidSet_OCR_CompMatch(250);
    343c:	8a ef       	ldi	r24, 0xFA	; 250
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <TIMER1_VidSet_OCR_CompMatch>
					--counter;
    3444:	80 91 e9 00 	lds	r24, 0x00E9
    3448:	81 50       	subi	r24, 0x01	; 1
    344a:	80 93 e9 00 	sts	0x00E9, r24
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <main+0x1088>
				}
				else
				{
					counter=0;
    3450:	10 92 e9 00 	sts	0x00E9, r1
			}
		}
		//Gate_control();

		/*print the no of cares*/
		LCD_VidMoveCursor(1,12);
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	6c e0       	ldi	r22, 0x0C	; 12
    3458:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
		LCD_VidPrintNumber(counter);
    345c:	80 91 e9 00 	lds	r24, 0x00E9
    3460:	88 2f       	mov	r24, r24
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a0 e0       	ldi	r26, 0x00	; 0
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VidPrintNumber>
    3470:	30 c9       	rjmp	.-3488   	; 0x26d2 <main+0x306>

00003472 <initialize_pins>:
	}
}

void initialize_pins(void)
{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
	/*set pin direction of SLAVE */
	DIO_VidSetPinDirection(Port_B,Pin4,Input);    	/* SS : input (floating)for slave */
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	64 e0       	ldi	r22, 0x04	; 4
    347e:	40 e0       	ldi	r20, 0x00	; 0
    3480:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B,Pin5,Input);  	/* MOSI : master output slave input */
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	65 e0       	ldi	r22, 0x05	; 5
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B,Pin6,Output);     /* MISO : master input slave output */
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	66 e0       	ldi	r22, 0x06	; 6
    3492:	41 e0       	ldi	r20, 0x01	; 1
    3494:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B,Pin7,Input);      /* SCK : Input for slave */
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	67 e0       	ldi	r22, 0x07	; 7
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	/* set pin direction of TX */
	DIO_VidSetPinDirection(Port_D,Pin1,Output);
    34a2:	83 e0       	ldi	r24, 0x03	; 3
    34a4:	61 e0       	ldi	r22, 0x01	; 1
    34a6:	41 e0       	ldi	r20, 0x01	; 1
    34a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	/* set pin direction of IR Sensors */
	DIO_VidSetPinDirection(Port_D,Pin3,Input);
    34ac:	83 e0       	ldi	r24, 0x03	; 3
    34ae:	63 e0       	ldi	r22, 0x03	; 3
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_D,Pin4,Input);
    34b6:	83 e0       	ldi	r24, 0x03	; 3
    34b8:	64 e0       	ldi	r22, 0x04	; 4
    34ba:	40 e0       	ldi	r20, 0x00	; 0
    34bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	DIO_VidSetPinValue(Port_D, Pin3 ,PinHigh);
    34c0:	83 e0       	ldi	r24, 0x03	; 3
    34c2:	63 e0       	ldi	r22, 0x03	; 3
    34c4:	41 e0       	ldi	r20, 0x01	; 1
    34c6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Port_D, Pin4 ,PinHigh);
    34ca:	83 e0       	ldi	r24, 0x03	; 3
    34cc:	64 e0       	ldi	r22, 0x04	; 4
    34ce:	41 e0       	ldi	r20, 0x01	; 1
    34d0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>


	/* set pin direction of INPUT AND OUTPUT LED */
	DIO_VidSetPinDirection(Port_D ,Pin6,Output);
    34d4:	83 e0       	ldi	r24, 0x03	; 3
    34d6:	66 e0       	ldi	r22, 0x06	; 6
    34d8:	41 e0       	ldi	r20, 0x01	; 1
    34da:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_D ,Pin7,Output);
    34de:	83 e0       	ldi	r24, 0x03	; 3
    34e0:	67 e0       	ldi	r22, 0x07	; 7
    34e2:	41 e0       	ldi	r20, 0x01	; 1
    34e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(Port_D, Pin6 ,PinLow);
    34e8:	83 e0       	ldi	r24, 0x03	; 3
    34ea:	66 e0       	ldi	r22, 0x06	; 6
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Port_D, Pin7 ,PinLow);
    34f2:	83 e0       	ldi	r24, 0x03	; 3
    34f4:	67 e0       	ldi	r22, 0x07	; 7
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>

	/* set pin direction of LCD */
	DIO_VidSetPortDirection(Port_A , Output);
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	61 e0       	ldi	r22, 0x01	; 1
    3500:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(Port_C, Pin0 , Output);
    3504:	82 e0       	ldi	r24, 0x02	; 2
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C, Pin1 , Output);
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	61 e0       	ldi	r22, 0x01	; 1
    3512:	41 e0       	ldi	r20, 0x01	; 1
    3514:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C, Pin2 , Output);
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	62 e0       	ldi	r22, 0x02	; 2
    351c:	41 e0       	ldi	r20, 0x01	; 1
    351e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	/* set pin direction of servo motor */
	DIO_VidSetPinDirection(Port_D ,Pin5,Output);
    3522:	83 e0       	ldi	r24, 0x03	; 3
    3524:	65 e0       	ldi	r22, 0x05	; 5
    3526:	41 e0       	ldi	r20, 0x01	; 1
    3528:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	/* set pin direction of Buzzer */
	DIO_VidSetPinDirection(Port_B ,Pin0,Output);
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	60 e0       	ldi	r22, 0x00	; 0
    3530:	41 e0       	ldi	r20, 0x01	; 1
    3532:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>


	/* set pin direction of 4 Leds */
	DIO_VidSetPinDirection(Port_C, Pin3 , Output);
    3536:	82 e0       	ldi	r24, 0x02	; 2
    3538:	63 e0       	ldi	r22, 0x03	; 3
    353a:	41 e0       	ldi	r20, 0x01	; 1
    353c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C, Pin4 , Output);
    3540:	82 e0       	ldi	r24, 0x02	; 2
    3542:	64 e0       	ldi	r22, 0x04	; 4
    3544:	41 e0       	ldi	r20, 0x01	; 1
    3546:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C, Pin5 , Output);
    354a:	82 e0       	ldi	r24, 0x02	; 2
    354c:	65 e0       	ldi	r22, 0x05	; 5
    354e:	41 e0       	ldi	r20, 0x01	; 1
    3550:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C, Pin6 , Output);
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	66 e0       	ldi	r22, 0x06	; 6
    3558:	41 e0       	ldi	r20, 0x01	; 1
    355a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
}
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	08 95       	ret

00003564 <initialize_peripherals>:
void initialize_peripherals(void)
{
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62

	/* initialize slave */
	SPI_VidSlaveInit(CPHAS0,CPOL0);
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <SPI_VidSlaveInit>

	/* initialize UART */
	UART_VidInit(STOP_1BIT,DISABLED,DATA_8BIT);
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	60 e0       	ldi	r22, 0x00	; 0
    3578:	43 e0       	ldi	r20, 0x03	; 3
    357a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <UART_VidInit>

	/* initialize LCD */
	LCD_Vid_Init();
    357e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_Vid_Init>

	/* servo motor initialize */
	TIMER1_VidInit();
    3582:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIMER1_VidInit>
	TIMER1_VidSet_ICR_TopVlue(19999);
    3586:	8f e1       	ldi	r24, 0x1F	; 31
    3588:	9e e4       	ldi	r25, 0x4E	; 78
    358a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <TIMER1_VidSet_ICR_TopVlue>
}
    358e:	cf 91       	pop	r28
    3590:	df 91       	pop	r29
    3592:	08 95       	ret

00003594 <lighting_control>:

void lighting_control(void)
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
	if(counter == 0)
    359c:	80 91 e9 00 	lds	r24, 0x00E9
    35a0:	88 23       	and	r24, r24
    35a2:	a9 f4       	brne	.+42     	; 0x35ce <lighting_control+0x3a>
	{
		/* off all leds */
		DIO_VidSetPinValue(Port_C, Pin3 ,PinLow);
    35a4:	82 e0       	ldi	r24, 0x02	; 2
    35a6:	63 e0       	ldi	r22, 0x03	; 3
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Port_C, Pin4 ,PinLow);
    35ae:	82 e0       	ldi	r24, 0x02	; 2
    35b0:	64 e0       	ldi	r22, 0x04	; 4
    35b2:	40 e0       	ldi	r20, 0x00	; 0
    35b4:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Port_C, Pin5 ,PinLow);
    35b8:	82 e0       	ldi	r24, 0x02	; 2
    35ba:	65 e0       	ldi	r22, 0x05	; 5
    35bc:	40 e0       	ldi	r20, 0x00	; 0
    35be:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Port_C, Pin6 ,PinLow);
    35c2:	82 e0       	ldi	r24, 0x02	; 2
    35c4:	66 e0       	ldi	r22, 0x06	; 6
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    35cc:	14 c0       	rjmp	.+40     	; 0x35f6 <lighting_control+0x62>
	}
	else
	{
		/* on all leds */
		DIO_VidSetPinValue(Port_C, Pin3 ,PinHigh);
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	63 e0       	ldi	r22, 0x03	; 3
    35d2:	41 e0       	ldi	r20, 0x01	; 1
    35d4:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Port_C, Pin4 ,PinHigh);
    35d8:	82 e0       	ldi	r24, 0x02	; 2
    35da:	64 e0       	ldi	r22, 0x04	; 4
    35dc:	41 e0       	ldi	r20, 0x01	; 1
    35de:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Port_C, Pin5 ,PinHigh);
    35e2:	82 e0       	ldi	r24, 0x02	; 2
    35e4:	65 e0       	ldi	r22, 0x05	; 5
    35e6:	41 e0       	ldi	r20, 0x01	; 1
    35e8:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(Port_C, Pin6 ,PinHigh);
    35ec:	82 e0       	ldi	r24, 0x02	; 2
    35ee:	66 e0       	ldi	r22, 0x06	; 6
    35f0:	41 e0       	ldi	r20, 0x01	; 1
    35f2:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	}
}
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <Gate_control>:

void Gate_control(void)
{
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	c6 54       	subi	r28, 0x46	; 70
    360a:	d0 40       	sbci	r29, 0x00	; 0
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	de bf       	out	0x3e, r29	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	cd bf       	out	0x3d, r28	; 61
	UART_VidSendDataString("Access Allowed");
    3616:	83 e9       	ldi	r24, 0x93	; 147
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 9b 10 	call	0x2136	; 0x2136 <UART_VidSendDataString>
	UART_VidSendData('\r');
    361e:	8d e0       	ldi	r24, 0x0D	; 13
    3620:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_VidSendData>
    3624:	fe 01       	movw	r30, r28
    3626:	ed 5b       	subi	r30, 0xBD	; 189
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	aa e7       	ldi	r26, 0x7A	; 122
    3630:	b3 e4       	ldi	r27, 0x43	; 67
    3632:	80 83       	st	Z, r24
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	a2 83       	std	Z+2, r26	; 0x02
    3638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363a:	8e 01       	movw	r16, r28
    363c:	01 5c       	subi	r16, 0xC1	; 193
    363e:	1f 4f       	sbci	r17, 0xFF	; 255
    3640:	fe 01       	movw	r30, r28
    3642:	ed 5b       	subi	r30, 0xBD	; 189
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	4a e7       	ldi	r20, 0x7A	; 122
    3654:	53 e4       	ldi	r21, 0x43	; 67
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	f8 01       	movw	r30, r16
    3660:	80 83       	st	Z, r24
    3662:	91 83       	std	Z+1, r25	; 0x01
    3664:	a2 83       	std	Z+2, r26	; 0x02
    3666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3668:	fe 01       	movw	r30, r28
    366a:	ff 96       	adiw	r30, 0x3f	; 63
    366c:	60 81       	ld	r22, Z
    366e:	71 81       	ldd	r23, Z+1	; 0x01
    3670:	82 81       	ldd	r24, Z+2	; 0x02
    3672:	93 81       	ldd	r25, Z+3	; 0x03
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	40 e8       	ldi	r20, 0x80	; 128
    367a:	5f e3       	ldi	r21, 0x3F	; 63
    367c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3680:	88 23       	and	r24, r24
    3682:	2c f4       	brge	.+10     	; 0x368e <Gate_control+0x92>
		__ticks = 1;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	9e af       	std	Y+62, r25	; 0x3e
    368a:	8d af       	std	Y+61, r24	; 0x3d
    368c:	46 c0       	rjmp	.+140    	; 0x371a <Gate_control+0x11e>
	else if (__tmp > 65535)
    368e:	fe 01       	movw	r30, r28
    3690:	ff 96       	adiw	r30, 0x3f	; 63
    3692:	60 81       	ld	r22, Z
    3694:	71 81       	ldd	r23, Z+1	; 0x01
    3696:	82 81       	ldd	r24, Z+2	; 0x02
    3698:	93 81       	ldd	r25, Z+3	; 0x03
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	3f ef       	ldi	r19, 0xFF	; 255
    369e:	4f e7       	ldi	r20, 0x7F	; 127
    36a0:	57 e4       	ldi	r21, 0x47	; 71
    36a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36a6:	18 16       	cp	r1, r24
    36a8:	64 f5       	brge	.+88     	; 0x3702 <Gate_control+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36aa:	fe 01       	movw	r30, r28
    36ac:	ed 5b       	subi	r30, 0xBD	; 189
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 e2       	ldi	r20, 0x20	; 32
    36be:	51 e4       	ldi	r21, 0x41	; 65
    36c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	bc 01       	movw	r22, r24
    36ca:	cd 01       	movw	r24, r26
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	9e af       	std	Y+62, r25	; 0x3e
    36d6:	8d af       	std	Y+61, r24	; 0x3d
    36d8:	0f c0       	rjmp	.+30     	; 0x36f8 <Gate_control+0xfc>
    36da:	89 e1       	ldi	r24, 0x19	; 25
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	9c af       	std	Y+60, r25	; 0x3c
    36e0:	8b af       	std	Y+59, r24	; 0x3b
    36e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    36e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <Gate_control+0xea>
    36ea:	9c af       	std	Y+60, r25	; 0x3c
    36ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    36f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	9e af       	std	Y+62, r25	; 0x3e
    36f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    36fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	69 f7       	brne	.-38     	; 0x36da <Gate_control+0xde>
    3700:	16 c0       	rjmp	.+44     	; 0x372e <Gate_control+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3702:	fe 01       	movw	r30, r28
    3704:	ff 96       	adiw	r30, 0x3f	; 63
    3706:	60 81       	ld	r22, Z
    3708:	71 81       	ldd	r23, Z+1	; 0x01
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	9e af       	std	Y+62, r25	; 0x3e
    3718:	8d af       	std	Y+61, r24	; 0x3d
    371a:	8d ad       	ldd	r24, Y+61	; 0x3d
    371c:	9e ad       	ldd	r25, Y+62	; 0x3e
    371e:	9a af       	std	Y+58, r25	; 0x3a
    3720:	89 af       	std	Y+57, r24	; 0x39
    3722:	89 ad       	ldd	r24, Y+57	; 0x39
    3724:	9a ad       	ldd	r25, Y+58	; 0x3a
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	f1 f7       	brne	.-4      	; 0x3726 <Gate_control+0x12a>
    372a:	9a af       	std	Y+58, r25	; 0x3a
    372c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(250);
	LCD_VidMoveCursor(0,8);
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	68 e0       	ldi	r22, 0x08	; 8
    3732:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
	LCD_VidPrintString(RFID);
    3736:	8c ee       	ldi	r24, 0xEC	; 236
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
	TIMER1_VidSet_OCR_CompMatch(0);
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <TIMER1_VidSet_OCR_CompMatch>
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	90 e4       	ldi	r25, 0x40	; 64
    374a:	ac e9       	ldi	r26, 0x9C	; 156
    374c:	b5 e4       	ldi	r27, 0x45	; 69
    374e:	8d ab       	std	Y+53, r24	; 0x35
    3750:	9e ab       	std	Y+54, r25	; 0x36
    3752:	af ab       	std	Y+55, r26	; 0x37
    3754:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3756:	6d a9       	ldd	r22, Y+53	; 0x35
    3758:	7e a9       	ldd	r23, Y+54	; 0x36
    375a:	8f a9       	ldd	r24, Y+55	; 0x37
    375c:	98 ad       	ldd	r25, Y+56	; 0x38
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	4a e7       	ldi	r20, 0x7A	; 122
    3764:	53 e4       	ldi	r21, 0x43	; 67
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	89 ab       	std	Y+49, r24	; 0x31
    3770:	9a ab       	std	Y+50, r25	; 0x32
    3772:	ab ab       	std	Y+51, r26	; 0x33
    3774:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3776:	69 a9       	ldd	r22, Y+49	; 0x31
    3778:	7a a9       	ldd	r23, Y+50	; 0x32
    377a:	8b a9       	ldd	r24, Y+51	; 0x33
    377c:	9c a9       	ldd	r25, Y+52	; 0x34
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e8       	ldi	r20, 0x80	; 128
    3784:	5f e3       	ldi	r21, 0x3F	; 63
    3786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    378a:	88 23       	and	r24, r24
    378c:	2c f4       	brge	.+10     	; 0x3798 <Gate_control+0x19c>
		__ticks = 1;
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	98 ab       	std	Y+48, r25	; 0x30
    3794:	8f a7       	std	Y+47, r24	; 0x2f
    3796:	3f c0       	rjmp	.+126    	; 0x3816 <Gate_control+0x21a>
	else if (__tmp > 65535)
    3798:	69 a9       	ldd	r22, Y+49	; 0x31
    379a:	7a a9       	ldd	r23, Y+50	; 0x32
    379c:	8b a9       	ldd	r24, Y+51	; 0x33
    379e:	9c a9       	ldd	r25, Y+52	; 0x34
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	3f ef       	ldi	r19, 0xFF	; 255
    37a4:	4f e7       	ldi	r20, 0x7F	; 127
    37a6:	57 e4       	ldi	r21, 0x47	; 71
    37a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37ac:	18 16       	cp	r1, r24
    37ae:	4c f5       	brge	.+82     	; 0x3802 <Gate_control+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b0:	6d a9       	ldd	r22, Y+53	; 0x35
    37b2:	7e a9       	ldd	r23, Y+54	; 0x36
    37b4:	8f a9       	ldd	r24, Y+55	; 0x37
    37b6:	98 ad       	ldd	r25, Y+56	; 0x38
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e2       	ldi	r20, 0x20	; 32
    37be:	51 e4       	ldi	r21, 0x41	; 65
    37c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	bc 01       	movw	r22, r24
    37ca:	cd 01       	movw	r24, r26
    37cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	98 ab       	std	Y+48, r25	; 0x30
    37d6:	8f a7       	std	Y+47, r24	; 0x2f
    37d8:	0f c0       	rjmp	.+30     	; 0x37f8 <Gate_control+0x1fc>
    37da:	89 e1       	ldi	r24, 0x19	; 25
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	9e a7       	std	Y+46, r25	; 0x2e
    37e0:	8d a7       	std	Y+45, r24	; 0x2d
    37e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    37e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    37e6:	01 97       	sbiw	r24, 0x01	; 1
    37e8:	f1 f7       	brne	.-4      	; 0x37e6 <Gate_control+0x1ea>
    37ea:	9e a7       	std	Y+46, r25	; 0x2e
    37ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    37f0:	98 a9       	ldd	r25, Y+48	; 0x30
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	98 ab       	std	Y+48, r25	; 0x30
    37f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37fa:	98 a9       	ldd	r25, Y+48	; 0x30
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	69 f7       	brne	.-38     	; 0x37da <Gate_control+0x1de>
    3800:	14 c0       	rjmp	.+40     	; 0x382a <Gate_control+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3802:	69 a9       	ldd	r22, Y+49	; 0x31
    3804:	7a a9       	ldd	r23, Y+50	; 0x32
    3806:	8b a9       	ldd	r24, Y+51	; 0x33
    3808:	9c a9       	ldd	r25, Y+52	; 0x34
    380a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	98 ab       	std	Y+48, r25	; 0x30
    3814:	8f a7       	std	Y+47, r24	; 0x2f
    3816:	8f a5       	ldd	r24, Y+47	; 0x2f
    3818:	98 a9       	ldd	r25, Y+48	; 0x30
    381a:	9c a7       	std	Y+44, r25	; 0x2c
    381c:	8b a7       	std	Y+43, r24	; 0x2b
    381e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3820:	9c a5       	ldd	r25, Y+44	; 0x2c
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	f1 f7       	brne	.-4      	; 0x3822 <Gate_control+0x226>
    3826:	9c a7       	std	Y+44, r25	; 0x2c
    3828:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5000);

	TIMER1_VidSet_OCR_CompMatch(750);
    382a:	8e ee       	ldi	r24, 0xEE	; 238
    382c:	92 e0       	ldi	r25, 0x02	; 2
    382e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <TIMER1_VidSet_OCR_CompMatch>

	LCD_VidMoveCursor(1,0);
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	60 e0       	ldi	r22, 0x00	; 0
    3836:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
	LCD_VidPrintString(".....Opening.....");
    383a:	82 ea       	ldi	r24, 0xA2	; 162
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	90 e4       	ldi	r25, 0x40	; 64
    3846:	ac e9       	ldi	r26, 0x9C	; 156
    3848:	b5 e4       	ldi	r27, 0x45	; 69
    384a:	8f a3       	std	Y+39, r24	; 0x27
    384c:	98 a7       	std	Y+40, r25	; 0x28
    384e:	a9 a7       	std	Y+41, r26	; 0x29
    3850:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3852:	6f a1       	ldd	r22, Y+39	; 0x27
    3854:	78 a5       	ldd	r23, Y+40	; 0x28
    3856:	89 a5       	ldd	r24, Y+41	; 0x29
    3858:	9a a5       	ldd	r25, Y+42	; 0x2a
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	4a e7       	ldi	r20, 0x7A	; 122
    3860:	53 e4       	ldi	r21, 0x43	; 67
    3862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	8b a3       	std	Y+35, r24	; 0x23
    386c:	9c a3       	std	Y+36, r25	; 0x24
    386e:	ad a3       	std	Y+37, r26	; 0x25
    3870:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3872:	6b a1       	ldd	r22, Y+35	; 0x23
    3874:	7c a1       	ldd	r23, Y+36	; 0x24
    3876:	8d a1       	ldd	r24, Y+37	; 0x25
    3878:	9e a1       	ldd	r25, Y+38	; 0x26
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	40 e8       	ldi	r20, 0x80	; 128
    3880:	5f e3       	ldi	r21, 0x3F	; 63
    3882:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3886:	88 23       	and	r24, r24
    3888:	2c f4       	brge	.+10     	; 0x3894 <Gate_control+0x298>
		__ticks = 1;
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	9a a3       	std	Y+34, r25	; 0x22
    3890:	89 a3       	std	Y+33, r24	; 0x21
    3892:	3f c0       	rjmp	.+126    	; 0x3912 <Gate_control+0x316>
	else if (__tmp > 65535)
    3894:	6b a1       	ldd	r22, Y+35	; 0x23
    3896:	7c a1       	ldd	r23, Y+36	; 0x24
    3898:	8d a1       	ldd	r24, Y+37	; 0x25
    389a:	9e a1       	ldd	r25, Y+38	; 0x26
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	3f ef       	ldi	r19, 0xFF	; 255
    38a0:	4f e7       	ldi	r20, 0x7F	; 127
    38a2:	57 e4       	ldi	r21, 0x47	; 71
    38a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38a8:	18 16       	cp	r1, r24
    38aa:	4c f5       	brge	.+82     	; 0x38fe <Gate_control+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ac:	6f a1       	ldd	r22, Y+39	; 0x27
    38ae:	78 a5       	ldd	r23, Y+40	; 0x28
    38b0:	89 a5       	ldd	r24, Y+41	; 0x29
    38b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e2       	ldi	r20, 0x20	; 32
    38ba:	51 e4       	ldi	r21, 0x41	; 65
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	bc 01       	movw	r22, r24
    38c6:	cd 01       	movw	r24, r26
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	9a a3       	std	Y+34, r25	; 0x22
    38d2:	89 a3       	std	Y+33, r24	; 0x21
    38d4:	0f c0       	rjmp	.+30     	; 0x38f4 <Gate_control+0x2f8>
    38d6:	89 e1       	ldi	r24, 0x19	; 25
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	98 a3       	std	Y+32, r25	; 0x20
    38dc:	8f 8f       	std	Y+31, r24	; 0x1f
    38de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38e0:	98 a1       	ldd	r25, Y+32	; 0x20
    38e2:	01 97       	sbiw	r24, 0x01	; 1
    38e4:	f1 f7       	brne	.-4      	; 0x38e2 <Gate_control+0x2e6>
    38e6:	98 a3       	std	Y+32, r25	; 0x20
    38e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ea:	89 a1       	ldd	r24, Y+33	; 0x21
    38ec:	9a a1       	ldd	r25, Y+34	; 0x22
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	9a a3       	std	Y+34, r25	; 0x22
    38f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f4:	89 a1       	ldd	r24, Y+33	; 0x21
    38f6:	9a a1       	ldd	r25, Y+34	; 0x22
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	69 f7       	brne	.-38     	; 0x38d6 <Gate_control+0x2da>
    38fc:	14 c0       	rjmp	.+40     	; 0x3926 <Gate_control+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3900:	7c a1       	ldd	r23, Y+36	; 0x24
    3902:	8d a1       	ldd	r24, Y+37	; 0x25
    3904:	9e a1       	ldd	r25, Y+38	; 0x26
    3906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	9a a3       	std	Y+34, r25	; 0x22
    3910:	89 a3       	std	Y+33, r24	; 0x21
    3912:	89 a1       	ldd	r24, Y+33	; 0x21
    3914:	9a a1       	ldd	r25, Y+34	; 0x22
    3916:	9e 8f       	std	Y+30, r25	; 0x1e
    3918:	8d 8f       	std	Y+29, r24	; 0x1d
    391a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    391c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <Gate_control+0x322>
    3922:	9e 8f       	std	Y+30, r25	; 0x1e
    3924:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5000);
	LCD_VidClear_Screen();
    3926:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <LCD_VidClear_Screen>
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	aa e7       	ldi	r26, 0x7A	; 122
    3930:	b3 e4       	ldi	r27, 0x43	; 67
    3932:	89 8f       	std	Y+25, r24	; 0x19
    3934:	9a 8f       	std	Y+26, r25	; 0x1a
    3936:	ab 8f       	std	Y+27, r26	; 0x1b
    3938:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393a:	69 8d       	ldd	r22, Y+25	; 0x19
    393c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    393e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	4a e7       	ldi	r20, 0x7A	; 122
    3948:	53 e4       	ldi	r21, 0x43	; 67
    394a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	8d 8b       	std	Y+21, r24	; 0x15
    3954:	9e 8b       	std	Y+22, r25	; 0x16
    3956:	af 8b       	std	Y+23, r26	; 0x17
    3958:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    395a:	6d 89       	ldd	r22, Y+21	; 0x15
    395c:	7e 89       	ldd	r23, Y+22	; 0x16
    395e:	8f 89       	ldd	r24, Y+23	; 0x17
    3960:	98 8d       	ldd	r25, Y+24	; 0x18
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e8       	ldi	r20, 0x80	; 128
    3968:	5f e3       	ldi	r21, 0x3F	; 63
    396a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    396e:	88 23       	and	r24, r24
    3970:	2c f4       	brge	.+10     	; 0x397c <Gate_control+0x380>
		__ticks = 1;
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	9c 8b       	std	Y+20, r25	; 0x14
    3978:	8b 8b       	std	Y+19, r24	; 0x13
    397a:	3f c0       	rjmp	.+126    	; 0x39fa <Gate_control+0x3fe>
	else if (__tmp > 65535)
    397c:	6d 89       	ldd	r22, Y+21	; 0x15
    397e:	7e 89       	ldd	r23, Y+22	; 0x16
    3980:	8f 89       	ldd	r24, Y+23	; 0x17
    3982:	98 8d       	ldd	r25, Y+24	; 0x18
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	3f ef       	ldi	r19, 0xFF	; 255
    3988:	4f e7       	ldi	r20, 0x7F	; 127
    398a:	57 e4       	ldi	r21, 0x47	; 71
    398c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3990:	18 16       	cp	r1, r24
    3992:	4c f5       	brge	.+82     	; 0x39e6 <Gate_control+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3994:	69 8d       	ldd	r22, Y+25	; 0x19
    3996:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3998:	8b 8d       	ldd	r24, Y+27	; 0x1b
    399a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	40 e2       	ldi	r20, 0x20	; 32
    39a2:	51 e4       	ldi	r21, 0x41	; 65
    39a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	bc 01       	movw	r22, r24
    39ae:	cd 01       	movw	r24, r26
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9c 8b       	std	Y+20, r25	; 0x14
    39ba:	8b 8b       	std	Y+19, r24	; 0x13
    39bc:	0f c0       	rjmp	.+30     	; 0x39dc <Gate_control+0x3e0>
    39be:	89 e1       	ldi	r24, 0x19	; 25
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	9a 8b       	std	Y+18, r25	; 0x12
    39c4:	89 8b       	std	Y+17, r24	; 0x11
    39c6:	89 89       	ldd	r24, Y+17	; 0x11
    39c8:	9a 89       	ldd	r25, Y+18	; 0x12
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	f1 f7       	brne	.-4      	; 0x39ca <Gate_control+0x3ce>
    39ce:	9a 8b       	std	Y+18, r25	; 0x12
    39d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d2:	8b 89       	ldd	r24, Y+19	; 0x13
    39d4:	9c 89       	ldd	r25, Y+20	; 0x14
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	9c 8b       	std	Y+20, r25	; 0x14
    39da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39dc:	8b 89       	ldd	r24, Y+19	; 0x13
    39de:	9c 89       	ldd	r25, Y+20	; 0x14
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	69 f7       	brne	.-38     	; 0x39be <Gate_control+0x3c2>
    39e4:	14 c0       	rjmp	.+40     	; 0x3a0e <Gate_control+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e6:	6d 89       	ldd	r22, Y+21	; 0x15
    39e8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ea:	8f 89       	ldd	r24, Y+23	; 0x17
    39ec:	98 8d       	ldd	r25, Y+24	; 0x18
    39ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	9c 8b       	std	Y+20, r25	; 0x14
    39f8:	8b 8b       	std	Y+19, r24	; 0x13
    39fa:	8b 89       	ldd	r24, Y+19	; 0x13
    39fc:	9c 89       	ldd	r25, Y+20	; 0x14
    39fe:	98 8b       	std	Y+16, r25	; 0x10
    3a00:	8f 87       	std	Y+15, r24	; 0x0f
    3a02:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a04:	98 89       	ldd	r25, Y+16	; 0x10
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <Gate_control+0x40a>
    3a0a:	98 8b       	std	Y+16, r25	; 0x10
    3a0c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	LCD_VidPrintString("CAR_ID: ");
    3a0e:	80 e6       	ldi	r24, 0x60	; 96
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	aa e7       	ldi	r26, 0x7A	; 122
    3a1c:	b3 e4       	ldi	r27, 0x43	; 67
    3a1e:	8b 87       	std	Y+11, r24	; 0x0b
    3a20:	9c 87       	std	Y+12, r25	; 0x0c
    3a22:	ad 87       	std	Y+13, r26	; 0x0d
    3a24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	4a e7       	ldi	r20, 0x7A	; 122
    3a34:	53 e4       	ldi	r21, 0x43	; 67
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	8f 83       	std	Y+7, r24	; 0x07
    3a40:	98 87       	std	Y+8, r25	; 0x08
    3a42:	a9 87       	std	Y+9, r26	; 0x09
    3a44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a5a:	88 23       	and	r24, r24
    3a5c:	2c f4       	brge	.+10     	; 0x3a68 <Gate_control+0x46c>
		__ticks = 1;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	3f c0       	rjmp	.+126    	; 0x3ae6 <Gate_control+0x4ea>
	else if (__tmp > 65535)
    3a68:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6a:	78 85       	ldd	r23, Y+8	; 0x08
    3a6c:	89 85       	ldd	r24, Y+9	; 0x09
    3a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	3f ef       	ldi	r19, 0xFF	; 255
    3a74:	4f e7       	ldi	r20, 0x7F	; 127
    3a76:	57 e4       	ldi	r21, 0x47	; 71
    3a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a7c:	18 16       	cp	r1, r24
    3a7e:	4c f5       	brge	.+82     	; 0x3ad2 <Gate_control+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	51 e4       	ldi	r21, 0x41	; 65
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	bc 01       	movw	r22, r24
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9e 83       	std	Y+6, r25	; 0x06
    3aa6:	8d 83       	std	Y+5, r24	; 0x05
    3aa8:	0f c0       	rjmp	.+30     	; 0x3ac8 <Gate_control+0x4cc>
    3aaa:	89 e1       	ldi	r24, 0x19	; 25
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	8b 83       	std	Y+3, r24	; 0x03
    3ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <Gate_control+0x4ba>
    3aba:	9c 83       	std	Y+4, r25	; 0x04
    3abc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aca:	9e 81       	ldd	r25, Y+6	; 0x06
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	69 f7       	brne	.-38     	; 0x3aaa <Gate_control+0x4ae>
    3ad0:	14 c0       	rjmp	.+40     	; 0x3afa <Gate_control+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad4:	78 85       	ldd	r23, Y+8	; 0x08
    3ad6:	89 85       	ldd	r24, Y+9	; 0x09
    3ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	9e 83       	std	Y+6, r25	; 0x06
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
    3ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aea:	9a 83       	std	Y+2, r25	; 0x02
    3aec:	89 83       	std	Y+1, r24	; 0x01
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	9a 81       	ldd	r25, Y+2	; 0x02
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <Gate_control+0x4f6>
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	LCD_VidMoveCursor(1,0);
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	60 e0       	ldi	r22, 0x00	; 0
    3afe:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidMoveCursor>
	LCD_VidPrintString("NO_OF_CARS: ");
    3b02:	89 e6       	ldi	r24, 0x69	; 105
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_VidPrintString>
	counter++;
    3b0a:	80 91 e9 00 	lds	r24, 0x00E9
    3b0e:	8f 5f       	subi	r24, 0xFF	; 255
    3b10:	80 93 e9 00 	sts	0x00E9, r24
	local_ID = 0;
    3b14:	10 92 eb 00 	sts	0x00EB, r1
}
    3b18:	ca 5b       	subi	r28, 0xBA	; 186
    3b1a:	df 4f       	sbci	r29, 0xFF	; 255
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	f8 94       	cli
    3b20:	de bf       	out	0x3e, r29	; 62
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	cd bf       	out	0x3d, r28	; 61
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	1f 91       	pop	r17
    3b2c:	0f 91       	pop	r16
    3b2e:	08 95       	ret

00003b30 <__prologue_saves__>:
    3b30:	2f 92       	push	r2
    3b32:	3f 92       	push	r3
    3b34:	4f 92       	push	r4
    3b36:	5f 92       	push	r5
    3b38:	6f 92       	push	r6
    3b3a:	7f 92       	push	r7
    3b3c:	8f 92       	push	r8
    3b3e:	9f 92       	push	r9
    3b40:	af 92       	push	r10
    3b42:	bf 92       	push	r11
    3b44:	cf 92       	push	r12
    3b46:	df 92       	push	r13
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	ca 1b       	sub	r28, r26
    3b5a:	db 0b       	sbc	r29, r27
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	09 94       	ijmp

00003b68 <__epilogue_restores__>:
    3b68:	2a 88       	ldd	r2, Y+18	; 0x12
    3b6a:	39 88       	ldd	r3, Y+17	; 0x11
    3b6c:	48 88       	ldd	r4, Y+16	; 0x10
    3b6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b70:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b72:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b74:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b76:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b78:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b7a:	b9 84       	ldd	r11, Y+9	; 0x09
    3b7c:	c8 84       	ldd	r12, Y+8	; 0x08
    3b7e:	df 80       	ldd	r13, Y+7	; 0x07
    3b80:	ee 80       	ldd	r14, Y+6	; 0x06
    3b82:	fd 80       	ldd	r15, Y+5	; 0x05
    3b84:	0c 81       	ldd	r16, Y+4	; 0x04
    3b86:	1b 81       	ldd	r17, Y+3	; 0x03
    3b88:	aa 81       	ldd	r26, Y+2	; 0x02
    3b8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3b8c:	ce 0f       	add	r28, r30
    3b8e:	d1 1d       	adc	r29, r1
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	de bf       	out	0x3e, r29	; 62
    3b96:	0f be       	out	0x3f, r0	; 63
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	ed 01       	movw	r28, r26
    3b9c:	08 95       	ret

00003b9e <itoa>:
    3b9e:	fb 01       	movw	r30, r22
    3ba0:	9f 01       	movw	r18, r30
    3ba2:	e8 94       	clt
    3ba4:	42 30       	cpi	r20, 0x02	; 2
    3ba6:	c4 f0       	brlt	.+48     	; 0x3bd8 <itoa+0x3a>
    3ba8:	45 32       	cpi	r20, 0x25	; 37
    3baa:	b4 f4       	brge	.+44     	; 0x3bd8 <itoa+0x3a>
    3bac:	4a 30       	cpi	r20, 0x0A	; 10
    3bae:	29 f4       	brne	.+10     	; 0x3bba <itoa+0x1c>
    3bb0:	97 fb       	bst	r25, 7
    3bb2:	1e f4       	brtc	.+6      	; 0x3bba <itoa+0x1c>
    3bb4:	90 95       	com	r25
    3bb6:	81 95       	neg	r24
    3bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bba:	64 2f       	mov	r22, r20
    3bbc:	77 27       	eor	r23, r23
    3bbe:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__udivmodhi4>
    3bc2:	80 5d       	subi	r24, 0xD0	; 208
    3bc4:	8a 33       	cpi	r24, 0x3A	; 58
    3bc6:	0c f0       	brlt	.+2      	; 0x3bca <itoa+0x2c>
    3bc8:	89 5d       	subi	r24, 0xD9	; 217
    3bca:	81 93       	st	Z+, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	00 97       	sbiw	r24, 0x00	; 0
    3bd0:	a1 f7       	brne	.-24     	; 0x3bba <itoa+0x1c>
    3bd2:	16 f4       	brtc	.+4      	; 0x3bd8 <itoa+0x3a>
    3bd4:	5d e2       	ldi	r21, 0x2D	; 45
    3bd6:	51 93       	st	Z+, r21
    3bd8:	10 82       	st	Z, r1
    3bda:	c9 01       	movw	r24, r18
    3bdc:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <strrev>

00003be0 <strrev>:
    3be0:	dc 01       	movw	r26, r24
    3be2:	fc 01       	movw	r30, r24
    3be4:	67 2f       	mov	r22, r23
    3be6:	71 91       	ld	r23, Z+
    3be8:	77 23       	and	r23, r23
    3bea:	e1 f7       	brne	.-8      	; 0x3be4 <strrev+0x4>
    3bec:	32 97       	sbiw	r30, 0x02	; 2
    3bee:	04 c0       	rjmp	.+8      	; 0x3bf8 <strrev+0x18>
    3bf0:	7c 91       	ld	r23, X
    3bf2:	6d 93       	st	X+, r22
    3bf4:	70 83       	st	Z, r23
    3bf6:	62 91       	ld	r22, -Z
    3bf8:	ae 17       	cp	r26, r30
    3bfa:	bf 07       	cpc	r27, r31
    3bfc:	c8 f3       	brcs	.-14     	; 0x3bf0 <strrev+0x10>
    3bfe:	08 95       	ret

00003c00 <__udivmodhi4>:
    3c00:	aa 1b       	sub	r26, r26
    3c02:	bb 1b       	sub	r27, r27
    3c04:	51 e1       	ldi	r21, 0x11	; 17
    3c06:	07 c0       	rjmp	.+14     	; 0x3c16 <__udivmodhi4_ep>

00003c08 <__udivmodhi4_loop>:
    3c08:	aa 1f       	adc	r26, r26
    3c0a:	bb 1f       	adc	r27, r27
    3c0c:	a6 17       	cp	r26, r22
    3c0e:	b7 07       	cpc	r27, r23
    3c10:	10 f0       	brcs	.+4      	; 0x3c16 <__udivmodhi4_ep>
    3c12:	a6 1b       	sub	r26, r22
    3c14:	b7 0b       	sbc	r27, r23

00003c16 <__udivmodhi4_ep>:
    3c16:	88 1f       	adc	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	5a 95       	dec	r21
    3c1c:	a9 f7       	brne	.-22     	; 0x3c08 <__udivmodhi4_loop>
    3c1e:	80 95       	com	r24
    3c20:	90 95       	com	r25
    3c22:	bc 01       	movw	r22, r24
    3c24:	cd 01       	movw	r24, r26
    3c26:	08 95       	ret

00003c28 <_exit>:
    3c28:	f8 94       	cli

00003c2a <__stop_program>:
    3c2a:	ff cf       	rjmp	.-2      	; 0x3c2a <__stop_program>
