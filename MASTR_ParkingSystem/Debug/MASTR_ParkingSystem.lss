
MASTR_ParkingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003070  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00003070  00003104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800188  00800188  0000322c  2**0
                  ALLOC
  3 .stab         00002d24  00000000  00000000  0000322c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000163c  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000758c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000772c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000791e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b0af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c288  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_1>
       8:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_2>
       c:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <main>
      8a:	0c 94 36 18 	jmp	0x306c	; 0x306c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e7       	ldi	r22, 0x7F	; 127
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 57       	subi	r30, 0x79	; 121
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_VidInit>:
static uint8 ADC_ISRSource ;

uint8 ADC_BusyState = IDLE;

void ADC_VidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	// INTERNAL REFERANCE VOLTAGE (5)V
	SET_BIT(ADMUX ,ADMUX_REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX ,ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24

	// ACTIVE RIGHT ADJUST
	CLEAR_BIT(ADMUX ,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24

	// ADC CLOCK (PRESCALER)
	SET_BIT(ADCSRA ,ADCSRA_ADPS2);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	84 60       	ori	r24, 0x04	; 4
     e6c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA ,ADCSRA_ADPS1);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA ,ADCSRA_ADPS0);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	8c 93       	st	X, r24

	// ENABLE ADC
	SET_BIT(ADCSRA ,ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24

}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_U16ReadChannelSyn>:

// ADC using POLLING (synchronous)
uint16 ADC_U16ReadChannelSyn(uint8 copy_Channel)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	89 83       	std	Y+1, r24	; 0x01
	// clear the mux bit
	ADMUX &=0b11100000;
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	80 7e       	andi	r24, 0xE0	; 224
     eb6:	8c 93       	st	X, r24

	// set the required change into the mux
	ADMUX |= copy_Channel;
     eb8:	a7 e2       	ldi	r26, 0x27	; 39
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e7 e2       	ldi	r30, 0x27	; 39
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	90 81       	ld	r25, Z
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	89 2b       	or	r24, r25
     ec6:	8c 93       	st	X, r24

	// start conversion
	SET_BIT(ADCSRA ,ADCSRA_ADSC);
     ec8:	a6 e2       	ldi	r26, 0x26	; 38
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e6 e2       	ldi	r30, 0x26	; 38
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 64       	ori	r24, 0x40	; 64
     ed4:	8c 93       	st	X, r24

	// polling (busy waiting) until the conversion complete flag is set
	while (GET_BIT(ADCSRA ,ADCSRA_ADIF));
     ed6:	e6 e2       	ldi	r30, 0x26	; 38
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	80 71       	andi	r24, 0x10	; 16
     ee2:	90 70       	andi	r25, 0x00	; 0
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	b9 f7       	brne	.-18     	; 0xed6 <ADC_U16ReadChannelSyn+0x38>

	// clear the conversion complete flag --> set to 1
	SET_BIT(ADCSRA ,ADCSRA_ADIF);
     ee8:	a6 e2       	ldi	r26, 0x26	; 38
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e6 e2       	ldi	r30, 0x26	; 38
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 61       	ori	r24, 0x10	; 16
     ef4:	8c 93       	st	X, r24

	// return the conversion reading
	return ADCL_H;
     ef6:	e4 e2       	ldi	r30, 0x24	; 36
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01

}
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <ADC_U8ReadChannelAsyn>:

// ADC using INTRRUPT (Asynchronous)
uint8 ADC_U8ReadChannelAsyn(uint8 copy_Channel , uint8* copy_Reading ,void(*copy_pvIntrFunc)(void))
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <ADC_U8ReadChannelAsyn+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <ADC_U8ReadChannelAsyn+0x8>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <ADC_U8ReadChannelAsyn+0xa>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	8a 83       	std	Y+2, r24	; 0x02
     f16:	7c 83       	std	Y+4, r23	; 0x04
     f18:	6b 83       	std	Y+3, r22	; 0x03
     f1a:	5e 83       	std	Y+6, r21	; 0x06
     f1c:	4d 83       	std	Y+5, r20	; 0x05
	// variable to hold the error state
	uint8 Error_State = NO_ERROR_STATE;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	89 83       	std	Y+1, r24	; 0x01

	if(copy_Reading == NULL && copy_pvIntrFunc == NULL)
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	39 f4       	brne	.+14     	; 0xf38 <ADC_U8ReadChannelAsyn+0x32>
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	19 f4       	brne	.+6      	; 0xf38 <ADC_U8ReadChannelAsyn+0x32>
	{
		Error_State = NULLPOINTER;
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	2e c0       	rjmp	.+92     	; 0xf94 <ADC_U8ReadChannelAsyn+0x8e>
	}
	else
	{
		/* make ADC busy in order not to work until being ideal*/
		ADC_BusyState = BUSY;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 91 01 	sts	0x0191, r24

		/* make ISR source : single channel asynchronous*/
		ADC_ISRSource = SINGLE_CHANNEL_ASYNCH;
     f3e:	10 92 94 01 	sts	0x0194, r1

		// initialized the reading variable global
		ADC_Reading = copy_Reading;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	90 93 89 01 	sts	0x0189, r25
     f4a:	80 93 88 01 	sts	0x0188, r24

		// initialized the call back function global
		ADC_pvCallBackFunc = copy_pvIntrFunc;
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	90 93 8b 01 	sts	0x018B, r25
     f56:	80 93 8a 01 	sts	0x018A, r24

		// clear the mux bit
		ADMUX &=0b11100000;
     f5a:	a7 e2       	ldi	r26, 0x27	; 39
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e7 e2       	ldi	r30, 0x27	; 39
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 7e       	andi	r24, 0xE0	; 224
     f66:	8c 93       	st	X, r24


		// set the required change into the mux
		ADMUX |= copy_Channel;
     f68:	a7 e2       	ldi	r26, 0x27	; 39
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e7 e2       	ldi	r30, 0x27	; 39
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	90 81       	ld	r25, Z
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	89 2b       	or	r24, r25
     f76:	8c 93       	st	X, r24

		// start conversion
		SET_BIT(ADCSRA ,ADCSRA_ADSC);
     f78:	a6 e2       	ldi	r26, 0x26	; 38
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e6 e2       	ldi	r30, 0x26	; 38
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 64       	ori	r24, 0x40	; 64
     f84:	8c 93       	st	X, r24

		// ENABLE THE INTTERUPT
		SET_BIT(ADCSRA ,ADCSRA_ADIE);
     f86:	a6 e2       	ldi	r26, 0x26	; 38
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e6 e2       	ldi	r30, 0x26	; 38
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 60       	ori	r24, 0x08	; 8
     f92:	8c 93       	st	X, r24
	}

	return Error_State;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
}
     f96:	26 96       	adiw	r28, 0x06	; 6
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <ADC_U8ReadChainAsyn>:
/* ADC using INTRRUPT (Asynchronous) FOR CHAIN  */
uint8 ADC_U8ReadChainAsyn(Chain_type * copy_chain)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	00 d0       	rcall	.+0      	; 0xfae <ADC_U8ReadChainAsyn+0x6>
     fae:	0f 92       	push	r0
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9b 83       	std	Y+3, r25	; 0x03
     fb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_State = NO_ERROR_STATE;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01

	/*check Null pointer*/
	if(copy_chain == NULL)
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	9b 81       	ldd	r25, Y+3	; 0x03
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	19 f4       	brne	.+6      	; 0xfca <ADC_U8ReadChainAsyn+0x22>
	{
		Error_State = NULLPOINTER;
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	56 c0       	rjmp	.+172    	; 0x1076 <ADC_U8ReadChainAsyn+0xce>
	}
	else
	{
		if(ADC_BusyState == IDLE)
     fca:	80 91 91 01 	lds	r24, 0x0191
     fce:	88 23       	and	r24, r24
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <ADC_U8ReadChainAsyn+0x2c>
     fd2:	51 c0       	rjmp	.+162    	; 0x1076 <ADC_U8ReadChainAsyn+0xce>
		{
			/* make ADC busy in order not to work until being ideal*/
			ADC_BusyState = BUSY;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	80 93 91 01 	sts	0x0191, r24

			/* make ISR source : chain asynchronous*/
			ADC_ISRSource = CHAIN_ASYNCH;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 94 01 	sts	0x0194, r24

			/* initialize chain channel array*/
			ADC_ChainChannelArr = copy_chain->Channel;
     fe0:	ea 81       	ldd	r30, Y+2	; 0x02
     fe2:	fb 81       	ldd	r31, Y+3	; 0x03
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	90 93 8d 01 	sts	0x018D, r25
     fec:	80 93 8c 01 	sts	0x018C, r24

			/* initialize chain Result array*/
			ADC_ChainResultArr = copy_chain->Result;
     ff0:	ea 81       	ldd	r30, Y+2	; 0x02
     ff2:	fb 81       	ldd	r31, Y+3	; 0x03
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	90 93 8f 01 	sts	0x018F, r25
     ffc:	80 93 8e 01 	sts	0x018E, r24

			/* initialize chain Size*/
			ADC_ChainSize = copy_chain->Size;
    1000:	ea 81       	ldd	r30, Y+2	; 0x02
    1002:	fb 81       	ldd	r31, Y+3	; 0x03
    1004:	84 81       	ldd	r24, Z+4	; 0x04
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	90 93 93 01 	sts	0x0193, r25
    100e:	80 93 92 01 	sts	0x0192, r24

			/* initialize chain Notification function */
			ADC_pvCallBackFunc = copy_chain->NotficationFunc;
    1012:	ea 81       	ldd	r30, Y+2	; 0x02
    1014:	fb 81       	ldd	r31, Y+3	; 0x03
    1016:	85 81       	ldd	r24, Z+5	; 0x05
    1018:	96 81       	ldd	r25, Z+6	; 0x06
    101a:	90 93 8b 01 	sts	0x018B, r25
    101e:	80 93 8a 01 	sts	0x018A, r24

			/* initialize current conversion index  */
			ADC_ChainConvesionIndex = 0;
    1022:	10 92 90 01 	sts	0x0190, r1

			// clear the mux bit (first five bit to select channel)
			ADMUX &= 0b11100000;
    1026:	a7 e2       	ldi	r26, 0x27	; 39
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e7 e2       	ldi	r30, 0x27	; 39
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	80 7e       	andi	r24, 0xE0	; 224
    1032:	8c 93       	st	X, r24
			/* select the first channel */
			ADMUX |= ADC_ChainChannelArr[ADC_ChainConvesionIndex];
    1034:	a7 e2       	ldi	r26, 0x27	; 39
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e2       	ldi	r30, 0x27	; 39
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	40 81       	ld	r20, Z
    103e:	20 91 8c 01 	lds	r18, 0x018C
    1042:	30 91 8d 01 	lds	r19, 0x018D
    1046:	80 91 90 01 	lds	r24, 0x0190
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	e8 0f       	add	r30, r24
    1052:	f9 1f       	adc	r31, r25
    1054:	80 81       	ld	r24, Z
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24

			/* start conversion */
			SET_BIT(ADCSRA ,ADCSRA_ADSC);
    105a:	a6 e2       	ldi	r26, 0x26	; 38
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e6 e2       	ldi	r30, 0x26	; 38
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	8c 93       	st	X, r24

			/*enable conversion complete interrupt */
			SET_BIT(ADCSRA ,ADCSRA_ADIE);
    1068:	a6 e2       	ldi	r26, 0x26	; 38
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e6 e2       	ldi	r30, 0x26	; 38
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 60       	ori	r24, 0x08	; 8
    1074:	8c 93       	st	X, r24
		}

	}

	return Error_State;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <__vector_16>:

// ISR of ADC
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    1084:	1f 92       	push	r1
    1086:	0f 92       	push	r0
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	0f 92       	push	r0
    108c:	11 24       	eor	r1, r1
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	if (ADC_ISRSource == SINGLE_CHANNEL_ASYNCH)
    10ae:	80 91 94 01 	lds	r24, 0x0194
    10b2:	88 23       	and	r24, r24
    10b4:	b1 f4       	brne	.+44     	; 0x10e2 <__vector_16+0x5e>
	{
		/* return the conversion reading */
		*ADC_Reading = ADCL_H;
    10b6:	a0 91 88 01 	lds	r26, 0x0188
    10ba:	b0 91 89 01 	lds	r27, 0x0189
    10be:	e4 e2       	ldi	r30, 0x24	; 36
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	8c 93       	st	X, r24

		/* invoke the call back function */
		ADC_pvCallBackFunc();
    10c8:	e0 91 8a 01 	lds	r30, 0x018A
    10cc:	f0 91 8b 01 	lds	r31, 0x018B
    10d0:	09 95       	icall

		// disable ADC conversion complete  the interrupt
		CLEAR_BIT(ADCSRA ,ADCSRA_ADIE);
    10d2:	a6 e2       	ldi	r26, 0x26	; 38
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e6 e2       	ldi	r30, 0x26	; 38
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	87 7f       	andi	r24, 0xF7	; 247
    10de:	8c 93       	st	X, r24
    10e0:	5a c0       	rjmp	.+180    	; 0x1196 <__vector_16+0x112>
	}
	else if(ADC_ISRSource == CHAIN_ASYNCH)
    10e2:	80 91 94 01 	lds	r24, 0x0194
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	09 f0       	breq	.+2      	; 0x10ec <__vector_16+0x68>
    10ea:	55 c0       	rjmp	.+170    	; 0x1196 <__vector_16+0x112>
	{
		/* read current conversion */
		ADC_ChainResultArr[ADC_ChainConvesionIndex] = ADCL_H;
    10ec:	20 91 8e 01 	lds	r18, 0x018E
    10f0:	30 91 8f 01 	lds	r19, 0x018F
    10f4:	80 91 90 01 	lds	r24, 0x0190
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	d9 01       	movw	r26, r18
    1102:	a8 0f       	add	r26, r24
    1104:	b9 1f       	adc	r27, r25
    1106:	e4 e2       	ldi	r30, 0x24	; 36
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	9c 93       	st	X, r25
    1112:	8e 93       	st	-X, r24

		/* increment the index*/
		ADC_ChainConvesionIndex++;
    1114:	80 91 90 01 	lds	r24, 0x0190
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	80 93 90 01 	sts	0x0190, r24

		/* check the chain is finished or not */
		if(ADC_ChainConvesionIndex == ADC_ChainSize)
    111e:	80 91 90 01 	lds	r24, 0x0190
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9c 01       	movw	r18, r24
    1128:	80 91 92 01 	lds	r24, 0x0192
    112c:	90 91 93 01 	lds	r25, 0x0193
    1130:	28 17       	cp	r18, r24
    1132:	39 07       	cpc	r19, r25
    1134:	79 f4       	brne	.+30     	; 0x1154 <__vector_16+0xd0>
		{
			/* the chain is finished */
			/* make ADC idle */
			ADC_BusyState = IDLE;
    1136:	10 92 91 01 	sts	0x0191, r1

			/* invoke the callback notification function */
			ADC_pvCallBackFunc();
    113a:	e0 91 8a 01 	lds	r30, 0x018A
    113e:	f0 91 8b 01 	lds	r31, 0x018B
    1142:	09 95       	icall

			/* disable conversion complete interrupt*/
			CLEAR_BIT(ADCSRA ,ADCSRA_ADIE);
    1144:	a6 e2       	ldi	r26, 0x26	; 38
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e6 e2       	ldi	r30, 0x26	; 38
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	87 7f       	andi	r24, 0xF7	; 247
    1150:	8c 93       	st	X, r24
    1152:	21 c0       	rjmp	.+66     	; 0x1196 <__vector_16+0x112>
		}
		else
		{
			/* the chain is not finished */
			// clear the mux bit (first five bit to select channel)
			ADMUX &= 0b11100000;
    1154:	a7 e2       	ldi	r26, 0x27	; 39
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e2       	ldi	r30, 0x27	; 39
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 7e       	andi	r24, 0xE0	; 224
    1160:	8c 93       	st	X, r24
			/* select the first channel */
			ADMUX |= ADC_ChainChannelArr[ADC_ChainConvesionIndex];
    1162:	a7 e2       	ldi	r26, 0x27	; 39
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 e2       	ldi	r30, 0x27	; 39
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	40 81       	ld	r20, Z
    116c:	20 91 8c 01 	lds	r18, 0x018C
    1170:	30 91 8d 01 	lds	r19, 0x018D
    1174:	80 91 90 01 	lds	r24, 0x0190
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	f9 01       	movw	r30, r18
    117e:	e8 0f       	add	r30, r24
    1180:	f9 1f       	adc	r31, r25
    1182:	80 81       	ld	r24, Z
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24

			/* start conversion */
			SET_BIT(ADCSRA ,ADCSRA_ADSC);
    1188:	a6 e2       	ldi	r26, 0x26	; 38
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e6 e2       	ldi	r30, 0x26	; 38
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 64       	ori	r24, 0x40	; 64
    1194:	8c 93       	st	X, r24

		}

	}

}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <DIO_VidSetPinDirection>:
 ***************************************************************************************
 */

//******************************* setting Pin Direction ********************************
void DIO_VidSetPinDirection(uint8 Copy_Port , uint8 Copy_Pin , uint8 Copy_Direction)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	27 97       	sbiw	r28, 0x07	; 7
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	6a 83       	std	Y+2, r22	; 0x02
    11d4:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_Direction == Input)
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 23       	and	r24, r24
    11da:	09 f0       	breq	.+2      	; 0x11de <DIO_VidSetPinDirection+0x22>
    11dc:	74 c0       	rjmp	.+232    	; 0x12c6 <DIO_VidSetPinDirection+0x10a>
	{
		switch(Copy_Port)
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3f 83       	std	Y+7, r19	; 0x07
    11e6:	2e 83       	std	Y+6, r18	; 0x06
    11e8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ea:	9f 81       	ldd	r25, Y+7	; 0x07
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	59 f1       	breq	.+86     	; 0x1248 <DIO_VidSetPinDirection+0x8c>
    11f2:	2e 81       	ldd	r18, Y+6	; 0x06
    11f4:	3f 81       	ldd	r19, Y+7	; 0x07
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	2c f4       	brge	.+10     	; 0x1206 <DIO_VidSetPinDirection+0x4a>
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	69 f0       	breq	.+26     	; 0x121e <DIO_VidSetPinDirection+0x62>
    1204:	d2 c0       	rjmp	.+420    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
    1206:	2e 81       	ldd	r18, Y+6	; 0x06
    1208:	3f 81       	ldd	r19, Y+7	; 0x07
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	89 f1       	breq	.+98     	; 0x1272 <DIO_VidSetPinDirection+0xb6>
    1210:	8e 81       	ldd	r24, Y+6	; 0x06
    1212:	9f 81       	ldd	r25, Y+7	; 0x07
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <DIO_VidSetPinDirection+0x60>
    121a:	40 c0       	rjmp	.+128    	; 0x129c <DIO_VidSetPinDirection+0xe0>
    121c:	c6 c0       	rjmp	.+396    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
		{
		case Port_A:
			CLEAR_BIT(DDRA,Copy_Pin);
    121e:	aa e3       	ldi	r26, 0x3A	; 58
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ea e3       	ldi	r30, 0x3A	; 58
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_VidSetPinDirection+0x80>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <DIO_VidSetPinDirection+0x7c>
    1240:	80 95       	com	r24
    1242:	84 23       	and	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	b1 c0       	rjmp	.+354    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_B:
			CLEAR_BIT(DDRB,Copy_Pin);
    1248:	a7 e3       	ldi	r26, 0x37	; 55
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e7 e3       	ldi	r30, 0x37	; 55
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_VidSetPinDirection+0xaa>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_VidSetPinDirection+0xa6>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	9c c0       	rjmp	.+312    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_C:
			CLEAR_BIT(DDRC,Copy_Pin);
    1272:	a4 e3       	ldi	r26, 0x34	; 52
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e4 e3       	ldi	r30, 0x34	; 52
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_VidSetPinDirection+0xd4>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_VidSetPinDirection+0xd0>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	87 c0       	rjmp	.+270    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_D:
			CLEAR_BIT(DDRD,Copy_Pin);
    129c:	a1 e3       	ldi	r26, 0x31	; 49
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_VidSetPinDirection+0xfe>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_VidSetPinDirection+0xfa>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	72 c0       	rjmp	.+228    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
			break;
		}
	}
	else if(Copy_Direction == Output)
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <DIO_VidSetPinDirection+0x112>
    12cc:	6e c0       	rjmp	.+220    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
	{
		switch(Copy_Port)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3d 83       	std	Y+5, r19	; 0x05
    12d6:	2c 83       	std	Y+4, r18	; 0x04
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	49 f1       	breq	.+82     	; 0x1334 <DIO_VidSetPinDirection+0x178>
    12e2:	2c 81       	ldd	r18, Y+4	; 0x04
    12e4:	3d 81       	ldd	r19, Y+5	; 0x05
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <DIO_VidSetPinDirection+0x13a>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	61 f0       	breq	.+24     	; 0x130c <DIO_VidSetPinDirection+0x150>
    12f4:	5a c0       	rjmp	.+180    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
    12f6:	2c 81       	ldd	r18, Y+4	; 0x04
    12f8:	3d 81       	ldd	r19, Y+5	; 0x05
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	71 f1       	breq	.+92     	; 0x135c <DIO_VidSetPinDirection+0x1a0>
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	91 05       	cpc	r25, r1
    1308:	e9 f1       	breq	.+122    	; 0x1384 <DIO_VidSetPinDirection+0x1c8>
    130a:	4f c0       	rjmp	.+158    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
		{
		case Port_A:
			SET_BIT(DDRA,Copy_Pin);
    130c:	aa e3       	ldi	r26, 0x3A	; 58
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ea e3       	ldi	r30, 0x3A	; 58
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_VidSetPinDirection+0x16e>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_VidSetPinDirection+0x16a>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	3b c0       	rjmp	.+118    	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_B:
			SET_BIT(DDRB,Copy_Pin);
    1334:	a7 e3       	ldi	r26, 0x37	; 55
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e7 e3       	ldi	r30, 0x37	; 55
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_VidSetPinDirection+0x196>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_VidSetPinDirection+0x192>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	27 c0       	rjmp	.+78     	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_C:
			SET_BIT(DDRC,Copy_Pin);
    135c:	a4 e3       	ldi	r26, 0x34	; 52
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 e3       	ldi	r30, 0x34	; 52
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_VidSetPinDirection+0x1be>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <DIO_VidSetPinDirection+0x1ba>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	13 c0       	rjmp	.+38     	; 0x13aa <DIO_VidSetPinDirection+0x1ee>
			break;
		case Port_D:
			SET_BIT(DDRD,Copy_Pin);
    1384:	a1 e3       	ldi	r26, 0x31	; 49
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e1 e3       	ldi	r30, 0x31	; 49
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_VidSetPinDirection+0x1e6>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_VidSetPinDirection+0x1e2>
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
			break;
		}
	}
}
    13aa:	27 96       	adiw	r28, 0x07	; 7
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <DIO_VidSetPinValue>:

//******************************** setting Pin Value ***********************************
void DIO_VidSetPinValue(uint8 Copy_Port , uint8 Copy_Pin ,uint8 Copy_Value)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	27 97       	sbiw	r28, 0x07	; 7
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	6a 83       	std	Y+2, r22	; 0x02
    13d4:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_Value == PinHigh)
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	09 f0       	breq	.+2      	; 0x13de <DIO_VidSetPinValue+0x22>
    13dc:	6f c0       	rjmp	.+222    	; 0x14bc <DIO_VidSetPinValue+0x100>
	{
		switch(Copy_Port)
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3f 83       	std	Y+7, r19	; 0x07
    13e6:	2e 83       	std	Y+6, r18	; 0x06
    13e8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ea:	9f 81       	ldd	r25, Y+7	; 0x07
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	49 f1       	breq	.+82     	; 0x1444 <DIO_VidSetPinValue+0x88>
    13f2:	2e 81       	ldd	r18, Y+6	; 0x06
    13f4:	3f 81       	ldd	r19, Y+7	; 0x07
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	2c f4       	brge	.+10     	; 0x1406 <DIO_VidSetPinValue+0x4a>
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	61 f0       	breq	.+24     	; 0x141c <DIO_VidSetPinValue+0x60>
    1404:	d2 c0       	rjmp	.+420    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
    1406:	2e 81       	ldd	r18, Y+6	; 0x06
    1408:	3f 81       	ldd	r19, Y+7	; 0x07
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	71 f1       	breq	.+92     	; 0x146c <DIO_VidSetPinValue+0xb0>
    1410:	8e 81       	ldd	r24, Y+6	; 0x06
    1412:	9f 81       	ldd	r25, Y+7	; 0x07
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	91 05       	cpc	r25, r1
    1418:	e9 f1       	breq	.+122    	; 0x1494 <DIO_VidSetPinValue+0xd8>
    141a:	c7 c0       	rjmp	.+398    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
		{
		case Port_A:
			SET_BIT(PORTA,Copy_Pin);
    141c:	ab e3       	ldi	r26, 0x3B	; 59
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	eb e3       	ldi	r30, 0x3B	; 59
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_VidSetPinValue+0x7e>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_VidSetPinValue+0x7a>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	b3 c0       	rjmp	.+358    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_B:
			SET_BIT(PORTB,Copy_Pin);
    1444:	a8 e3       	ldi	r26, 0x38	; 56
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e8 e3       	ldi	r30, 0x38	; 56
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_VidSetPinValue+0xa6>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_VidSetPinValue+0xa2>
    1466:	84 2b       	or	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	9f c0       	rjmp	.+318    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_C:
			SET_BIT(PORTC,Copy_Pin);
    146c:	a5 e3       	ldi	r26, 0x35	; 53
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e5 e3       	ldi	r30, 0x35	; 53
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_VidSetPinValue+0xce>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_VidSetPinValue+0xca>
    148e:	84 2b       	or	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	8b c0       	rjmp	.+278    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_D:
			SET_BIT(PORTD,Copy_Pin);
    1494:	a2 e3       	ldi	r26, 0x32	; 50
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e2 e3       	ldi	r30, 0x32	; 50
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_VidSetPinValue+0xf6>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_VidSetPinValue+0xf2>
    14b6:	84 2b       	or	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	77 c0       	rjmp	.+238    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
			break;
		}
	}

	else if(Copy_Value == PinLow)
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 23       	and	r24, r24
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <DIO_VidSetPinValue+0x108>
    14c2:	73 c0       	rjmp	.+230    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
	{
		switch(Copy_Port)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3d 83       	std	Y+5, r19	; 0x05
    14cc:	2c 83       	std	Y+4, r18	; 0x04
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	59 f1       	breq	.+86     	; 0x152e <DIO_VidSetPinValue+0x172>
    14d8:	2c 81       	ldd	r18, Y+4	; 0x04
    14da:	3d 81       	ldd	r19, Y+5	; 0x05
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	2c f4       	brge	.+10     	; 0x14ec <DIO_VidSetPinValue+0x130>
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	69 f0       	breq	.+26     	; 0x1504 <DIO_VidSetPinValue+0x148>
    14ea:	5f c0       	rjmp	.+190    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	89 f1       	breq	.+98     	; 0x1558 <DIO_VidSetPinValue+0x19c>
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <DIO_VidSetPinValue+0x146>
    1500:	40 c0       	rjmp	.+128    	; 0x1582 <DIO_VidSetPinValue+0x1c6>
    1502:	53 c0       	rjmp	.+166    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
		{
		case Port_A:
			CLEAR_BIT(PORTA,Copy_Pin);
    1504:	ab e3       	ldi	r26, 0x3B	; 59
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_VidSetPinValue+0x166>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_VidSetPinValue+0x162>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	3e c0       	rjmp	.+124    	; 0x15aa <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_B:
			CLEAR_BIT(PORTB,Copy_Pin);
    152e:	a8 e3       	ldi	r26, 0x38	; 56
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e8 e3       	ldi	r30, 0x38	; 56
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_VidSetPinValue+0x190>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_VidSetPinValue+0x18c>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	29 c0       	rjmp	.+82     	; 0x15aa <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_C:
			CLEAR_BIT(PORTC,Copy_Pin);
    1558:	a5 e3       	ldi	r26, 0x35	; 53
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e3       	ldi	r30, 0x35	; 53
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_VidSetPinValue+0x1ba>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_VidSetPinValue+0x1b6>
    157a:	80 95       	com	r24
    157c:	84 23       	and	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <DIO_VidSetPinValue+0x1ee>
			break;
		case Port_D:
			CLEAR_BIT(PORTD,Copy_Pin);
    1582:	a2 e3       	ldi	r26, 0x32	; 50
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e2 e3       	ldi	r30, 0x32	; 50
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_VidSetPinValue+0x1e4>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_VidSetPinValue+0x1e0>
    15a4:	80 95       	com	r24
    15a6:	84 23       	and	r24, r20
    15a8:	8c 93       	st	X, r24
			break;
		}
	}
}
    15aa:	27 96       	adiw	r28, 0x07	; 7
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <DIO_VidGetPinValue>:


//********************************* Getting Pin Value *********************************
void DIO_VidGetPinValue(uint8 Copy_Port , uint8 Copy_Pin ,uint8 *Ptr_Data)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <DIO_VidGetPinValue+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_VidGetPinValue+0x8>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <DIO_VidGetPinValue+0xa>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	6a 83       	std	Y+2, r22	; 0x02
    15ce:	5c 83       	std	Y+4, r21	; 0x04
    15d0:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_Port)
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3e 83       	std	Y+6, r19	; 0x06
    15da:	2d 83       	std	Y+5, r18	; 0x05
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	91 05       	cpc	r25, r1
    15e4:	49 f1       	breq	.+82     	; 0x1638 <DIO_VidGetPinValue+0x7c>
    15e6:	2d 81       	ldd	r18, Y+5	; 0x05
    15e8:	3e 81       	ldd	r19, Y+6	; 0x06
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	2c f4       	brge	.+10     	; 0x15fa <DIO_VidGetPinValue+0x3e>
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	61 f0       	breq	.+24     	; 0x1610 <DIO_VidGetPinValue+0x54>
    15f8:	5a c0       	rjmp	.+180    	; 0x16ae <DIO_VidGetPinValue+0xf2>
    15fa:	2d 81       	ldd	r18, Y+5	; 0x05
    15fc:	3e 81       	ldd	r19, Y+6	; 0x06
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	71 f1       	breq	.+92     	; 0x1660 <DIO_VidGetPinValue+0xa4>
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	e9 f1       	breq	.+122    	; 0x1688 <DIO_VidGetPinValue+0xcc>
    160e:	4f c0       	rjmp	.+158    	; 0x16ae <DIO_VidGetPinValue+0xf2>
	{
	case Port_A:
		*Ptr_Data = GET_BIT(PINA,Copy_Pin);
    1610:	e9 e3       	ldi	r30, 0x39	; 57
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_VidGetPinValue+0x6e>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_VidGetPinValue+0x6a>
    162e:	84 23       	and	r24, r20
    1630:	eb 81       	ldd	r30, Y+3	; 0x03
    1632:	fc 81       	ldd	r31, Y+4	; 0x04
    1634:	80 83       	st	Z, r24
    1636:	3b c0       	rjmp	.+118    	; 0x16ae <DIO_VidGetPinValue+0xf2>
		break;
	case Port_B:
		*Ptr_Data = GET_BIT(PINB,Copy_Pin);
    1638:	e6 e3       	ldi	r30, 0x36	; 54
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_VidGetPinValue+0x96>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_VidGetPinValue+0x92>
    1656:	84 23       	and	r24, r20
    1658:	eb 81       	ldd	r30, Y+3	; 0x03
    165a:	fc 81       	ldd	r31, Y+4	; 0x04
    165c:	80 83       	st	Z, r24
    165e:	27 c0       	rjmp	.+78     	; 0x16ae <DIO_VidGetPinValue+0xf2>
		break;
	case Port_C:
		*Ptr_Data = GET_BIT(PINC,Copy_Pin);
    1660:	e3 e3       	ldi	r30, 0x33	; 51
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_VidGetPinValue+0xbe>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_VidGetPinValue+0xba>
    167e:	84 23       	and	r24, r20
    1680:	eb 81       	ldd	r30, Y+3	; 0x03
    1682:	fc 81       	ldd	r31, Y+4	; 0x04
    1684:	80 83       	st	Z, r24
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <DIO_VidGetPinValue+0xf2>
		break;
	case Port_D:
		*Ptr_Data = GET_BIT(PIND,Copy_Pin);
    1688:	e0 e3       	ldi	r30, 0x30	; 48
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_VidGetPinValue+0xe6>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_VidGetPinValue+0xe2>
    16a6:	84 23       	and	r24, r20
    16a8:	eb 81       	ldd	r30, Y+3	; 0x03
    16aa:	fc 81       	ldd	r31, Y+4	; 0x04
    16ac:	80 83       	st	Z, r24
		break;
	}
}
    16ae:	26 96       	adiw	r28, 0x06	; 6
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <DIO_VidSetPortDirection>:
 ***************************************************************************************
 */

//******************************* setting Port Direction *******************************
void DIO_VidSetPortDirection(uint8 Copy_Port , uint8 Copy_Direction)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <DIO_VidSetPortDirection+0x6>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <DIO_VidSetPortDirection+0x8>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <DIO_VidSetPortDirection+0xa>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_Direction == Input)
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	88 23       	and	r24, r24
    16d6:	79 f5       	brne	.+94     	; 0x1736 <DIO_VidSetPortDirection+0x76>
	{
		switch(Copy_Port)
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3e 83       	std	Y+6, r19	; 0x06
    16e0:	2d 83       	std	Y+5, r18	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	c9 f0       	breq	.+50     	; 0x171e <DIO_VidSetPortDirection+0x5e>
    16ec:	2d 81       	ldd	r18, Y+5	; 0x05
    16ee:	3e 81       	ldd	r19, Y+6	; 0x06
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <DIO_VidSetPortDirection+0x40>
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <DIO_VidSetPortDirection+0x56>
    16fe:	50 c0       	rjmp	.+160    	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
    1700:	2d 81       	ldd	r18, Y+5	; 0x05
    1702:	3e 81       	ldd	r19, Y+6	; 0x06
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	71 f0       	breq	.+28     	; 0x1726 <DIO_VidSetPortDirection+0x66>
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	69 f0       	breq	.+26     	; 0x172e <DIO_VidSetPortDirection+0x6e>
    1714:	45 c0       	rjmp	.+138    	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
		{
		case Port_A:
			DDRA = 0x00;
    1716:	ea e3       	ldi	r30, 0x3A	; 58
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	10 82       	st	Z, r1
    171c:	41 c0       	rjmp	.+130    	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_B:
			DDRB = 0x00;
    171e:	e7 e3       	ldi	r30, 0x37	; 55
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	10 82       	st	Z, r1
    1724:	3d c0       	rjmp	.+122    	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_C:
			DDRC = 0x00;
    1726:	e4 e3       	ldi	r30, 0x34	; 52
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	10 82       	st	Z, r1
    172c:	39 c0       	rjmp	.+114    	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_D:
			DDRD = 0x00;
    172e:	e1 e3       	ldi	r30, 0x31	; 49
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	10 82       	st	Z, r1
    1734:	35 c0       	rjmp	.+106    	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
			break;
		}
	}
	else if(Copy_Direction == Output)
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 f5       	brne	.+100    	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
	{
		switch(Copy_Port)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3c 83       	std	Y+4, r19	; 0x04
    1744:	2b 83       	std	Y+3, r18	; 0x03
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	d1 f0       	breq	.+52     	; 0x1784 <DIO_VidSetPortDirection+0xc4>
    1750:	2b 81       	ldd	r18, Y+3	; 0x03
    1752:	3c 81       	ldd	r19, Y+4	; 0x04
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	2c f4       	brge	.+10     	; 0x1764 <DIO_VidSetPortDirection+0xa4>
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	61 f0       	breq	.+24     	; 0x177a <DIO_VidSetPortDirection+0xba>
    1762:	1e c0       	rjmp	.+60     	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
    1764:	2b 81       	ldd	r18, Y+3	; 0x03
    1766:	3c 81       	ldd	r19, Y+4	; 0x04
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <DIO_VidSetPortDirection+0xce>
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	81 f0       	breq	.+32     	; 0x1798 <DIO_VidSetPortDirection+0xd8>
    1778:	13 c0       	rjmp	.+38     	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
		{
		case Port_A:
			DDRA = 0xFF;
    177a:	ea e3       	ldi	r30, 0x3A	; 58
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	80 83       	st	Z, r24
    1782:	0e c0       	rjmp	.+28     	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_B:
			DDRB = 0xFF;
    1784:	e7 e3       	ldi	r30, 0x37	; 55
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	80 83       	st	Z, r24
    178c:	09 c0       	rjmp	.+18     	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_C:
			DDRC = 0xFF;
    178e:	e4 e3       	ldi	r30, 0x34	; 52
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	80 83       	st	Z, r24
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <DIO_VidSetPortDirection+0xe0>
			break;
		case Port_D:
			DDRD = 0xFF;
    1798:	e1 e3       	ldi	r30, 0x31	; 49
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	80 83       	st	Z, r24
			break;
		}
	}
}
    17a0:	26 96       	adiw	r28, 0x06	; 6
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <DIO_VidSetPortValue>:


//******************************* setting Port Value **********************************
void DIO_VidSetPortValue(uint8 Copy_Port , uint8 Copy_Value)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_VidSetPortValue+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <DIO_VidSetPortValue+0x8>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_Port)
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3c 83       	std	Y+4, r19	; 0x04
    17ca:	2b 83       	std	Y+3, r18	; 0x03
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 05       	cpc	r25, r1
    17d4:	d1 f0       	breq	.+52     	; 0x180a <DIO_VidSetPortValue+0x58>
    17d6:	2b 81       	ldd	r18, Y+3	; 0x03
    17d8:	3c 81       	ldd	r19, Y+4	; 0x04
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	2c f4       	brge	.+10     	; 0x17ea <DIO_VidSetPortValue+0x38>
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	61 f0       	breq	.+24     	; 0x1800 <DIO_VidSetPortValue+0x4e>
    17e8:	1e c0       	rjmp	.+60     	; 0x1826 <DIO_VidSetPortValue+0x74>
    17ea:	2b 81       	ldd	r18, Y+3	; 0x03
    17ec:	3c 81       	ldd	r19, Y+4	; 0x04
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	81 f0       	breq	.+32     	; 0x1814 <DIO_VidSetPortValue+0x62>
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	91 05       	cpc	r25, r1
    17fc:	81 f0       	breq	.+32     	; 0x181e <DIO_VidSetPortValue+0x6c>
    17fe:	13 c0       	rjmp	.+38     	; 0x1826 <DIO_VidSetPortValue+0x74>
		{
		case Port_A:
			PORTA = Copy_Value;
    1800:	eb e3       	ldi	r30, 0x3B	; 59
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	80 83       	st	Z, r24
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <DIO_VidSetPortValue+0x74>
			break;
		case Port_B:
			PORTB = Copy_Value;
    180a:	e8 e3       	ldi	r30, 0x38	; 56
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	80 83       	st	Z, r24
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <DIO_VidSetPortValue+0x74>
			break;
		case Port_C:
			PORTC = Copy_Value;
    1814:	e5 e3       	ldi	r30, 0x35	; 53
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	80 83       	st	Z, r24
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <DIO_VidSetPortValue+0x74>
			break;
		case Port_D:
			PORTD = Copy_Value;
    181e:	e2 e3       	ldi	r30, 0x32	; 50
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	80 83       	st	Z, r24
			break;
		}
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <DIO_VidGetPortValue>:

//******************************* Getting Port Value **********************************
void DIO_VidGetPortValue(uint8 Copy_Port , uint8 *Ptr_Data)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <DIO_VidGetPortValue+0x6>
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_VidGetPortValue+0x8>
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	7b 83       	std	Y+3, r23	; 0x03
    1846:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_Port)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	3d 83       	std	Y+5, r19	; 0x05
    1850:	2c 83       	std	Y+4, r18	; 0x04
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	91 05       	cpc	r25, r1
    185a:	e1 f0       	breq	.+56     	; 0x1894 <DIO_VidGetPortValue+0x60>
    185c:	2c 81       	ldd	r18, Y+4	; 0x04
    185e:	3d 81       	ldd	r19, Y+5	; 0x05
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	2c f4       	brge	.+10     	; 0x1870 <DIO_VidGetPortValue+0x3c>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	61 f0       	breq	.+24     	; 0x1886 <DIO_VidGetPortValue+0x52>
    186e:	26 c0       	rjmp	.+76     	; 0x18bc <DIO_VidGetPortValue+0x88>
    1870:	2c 81       	ldd	r18, Y+4	; 0x04
    1872:	3d 81       	ldd	r19, Y+5	; 0x05
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	a1 f0       	breq	.+40     	; 0x18a2 <DIO_VidGetPortValue+0x6e>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	91 05       	cpc	r25, r1
    1882:	b1 f0       	breq	.+44     	; 0x18b0 <DIO_VidGetPortValue+0x7c>
    1884:	1b c0       	rjmp	.+54     	; 0x18bc <DIO_VidGetPortValue+0x88>
		{
		case Port_A:
			*Ptr_Data = PINA;
    1886:	e9 e3       	ldi	r30, 0x39	; 57
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	ea 81       	ldd	r30, Y+2	; 0x02
    188e:	fb 81       	ldd	r31, Y+3	; 0x03
    1890:	80 83       	st	Z, r24
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <DIO_VidGetPortValue+0x88>
			break;
		case Port_B:
			*Ptr_Data = PINB;
    1894:	e6 e3       	ldi	r30, 0x36	; 54
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	ea 81       	ldd	r30, Y+2	; 0x02
    189c:	fb 81       	ldd	r31, Y+3	; 0x03
    189e:	80 83       	st	Z, r24
    18a0:	0d c0       	rjmp	.+26     	; 0x18bc <DIO_VidGetPortValue+0x88>
			break;
		case Port_C:
			*Ptr_Data = PINC;
    18a2:	e3 e3       	ldi	r30, 0x33	; 51
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	ea 81       	ldd	r30, Y+2	; 0x02
    18aa:	fb 81       	ldd	r31, Y+3	; 0x03
    18ac:	80 83       	st	Z, r24
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <DIO_VidGetPortValue+0x88>
			break;
		case Port_D:
			*Ptr_Data = PIND;
    18b0:	e0 e3       	ldi	r30, 0x30	; 48
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	ea 81       	ldd	r30, Y+2	; 0x02
    18b8:	fb 81       	ldd	r31, Y+3	; 0x03
    18ba:	80 83       	st	Z, r24
			break;
		}
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <EXTINT_VidINT0_Init>:

/*  Global pointer to function  to hold INT2 ISR address */
void (*EXTI_pvINT2Func)(void) = NULL;

void EXTINT_VidINT0_Init()
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	// set sens control to any logical change
	SET_BIT(MCUCR ,MCUCR_ISC00);
    18d4:	a5 e5       	ldi	r26, 0x55	; 85
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e5 e5       	ldi	r30, 0x55	; 85
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	81 60       	ori	r24, 0x01	; 1
    18e0:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR ,MCUCR_ISC01);
    18e2:	a5 e5       	ldi	r26, 0x55	; 85
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e5 e5       	ldi	r30, 0x55	; 85
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	8d 7f       	andi	r24, 0xFD	; 253
    18ee:	8c 93       	st	X, r24

	// peripheral interrupt enableINT0
	SET_BIT(GICR ,GICR_INT0);
    18f0:	ab e5       	ldi	r26, 0x5B	; 91
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	eb e5       	ldi	r30, 0x5B	; 91
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 64       	ori	r24, 0x40	; 64
    18fc:	8c 93       	st	X, r24
}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <EXTINT_VidINT1_Init>:


void EXTINT_VidINT1_Init()
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	// set sense control to any logical change
	SET_BIT(MCUCR ,MCUCR_ISC10);
    190c:	a5 e5       	ldi	r26, 0x55	; 85
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e5 e5       	ldi	r30, 0x55	; 85
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	84 60       	ori	r24, 0x04	; 4
    1918:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR ,MCUCR_ISC11);
    191a:	a5 e5       	ldi	r26, 0x55	; 85
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e5 e5       	ldi	r30, 0x55	; 85
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	87 7f       	andi	r24, 0xF7	; 247
    1926:	8c 93       	st	X, r24

	// peripheral interrupt enable INT1
	SET_BIT(GICR ,GICR_INT1);
    1928:	ab e5       	ldi	r26, 0x5B	; 91
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	eb e5       	ldi	r30, 0x5B	; 91
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 68       	ori	r24, 0x80	; 128
    1934:	8c 93       	st	X, r24

}
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <EXTINT_VidINT2_Init>:

void EXTINT_VidINT2_Init()
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
	// set sense control to rising edge
	SET_BIT(MCUCSR ,MCUCSR_INT2);
    1944:	a4 e5       	ldi	r26, 0x54	; 84
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e4 e5       	ldi	r30, 0x54	; 84
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	80 64       	ori	r24, 0x40	; 64
    1950:	8c 93       	st	X, r24

	// peripheral interrupt enable INT2
	SET_BIT(GICR ,GICR_INT2);
    1952:	ab e5       	ldi	r26, 0x5B	; 91
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	eb e5       	ldi	r30, 0x5B	; 91
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 62       	ori	r24, 0x20	; 32
    195e:	8c 93       	st	X, r24
}
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <EXTINT_U8INT0_CallBack>:

/* CALL BACK DFUNCTION OF INT0 */
uint8 EXTINT_U8INT0_CallBack(void(* Copy_PtrToFunc(void)))
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <EXTINT_U8INT0_CallBack+0x6>
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_State = NO_ERROR_STATE;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PtrToFunc != NULL)
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	39 f0       	breq	.+14     	; 0x1990 <EXTINT_U8INT0_CallBack+0x2a>
	{
		EXTI_pvINT0Func = Copy_PtrToFunc;
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	9b 81       	ldd	r25, Y+3	; 0x03
    1986:	90 93 96 01 	sts	0x0196, r25
    198a:	80 93 95 01 	sts	0x0195, r24
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <EXTINT_U8INT0_CallBack+0x2e>
	}
	else
	{
		Error_State = NULLPOINTER;
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <EXTINT_U8INT1_CallBack>:


/* CALL BACK DFUNCTION OF INT1 */
uint8 EXTINT_U8INT1_CallBack(void(* Copy_PtrToFunc(void)))
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <EXTINT_U8INT1_CallBack+0x6>
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	9b 83       	std	Y+3, r25	; 0x03
    19b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_State = NO_ERROR_STATE;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PtrToFunc != NULL)
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	39 f0       	breq	.+14     	; 0x19cc <EXTINT_U8INT1_CallBack+0x2a>
	{
		EXTI_pvINT1Func = Copy_PtrToFunc;
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	90 93 98 01 	sts	0x0198, r25
    19c6:	80 93 97 01 	sts	0x0197, r24
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <EXTINT_U8INT1_CallBack+0x2e>
	}
	else
	{
		Error_State = NULLPOINTER;
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <EXTINT_U8INT2_CallBack>:

/* CALL BACK DFUNCTION OF INT2 */
uint8 EXTINT_U8INT2_CallBack(void(* Copy_PtrToFunc(void)))
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <EXTINT_U8INT2_CallBack+0x6>
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	9b 83       	std	Y+3, r25	; 0x03
    19ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_State = NO_ERROR_STATE;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PtrToFunc != NULL)
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <EXTINT_U8INT2_CallBack+0x2a>
	{
		EXTI_pvINT2Func = Copy_PtrToFunc;
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9b 81       	ldd	r25, Y+3	; 0x03
    19fe:	90 93 9a 01 	sts	0x019A, r25
    1a02:	80 93 99 01 	sts	0x0199, r24
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <EXTINT_U8INT2_CallBack+0x2e>
	}
	else
	{
		Error_State = NULLPOINTER;
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <__vector_1>:

/* ISR function for INT0 */
void __vector_1 (void) __attribute__((signal));

void __vector_1 (void)
{
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	2f 93       	push	r18
    1a26:	3f 93       	push	r19
    1a28:	4f 93       	push	r20
    1a2a:	5f 93       	push	r21
    1a2c:	6f 93       	push	r22
    1a2e:	7f 93       	push	r23
    1a30:	8f 93       	push	r24
    1a32:	9f 93       	push	r25
    1a34:	af 93       	push	r26
    1a36:	bf 93       	push	r27
    1a38:	ef 93       	push	r30
    1a3a:	ff 93       	push	r31
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvINT0Func();
    1a44:	e0 91 95 01 	lds	r30, 0x0195
    1a48:	f0 91 96 01 	lds	r31, 0x0196
    1a4c:	09 95       	icall
}
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	ff 91       	pop	r31
    1a54:	ef 91       	pop	r30
    1a56:	bf 91       	pop	r27
    1a58:	af 91       	pop	r26
    1a5a:	9f 91       	pop	r25
    1a5c:	8f 91       	pop	r24
    1a5e:	7f 91       	pop	r23
    1a60:	6f 91       	pop	r22
    1a62:	5f 91       	pop	r21
    1a64:	4f 91       	pop	r20
    1a66:	3f 91       	pop	r19
    1a68:	2f 91       	pop	r18
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <__vector_2>:

/* ISR function for INT1 */
void __vector_2 (void) __attribute__((signal));

void __vector_2 (void)
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvINT1Func();
    1a9e:	e0 91 97 01 	lds	r30, 0x0197
    1aa2:	f0 91 98 01 	lds	r31, 0x0198
    1aa6:	09 95       	icall
}
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	ff 91       	pop	r31
    1aae:	ef 91       	pop	r30
    1ab0:	bf 91       	pop	r27
    1ab2:	af 91       	pop	r26
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	7f 91       	pop	r23
    1aba:	6f 91       	pop	r22
    1abc:	5f 91       	pop	r21
    1abe:	4f 91       	pop	r20
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <__vector_3>:

/* ISR function for INT2 */
void __vector_3 (void) __attribute__((signal));

void __vector_3 (void)
{
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	2f 93       	push	r18
    1ada:	3f 93       	push	r19
    1adc:	4f 93       	push	r20
    1ade:	5f 93       	push	r21
    1ae0:	6f 93       	push	r22
    1ae2:	7f 93       	push	r23
    1ae4:	8f 93       	push	r24
    1ae6:	9f 93       	push	r25
    1ae8:	af 93       	push	r26
    1aea:	bf 93       	push	r27
    1aec:	ef 93       	push	r30
    1aee:	ff 93       	push	r31
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvINT2Func();
    1af8:	e0 91 99 01 	lds	r30, 0x0199
    1afc:	f0 91 9a 01 	lds	r31, 0x019A
    1b00:	09 95       	icall
}
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	ff 91       	pop	r31
    1b08:	ef 91       	pop	r30
    1b0a:	bf 91       	pop	r27
    1b0c:	af 91       	pop	r26
    1b0e:	9f 91       	pop	r25
    1b10:	8f 91       	pop	r24
    1b12:	7f 91       	pop	r23
    1b14:	6f 91       	pop	r22
    1b16:	5f 91       	pop	r21
    1b18:	4f 91       	pop	r20
    1b1a:	3f 91       	pop	r19
    1b1c:	2f 91       	pop	r18
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti

00001b28 <GIE_VidEnable>:
#include "GIE_Private.h"
#include "GIE_Interface.h"

//enable the interrupt
void GIE_VidEnable()
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREF_I);
    1b30:	af e5       	ldi	r26, 0x5F	; 95
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ef e5       	ldi	r30, 0x5F	; 95
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 68       	ori	r24, 0x80	; 128
    1b3c:	8c 93       	st	X, r24
}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <GIE_VidDisable>:

//disable the interrupt
void GIE_VidDisable()
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREF_I);
    1b4c:	af e5       	ldi	r26, 0x5F	; 95
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	ef e5       	ldi	r30, 0x5F	; 95
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8f 77       	andi	r24, 0x7F	; 127
    1b58:	8c 93       	st	X, r24
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <LCD_VidSendCommand>:
#include<stdlib.h>

static uint8 cursor = 1;

void LCD_VidSendCommand(uint8 Copy_Command)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	2f 97       	sbiw	r28, 0x0f	; 15
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	8f 87       	std	Y+15, r24	; 0x0f
	//make RS = 0; to send command
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_RS_PIN , PinLow);
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	61 e0       	ldi	r22, 0x01	; 1
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>

	// set RW = 0; to write
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_RW_PIN ,PinLow);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	62 e0       	ldi	r22, 0x02	; 2
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>

	// set command to data pin on port
	DIO_VidSetPortValue(LCD_DATA_PORT , Copy_Command);
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b8e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_VidSetPortValue>

	// send enable pulse.
	// set enable to high
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_E_PIN ,PinHigh);
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	63 e0       	ldi	r22, 0x03	; 3
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e4       	ldi	r27, 0x40	; 64
    1ba4:	8b 87       	std	Y+11, r24	; 0x0b
    1ba6:	9c 87       	std	Y+12, r25	; 0x0c
    1ba8:	ad 87       	std	Y+13, r26	; 0x0d
    1baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	53 e4       	ldi	r21, 0x43	; 67
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8f 83       	std	Y+7, r24	; 0x07
    1bc6:	98 87       	std	Y+8, r25	; 0x08
    1bc8:	a9 87       	std	Y+9, r26	; 0x09
    1bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <LCD_VidSendCommand+0xee>
    1c30:	89 e1       	ldi	r24, 0x19	; 25
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_VidSendCommand+0xdc>
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	9e 81       	ldd	r25, Y+6	; 0x06
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <LCD_VidSendCommand+0xd0>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_VidSendCommand+0x118>
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	// set enable to low
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_E_PIN ,PinLow);
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	63 e0       	ldi	r22, 0x03	; 3
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>
}
    1c8a:	2f 96       	adiw	r28, 0x0f	; 15
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <LCD_VidSendData>:

void LCD_VidSendData(uint8 Copy_Data)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	2f 97       	sbiw	r28, 0x0f	; 15
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	8f 87       	std	Y+15, r24	; 0x0f
	//make RS = 0; to send command
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_RS_PIN , PinHigh);
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>

	// set RW = 0; to write
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_RW_PIN ,PinLow);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	62 e0       	ldi	r22, 0x02	; 2
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>

	// set command to data pin on port
	DIO_VidSetPortValue(LCD_DATA_PORT , Copy_Data);
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cca:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_VidSetPortValue>

	// send enable pulse.
	// set enable to high
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_E_PIN ,PinHigh);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	63 e0       	ldi	r22, 0x03	; 3
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e4       	ldi	r27, 0x40	; 64
    1ce0:	8b 87       	std	Y+11, r24	; 0x0b
    1ce2:	9c 87       	std	Y+12, r25	; 0x0c
    1ce4:	ad 87       	std	Y+13, r26	; 0x0d
    1ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a e7       	ldi	r20, 0x7A	; 122
    1cf6:	53 e4       	ldi	r21, 0x43	; 67
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8f 83       	std	Y+7, r24	; 0x07
    1d02:	98 87       	std	Y+8, r25	; 0x08
    1d04:	a9 87       	std	Y+9, r26	; 0x09
    1d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d08:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0a:	78 85       	ldd	r23, Y+8	; 0x08
    1d0c:	89 85       	ldd	r24, Y+9	; 0x09
    1d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <LCD_VidSendData+0x8e>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <LCD_VidSendData+0xee>
    1d6c:	89 e1       	ldi	r24, 0x19	; 25
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	8b 83       	std	Y+3, r24	; 0x03
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_VidSendData+0xdc>
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8d 81       	ldd	r24, Y+5	; 0x05
    1d82:	9e 81       	ldd	r25, Y+6	; 0x06
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <LCD_VidSendData+0xd0>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_VidSendData+0x118>
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	// set enable to low
	DIO_VidSetPinValue(LCD_CTRL_PORT , LCD_E_PIN ,PinLow);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	63 e0       	ldi	r22, 0x03	; 3
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>
}
    1dc6:	2f 96       	adiw	r28, 0x0f	; 15
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <LCD_Vid_Init>:

void LCD_Vid_Init(void)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	2e 97       	sbiw	r28, 0x0e	; 14
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a0 e2       	ldi	r26, 0x20	; 32
    1df2:	b2 e4       	ldi	r27, 0x42	; 66
    1df4:	8b 87       	std	Y+11, r24	; 0x0b
    1df6:	9c 87       	std	Y+12, r25	; 0x0c
    1df8:	ad 87       	std	Y+13, r26	; 0x0d
    1dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a e7       	ldi	r20, 0x7A	; 122
    1e0a:	53 e4       	ldi	r21, 0x43	; 67
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	8f 83       	std	Y+7, r24	; 0x07
    1e16:	98 87       	std	Y+8, r25	; 0x08
    1e18:	a9 87       	std	Y+9, r26	; 0x09
    1e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1e:	78 85       	ldd	r23, Y+8	; 0x08
    1e20:	89 85       	ldd	r24, Y+9	; 0x09
    1e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <LCD_Vid_Init+0x66>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <LCD_Vid_Init+0xe4>
	else if (__tmp > 65535)
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <LCD_Vid_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <LCD_Vid_Init+0xc6>
    1e80:	89 e1       	ldi	r24, 0x19	; 25
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_Vid_Init+0xb4>
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <LCD_Vid_Init+0xa8>
    1ea6:	14 c0       	rjmp	.+40     	; 0x1ed0 <LCD_Vid_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_Vid_Init+0xf0>
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	// wait for more than 30 ms
	_delay_ms(40);

	// function set command 2 line ,and  5*8 font size.
	LCD_VidSendCommand(0b00111000);
    1ed0:	88 e3       	ldi	r24, 0x38	; 56
    1ed2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VidSendCommand>

	//display on off control : display enable disable cursor , no blink cursor.
	LCD_VidSendCommand(0b00001100);
    1ed6:	8c e0       	ldi	r24, 0x0C	; 12
    1ed8:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VidSendCommand>

	// clear screen.
	LCD_VidSendCommand(1);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VidSendCommand>


}
    1ee2:	2e 96       	adiw	r28, 0x0e	; 14
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <LCD_VidMoveCursor>:
// move cursor
void LCD_VidMoveCursor(uint8 row , uint8 column)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <LCD_VidMoveCursor+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <LCD_VidMoveCursor+0x8>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	3c 83       	std	Y+4, r19	; 0x04
    1f0c:	2b 83       	std	Y+3, r18	; 0x03
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	31 f0       	breq	.+12     	; 0x1f22 <LCD_VidMoveCursor+0x2e>
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	21 30       	cpi	r18, 0x01	; 1
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	61 f0       	breq	.+24     	; 0x1f38 <LCD_VidMoveCursor+0x44>
    1f20:	16 c0       	rjmp	.+44     	; 0x1f4e <LCD_VidMoveCursor+0x5a>
	{
	case 0 :
		if(column < 16)
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	80 31       	cpi	r24, 0x10	; 16
    1f26:	98 f4       	brcc	.+38     	; 0x1f4e <LCD_VidMoveCursor+0x5a>
		{
			LCD_VidSendCommand((0x80) + (column));
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	80 58       	subi	r24, 0x80	; 128
    1f2c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VidSendCommand>
			cursor = column;
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	80 93 87 01 	sts	0x0187, r24
    1f36:	0b c0       	rjmp	.+22     	; 0x1f4e <LCD_VidMoveCursor+0x5a>
		}
		break;
	case 1:
		if(column < 16)
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	80 31       	cpi	r24, 0x10	; 16
    1f3c:	40 f4       	brcc	.+16     	; 0x1f4e <LCD_VidMoveCursor+0x5a>
		{
			LCD_VidSendCommand((0x80) + 0x40 + (column));
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	80 54       	subi	r24, 0x40	; 64
    1f42:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VidSendCommand>
			cursor = 17 + column;
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	8f 5e       	subi	r24, 0xEF	; 239
    1f4a:	80 93 87 01 	sts	0x0187, r24
		}
		break;
	}
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <LCD_VidPrintStringRowColumn>:
// print string in spasefic adderss
void LCD_VidPrintStringRowColumn(uint8 *Copy_Str , uint8 row , uint8 column)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <LCD_VidPrintStringRowColumn+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <LCD_VidPrintStringRowColumn+0x8>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	6b 83       	std	Y+3, r22	; 0x03
    1f6e:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidMoveCursor(row , column);
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	6c 81       	ldd	r22, Y+4	; 0x04
    1f74:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_VidMoveCursor>
	LCD_VidPrintString(Copy_Str);
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_VidPrintString>

}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <LCD_VidPrintString>:

// print string
void LCD_VidPrintString(uint8 *Copy_Str)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <LCD_VidPrintString+0x6>
    1f94:	0f 92       	push	r0
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	9b 83       	std	Y+3, r25	; 0x03
    1f9c:	8a 83       	std	Y+2, r24	; 0x02

	uint8 iterator = 0;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
    1fa0:	15 c0       	rjmp	.+42     	; 0x1fcc <LCD_VidPrintString+0x3e>
	// check if the string is ending or not
	while(Copy_Str[iterator] != '\0')
	{
		if(iterator == 16)
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	80 31       	cpi	r24, 0x10	; 16
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <LCD_VidPrintString+0x22>
		{
			LCD_VidMoveCursor(1,0);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_VidMoveCursor>
		}
		// print the data
		LCD_VidSendData(Copy_Str[iterator]);
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	fc 01       	movw	r30, r24
    1fbc:	e2 0f       	add	r30, r18
    1fbe:	f3 1f       	adc	r31, r19
    1fc0:	80 81       	ld	r24, Z
    1fc2:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <LCD_VidSendData>

		//increase the address by one to send the next element.
		iterator++;
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
    1fca:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidPrintString(uint8 *Copy_Str)
{

	uint8 iterator = 0;
	// check if the string is ending or not
	while(Copy_Str[iterator] != '\0')
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e2 0f       	add	r30, r18
    1fda:	f3 1f       	adc	r31, r19
    1fdc:	80 81       	ld	r24, Z
    1fde:	88 23       	and	r24, r24
    1fe0:	01 f7       	brne	.-64     	; 0x1fa2 <LCD_VidPrintString+0x14>
		LCD_VidSendData(Copy_Str[iterator]);

		//increase the address by one to send the next element.
		iterator++;
	}
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <LCD_VidPrintNumber>:


void LCD_VidPrintNumber(uint32 Copy_Integer)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	64 97       	sbiw	r28, 0x14	; 20
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	69 8b       	std	Y+17, r22	; 0x11
    2004:	7a 8b       	std	Y+18, r23	; 0x12
    2006:	8b 8b       	std	Y+19, r24	; 0x13
    2008:	9c 8b       	std	Y+20, r25	; 0x14
	// string to hold the ascii
	uint8 Hold_Ascii[16] ;

	// function itoa convert the data to its corresponding the ascii value from (0 to 9)decimal;
	itoa(Copy_Integer,Hold_Ascii,10);
    200a:	89 89       	ldd	r24, Y+17	; 0x11
    200c:	9a 89       	ldd	r25, Y+18	; 0x12
    200e:	9e 01       	movw	r18, r28
    2010:	2f 5f       	subi	r18, 0xFF	; 255
    2012:	3f 4f       	sbci	r19, 0xFF	; 255
    2014:	b9 01       	movw	r22, r18
    2016:	4a e0       	ldi	r20, 0x0A	; 10
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <itoa>

	//print the integer as a string .
	LCD_VidPrintString(Hold_Ascii);
    201e:	ce 01       	movw	r24, r28
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_VidPrintString>
}
    2026:	64 96       	adiw	r28, 0x14	; 20
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <LCD_VidClear_Screen>:

void LCD_VidClear_Screen(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	// send command clear screen
	LCD_VidSendCommand(0x01);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_VidSendCommand>
	cursor = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	80 93 87 01 	sts	0x0187, r24
}
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <SPI_VidMaterInit>:
#include "SPI_Interface.h"


/* initialize master */
void SPI_VidMaterInit(ClkRate_type copy_Prescaler,ClkPhase_type copy_CPHA ,ClkPolarity_type copy_CLOP)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	29 97       	sbiw	r28, 0x09	; 9
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	6a 83       	std	Y+2, r22	; 0x02
    206a:	4b 83       	std	Y+3, r20	; 0x03
	/* Master initialization */
	SET_BIT(SPCR,SPCR_MSTR);
    206c:	ad e2       	ldi	r26, 0x2D	; 45
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ed e2       	ldi	r30, 0x2D	; 45
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	80 61       	ori	r24, 0x10	; 16
    2078:	8c 93       	st	X, r24

	/* clock polarity */
	switch(copy_CLOP)
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	39 87       	std	Y+9, r19	; 0x09
    2082:	28 87       	std	Y+8, r18	; 0x08
    2084:	88 85       	ldd	r24, Y+8	; 0x08
    2086:	99 85       	ldd	r25, Y+9	; 0x09
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	31 f0       	breq	.+12     	; 0x2098 <SPI_VidMaterInit+0x46>
    208c:	28 85       	ldd	r18, Y+8	; 0x08
    208e:	39 85       	ldd	r19, Y+9	; 0x09
    2090:	21 30       	cpi	r18, 0x01	; 1
    2092:	31 05       	cpc	r19, r1
    2094:	49 f0       	breq	.+18     	; 0x20a8 <SPI_VidMaterInit+0x56>
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <SPI_VidMaterInit+0x64>
	{
	case CPOL0:
		CLEAR_BIT(SPCR,SPCR_CPOL);
    2098:	ad e2       	ldi	r26, 0x2D	; 45
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	ed e2       	ldi	r30, 0x2D	; 45
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	87 7f       	andi	r24, 0xF7	; 247
    20a4:	8c 93       	st	X, r24
    20a6:	07 c0       	rjmp	.+14     	; 0x20b6 <SPI_VidMaterInit+0x64>
		break;
	case CPOL1:
		SET_BIT(SPCR,SPCR_CPOL);
    20a8:	ad e2       	ldi	r26, 0x2D	; 45
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ed e2       	ldi	r30, 0x2D	; 45
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	88 60       	ori	r24, 0x08	; 8
    20b4:	8c 93       	st	X, r24
		break;
	}

	/* clock phase */
	switch(copy_CPHA)
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	3f 83       	std	Y+7, r19	; 0x07
    20be:	2e 83       	std	Y+6, r18	; 0x06
    20c0:	8e 81       	ldd	r24, Y+6	; 0x06
    20c2:	9f 81       	ldd	r25, Y+7	; 0x07
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <SPI_VidMaterInit+0x82>
    20c8:	2e 81       	ldd	r18, Y+6	; 0x06
    20ca:	3f 81       	ldd	r19, Y+7	; 0x07
    20cc:	21 30       	cpi	r18, 0x01	; 1
    20ce:	31 05       	cpc	r19, r1
    20d0:	49 f0       	breq	.+18     	; 0x20e4 <SPI_VidMaterInit+0x92>
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <SPI_VidMaterInit+0xa0>
	{
	case CPHAS0:
		CLEAR_BIT(SPCR,SPCR_CPHA);
    20d4:	ad e2       	ldi	r26, 0x2D	; 45
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	ed e2       	ldi	r30, 0x2D	; 45
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	8b 7f       	andi	r24, 0xFB	; 251
    20e0:	8c 93       	st	X, r24
    20e2:	07 c0       	rjmp	.+14     	; 0x20f2 <SPI_VidMaterInit+0xa0>
		break;
	case CPHAS1:
		SET_BIT(SPCR,SPCR_CPHA);
    20e4:	ad e2       	ldi	r26, 0x2D	; 45
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	ed e2       	ldi	r30, 0x2D	; 45
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	84 60       	ori	r24, 0x04	; 4
    20f0:	8c 93       	st	X, r24
		break;
	}

	/* Clock prescaler /16*/
	switch(copy_Prescaler)
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	3d 83       	std	Y+5, r19	; 0x05
    20fa:	2c 83       	std	Y+4, r18	; 0x04
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2100:	83 30       	cpi	r24, 0x03	; 3
    2102:	91 05       	cpc	r25, r1
    2104:	09 f4       	brne	.+2      	; 0x2108 <SPI_VidMaterInit+0xb6>
    2106:	70 c0       	rjmp	.+224    	; 0x21e8 <SPI_VidMaterInit+0x196>
    2108:	2c 81       	ldd	r18, Y+4	; 0x04
    210a:	3d 81       	ldd	r19, Y+5	; 0x05
    210c:	24 30       	cpi	r18, 0x04	; 4
    210e:	31 05       	cpc	r19, r1
    2110:	84 f4       	brge	.+32     	; 0x2132 <SPI_VidMaterInit+0xe0>
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	9d 81       	ldd	r25, Y+5	; 0x05
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	d1 f1       	breq	.+116    	; 0x2190 <SPI_VidMaterInit+0x13e>
    211c:	2c 81       	ldd	r18, Y+4	; 0x04
    211e:	3d 81       	ldd	r19, Y+5	; 0x05
    2120:	22 30       	cpi	r18, 0x02	; 2
    2122:	31 05       	cpc	r19, r1
    2124:	0c f0       	brlt	.+2      	; 0x2128 <SPI_VidMaterInit+0xd6>
    2126:	4a c0       	rjmp	.+148    	; 0x21bc <SPI_VidMaterInit+0x16a>
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	d1 f0       	breq	.+52     	; 0x2164 <SPI_VidMaterInit+0x112>
    2130:	c8 c0       	rjmp	.+400    	; 0x22c2 <SPI_VidMaterInit+0x270>
    2132:	2c 81       	ldd	r18, Y+4	; 0x04
    2134:	3d 81       	ldd	r19, Y+5	; 0x05
    2136:	25 30       	cpi	r18, 0x05	; 5
    2138:	31 05       	cpc	r19, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <SPI_VidMaterInit+0xec>
    213c:	81 c0       	rjmp	.+258    	; 0x2240 <SPI_VidMaterInit+0x1ee>
    213e:	8c 81       	ldd	r24, Y+4	; 0x04
    2140:	9d 81       	ldd	r25, Y+5	; 0x05
    2142:	85 30       	cpi	r24, 0x05	; 5
    2144:	91 05       	cpc	r25, r1
    2146:	0c f4       	brge	.+2      	; 0x214a <SPI_VidMaterInit+0xf8>
    2148:	65 c0       	rjmp	.+202    	; 0x2214 <SPI_VidMaterInit+0x1c2>
    214a:	2c 81       	ldd	r18, Y+4	; 0x04
    214c:	3d 81       	ldd	r19, Y+5	; 0x05
    214e:	26 30       	cpi	r18, 0x06	; 6
    2150:	31 05       	cpc	r19, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <SPI_VidMaterInit+0x104>
    2154:	8b c0       	rjmp	.+278    	; 0x226c <SPI_VidMaterInit+0x21a>
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	9d 81       	ldd	r25, Y+5	; 0x05
    215a:	87 30       	cpi	r24, 0x07	; 7
    215c:	91 05       	cpc	r25, r1
    215e:	09 f4       	brne	.+2      	; 0x2162 <SPI_VidMaterInit+0x110>
    2160:	9b c0       	rjmp	.+310    	; 0x2298 <SPI_VidMaterInit+0x246>
    2162:	af c0       	rjmp	.+350    	; 0x22c2 <SPI_VidMaterInit+0x270>
	{
	case Fosc_4:
		CLEAR_BIT(SPCR,SPCR_SPR0);
    2164:	ad e2       	ldi	r26, 0x2D	; 45
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	ed e2       	ldi	r30, 0x2D	; 45
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8e 7f       	andi	r24, 0xFE	; 254
    2170:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,SPCR_SPR1);
    2172:	ad e2       	ldi	r26, 0x2D	; 45
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ed e2       	ldi	r30, 0x2D	; 45
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8d 7f       	andi	r24, 0xFD	; 253
    217e:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR,SPSR_SPI2X);
    2180:	ae e2       	ldi	r26, 0x2E	; 46
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ee e2       	ldi	r30, 0x2E	; 46
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	8e 7f       	andi	r24, 0xFE	; 254
    218c:	8c 93       	st	X, r24
    218e:	99 c0       	rjmp	.+306    	; 0x22c2 <SPI_VidMaterInit+0x270>
		break;
	case Fosc_16:
		SET_BIT(SPCR,SPCR_SPR0);
    2190:	ad e2       	ldi	r26, 0x2D	; 45
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	ed e2       	ldi	r30, 0x2D	; 45
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	81 60       	ori	r24, 0x01	; 1
    219c:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,SPCR_SPR1);
    219e:	ad e2       	ldi	r26, 0x2D	; 45
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	ed e2       	ldi	r30, 0x2D	; 45
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8d 7f       	andi	r24, 0xFD	; 253
    21aa:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR,SPSR_SPI2X);
    21ac:	ae e2       	ldi	r26, 0x2E	; 46
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	ee e2       	ldi	r30, 0x2E	; 46
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8e 7f       	andi	r24, 0xFE	; 254
    21b8:	8c 93       	st	X, r24
    21ba:	83 c0       	rjmp	.+262    	; 0x22c2 <SPI_VidMaterInit+0x270>
		break;
	case Fosc_64:
		CLEAR_BIT(SPCR,SPCR_SPR0);
    21bc:	ad e2       	ldi	r26, 0x2D	; 45
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	ed e2       	ldi	r30, 0x2D	; 45
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	8e 7f       	andi	r24, 0xFE	; 254
    21c8:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
    21ca:	ad e2       	ldi	r26, 0x2D	; 45
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	ed e2       	ldi	r30, 0x2D	; 45
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	82 60       	ori	r24, 0x02	; 2
    21d6:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR,SPSR_SPI2X);
    21d8:	ae e2       	ldi	r26, 0x2E	; 46
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	ee e2       	ldi	r30, 0x2E	; 46
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	8e 7f       	andi	r24, 0xFE	; 254
    21e4:	8c 93       	st	X, r24
    21e6:	6d c0       	rjmp	.+218    	; 0x22c2 <SPI_VidMaterInit+0x270>
		break;
	case Fosc_128:
		SET_BIT(SPCR,SPCR_SPR0);
    21e8:	ad e2       	ldi	r26, 0x2D	; 45
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ed e2       	ldi	r30, 0x2D	; 45
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	81 60       	ori	r24, 0x01	; 1
    21f4:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
    21f6:	ad e2       	ldi	r26, 0x2D	; 45
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	ed e2       	ldi	r30, 0x2D	; 45
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	82 60       	ori	r24, 0x02	; 2
    2202:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR,SPSR_SPI2X);
    2204:	ae e2       	ldi	r26, 0x2E	; 46
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	ee e2       	ldi	r30, 0x2E	; 46
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	8e 7f       	andi	r24, 0xFE	; 254
    2210:	8c 93       	st	X, r24
    2212:	57 c0       	rjmp	.+174    	; 0x22c2 <SPI_VidMaterInit+0x270>
		break;
	case Fosc_2:
		CLEAR_BIT(SPCR,SPCR_SPR0);
    2214:	ad e2       	ldi	r26, 0x2D	; 45
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	ed e2       	ldi	r30, 0x2D	; 45
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8e 7f       	andi	r24, 0xFE	; 254
    2220:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,SPCR_SPR1);
    2222:	ad e2       	ldi	r26, 0x2D	; 45
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ed e2       	ldi	r30, 0x2D	; 45
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8d 7f       	andi	r24, 0xFD	; 253
    222e:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
    2230:	ae e2       	ldi	r26, 0x2E	; 46
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	ee e2       	ldi	r30, 0x2E	; 46
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	81 60       	ori	r24, 0x01	; 1
    223c:	8c 93       	st	X, r24
    223e:	41 c0       	rjmp	.+130    	; 0x22c2 <SPI_VidMaterInit+0x270>
		break;
	case Fosc_8:
		SET_BIT(SPCR,SPCR_SPR0);
    2240:	ad e2       	ldi	r26, 0x2D	; 45
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	ed e2       	ldi	r30, 0x2D	; 45
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	81 60       	ori	r24, 0x01	; 1
    224c:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,SPCR_SPR1);
    224e:	ad e2       	ldi	r26, 0x2D	; 45
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ed e2       	ldi	r30, 0x2D	; 45
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8d 7f       	andi	r24, 0xFD	; 253
    225a:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
    225c:	ae e2       	ldi	r26, 0x2E	; 46
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ee e2       	ldi	r30, 0x2E	; 46
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	81 60       	ori	r24, 0x01	; 1
    2268:	8c 93       	st	X, r24
    226a:	2b c0       	rjmp	.+86     	; 0x22c2 <SPI_VidMaterInit+0x270>
		break;
	case Fosc_32:
		CLEAR_BIT(SPCR,SPCR_SPR0);
    226c:	ad e2       	ldi	r26, 0x2D	; 45
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ed e2       	ldi	r30, 0x2D	; 45
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	8e 7f       	andi	r24, 0xFE	; 254
    2278:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
    227a:	ad e2       	ldi	r26, 0x2D	; 45
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	ed e2       	ldi	r30, 0x2D	; 45
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	82 60       	ori	r24, 0x02	; 2
    2286:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
    2288:	ae e2       	ldi	r26, 0x2E	; 46
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ee e2       	ldi	r30, 0x2E	; 46
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	8c 93       	st	X, r24
    2296:	15 c0       	rjmp	.+42     	; 0x22c2 <SPI_VidMaterInit+0x270>
		break;
	case FoscDouble_64:
		SET_BIT(SPCR,SPCR_SPR0);
    2298:	ad e2       	ldi	r26, 0x2D	; 45
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	ed e2       	ldi	r30, 0x2D	; 45
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	81 60       	ori	r24, 0x01	; 1
    22a4:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
    22a6:	ad e2       	ldi	r26, 0x2D	; 45
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	ed e2       	ldi	r30, 0x2D	; 45
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	82 60       	ori	r24, 0x02	; 2
    22b2:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
    22b4:	ae e2       	ldi	r26, 0x2E	; 46
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	ee e2       	ldi	r30, 0x2E	; 46
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	81 60       	ori	r24, 0x01	; 1
    22c0:	8c 93       	st	X, r24
		break;
	}

	/* Enable SPI */
	SET_BIT(SPCR,SPCR_SPE);
    22c2:	ad e2       	ldi	r26, 0x2D	; 45
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	ed e2       	ldi	r30, 0x2D	; 45
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	80 64       	ori	r24, 0x40	; 64
    22ce:	8c 93       	st	X, r24
}
    22d0:	29 96       	adiw	r28, 0x09	; 9
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <SPI_VidSlaveInit>:

/* initialize slave */
void SPI_VidSlaveInit(ClkPhase_type copy_CPHA ,ClkPolarity_type copy_CLOP)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <SPI_VidSlaveInit+0x6>
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <SPI_VidSlaveInit+0x8>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <SPI_VidSlaveInit+0xa>
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	6a 83       	std	Y+2, r22	; 0x02
	/* Slave initialization to prevent the to be low */
	CLEAR_BIT(SPCR,SPCR_MSTR);
    22f4:	ad e2       	ldi	r26, 0x2D	; 45
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	ed e2       	ldi	r30, 0x2D	; 45
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8f 7e       	andi	r24, 0xEF	; 239
    2300:	8c 93       	st	X, r24

	/* clock polarity */
	switch(copy_CLOP)
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	3e 83       	std	Y+6, r19	; 0x06
    230a:	2d 83       	std	Y+5, r18	; 0x05
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	31 f0       	breq	.+12     	; 0x2320 <SPI_VidSlaveInit+0x3e>
    2314:	2d 81       	ldd	r18, Y+5	; 0x05
    2316:	3e 81       	ldd	r19, Y+6	; 0x06
    2318:	21 30       	cpi	r18, 0x01	; 1
    231a:	31 05       	cpc	r19, r1
    231c:	49 f0       	breq	.+18     	; 0x2330 <SPI_VidSlaveInit+0x4e>
    231e:	0f c0       	rjmp	.+30     	; 0x233e <SPI_VidSlaveInit+0x5c>
	{
	case CPOL0:
		CLEAR_BIT(SPCR,SPCR_CPOL);
    2320:	ad e2       	ldi	r26, 0x2D	; 45
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	ed e2       	ldi	r30, 0x2D	; 45
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	87 7f       	andi	r24, 0xF7	; 247
    232c:	8c 93       	st	X, r24
    232e:	07 c0       	rjmp	.+14     	; 0x233e <SPI_VidSlaveInit+0x5c>
		break;
	case CPOL1:
		SET_BIT(SPCR,SPCR_CPOL);
    2330:	ad e2       	ldi	r26, 0x2D	; 45
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	ed e2       	ldi	r30, 0x2D	; 45
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	88 60       	ori	r24, 0x08	; 8
    233c:	8c 93       	st	X, r24
		break;
	}

	/* clock phase */
	switch(copy_CPHA)
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	3c 83       	std	Y+4, r19	; 0x04
    2346:	2b 83       	std	Y+3, r18	; 0x03
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	31 f0       	breq	.+12     	; 0x235c <SPI_VidSlaveInit+0x7a>
    2350:	2b 81       	ldd	r18, Y+3	; 0x03
    2352:	3c 81       	ldd	r19, Y+4	; 0x04
    2354:	21 30       	cpi	r18, 0x01	; 1
    2356:	31 05       	cpc	r19, r1
    2358:	49 f0       	breq	.+18     	; 0x236c <SPI_VidSlaveInit+0x8a>
    235a:	0f c0       	rjmp	.+30     	; 0x237a <SPI_VidSlaveInit+0x98>
	{
	case CPHAS0:
		CLEAR_BIT(SPCR,SPCR_CPHA);
    235c:	ad e2       	ldi	r26, 0x2D	; 45
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	ed e2       	ldi	r30, 0x2D	; 45
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	8b 7f       	andi	r24, 0xFB	; 251
    2368:	8c 93       	st	X, r24
    236a:	07 c0       	rjmp	.+14     	; 0x237a <SPI_VidSlaveInit+0x98>
		break;
	case CPHAS1:
		SET_BIT(SPCR,SPCR_CPHA);
    236c:	ad e2       	ldi	r26, 0x2D	; 45
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	ed e2       	ldi	r30, 0x2D	; 45
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	84 60       	ori	r24, 0x04	; 4
    2378:	8c 93       	st	X, r24
		break;
	}

	/* Enable SPI */
	SET_BIT(SPCR,SPCR_SPE);
    237a:	ad e2       	ldi	r26, 0x2D	; 45
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	ed e2       	ldi	r30, 0x2D	; 45
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	80 64       	ori	r24, 0x40	; 64
    2386:	8c 93       	st	X, r24
}
    2388:	26 96       	adiw	r28, 0x06	; 6
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <SPI_TransReceive>:

/* transmit and receive at the same time */
uint8 SPI_TransReceive(uint8 copy_data)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	0f 92       	push	r0
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	89 83       	std	Y+1, r24	; 0x01

	/* Send the data */
	SPDR = copy_data;
    23a6:	ef e2       	ldi	r30, 0x2F	; 47
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	80 83       	st	Z, r24

	/* wait until  transfer complete */
    while(GET_BIT(SPSR,SPSR_SPIF)== 0);
    23ae:	ee e2       	ldi	r30, 0x2E	; 46
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	88 23       	and	r24, r24
    23b6:	dc f7       	brge	.-10     	; 0x23ae <SPI_TransReceive+0x14>
    /* after the tranfer comlete ,return the value of SPDR after update */
    return SPDR;
    23b8:	ef e2       	ldi	r30, 0x2F	; 47
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
}
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <TIMER1_VidInit>:
#include "TIMER1_Private.h"
#include "TIMER1_Interface.h"

/* initialize timer1*/
void TIMER1_VidInit()
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	/* non inverting mode FPWM (table 45 data sheet) */
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    23ce:	af e4       	ldi	r26, 0x4F	; 79
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ef e4       	ldi	r30, 0x4F	; 79
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	80 68       	ori	r24, 0x80	; 128
    23da:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    23dc:	af e4       	ldi	r26, 0x4F	; 79
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	ef e4       	ldi	r30, 0x4F	; 79
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	8f 7b       	andi	r24, 0xBF	; 191
    23e8:	8c 93       	st	X, r24

	/* setting waveform generation mode(table 14 data sheet) */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    23ea:	af e4       	ldi	r26, 0x4F	; 79
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	ef e4       	ldi	r30, 0x4F	; 79
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8e 7f       	andi	r24, 0xFE	; 254
    23f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    23f8:	af e4       	ldi	r26, 0x4F	; 79
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	ef e4       	ldi	r30, 0x4F	; 79
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	82 60       	ori	r24, 0x02	; 2
    2404:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1B_WGM12);
    2406:	af e4       	ldi	r26, 0x4F	; 79
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ef e4       	ldi	r30, 0x4F	; 79
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	88 60       	ori	r24, 0x08	; 8
    2412:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1B_WGM13);
    2414:	af e4       	ldi	r26, 0x4F	; 79
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ef e4       	ldi	r30, 0x4F	; 79
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 61       	ori	r24, 0x10	; 16
    2420:	8c 93       	st	X, r24

	/* SRT prescaler divided by 8 (table 48 data sheet) */
	TCCR1B &=0xF8; /*0b11111000*/
    2422:	ae e4       	ldi	r26, 0x4E	; 78
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ee e4       	ldi	r30, 0x4E	; 78
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	88 7f       	andi	r24, 0xF8	; 248
    242e:	8c 93       	st	X, r24
	TCCR1B |=0xF2; /*0b11111010*/
    2430:	ae e4       	ldi	r26, 0x4E	; 78
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ee e4       	ldi	r30, 0x4E	; 78
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	82 6f       	ori	r24, 0xF2	; 242
    243c:	8c 93       	st	X, r24
}
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <TIMER1_VidSet_ICR_TopVlue>:

/* setting top value */
void TIMER1_VidSet_ICR_TopVlue(uint16 value)
{
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	00 d0       	rcall	.+0      	; 0x244a <TIMER1_VidSet_ICR_TopVlue+0x6>
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    2452:	e6 e4       	ldi	r30, 0x46	; 70
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
}
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <TIMER1_VidSet_OCR_CompMatch>:

void TIMER1_VidSet_OCR_CompMatch(uint16 value)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <TIMER1_VidSet_OCR_CompMatch+0x6>
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	9a 83       	std	Y+2, r25	; 0x02
    2474:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = value;
    2476:	ea e4       	ldi	r30, 0x4A	; 74
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	80 83       	st	Z, r24
}
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <UART_VidSendData>:
#include "UART_Private.h"
#include "UART_Interface.h"

/* Send Data */
void UART_VidSendData(uint8 copy_data)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	0f 92       	push	r0
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	89 83       	std	Y+1, r24	; 0x01
	/* wait until the transmit is empty*/
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    2498:	eb e2       	ldi	r30, 0x2B	; 43
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	80 72       	andi	r24, 0x20	; 32
    24a4:	90 70       	andi	r25, 0x00	; 0
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	b9 f3       	breq	.-18     	; 0x2498 <UART_VidSendData+0xc>

	/* write the data in UDR */
	UDR = copy_data;
    24aa:	ec e2       	ldi	r30, 0x2C	; 44
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	80 83       	st	Z, r24
}
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <UART_U8ReciveData>:

/* Receive Data */
uint8 UART_U8ReciveData(void)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
	/* wait receive operation until complete */
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0);
    24c2:	eb e2       	ldi	r30, 0x2B	; 43
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	88 23       	and	r24, r24
    24ca:	dc f7       	brge	.-10     	; 0x24c2 <UART_U8ReciveData+0x8>

	/* return the value of UDR */
	return UDR;
    24cc:	ec e2       	ldi	r30, 0x2C	; 44
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
}
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <UART_VidSendDataString>:

/*send string to UART */
void UART_VidSendDataString(char *copy_dataString)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	00 d0       	rcall	.+0      	; 0x24de <UART_VidSendDataString+0x6>
    24de:	0f 92       	push	r0
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	9b 83       	std	Y+3, r25	; 0x03
    24e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_counter=0;
    24e8:	19 82       	std	Y+1, r1	; 0x01
    24ea:	0e c0       	rjmp	.+28     	; 0x2508 <UART_VidSendDataString+0x30>
	while(copy_dataString[local_counter] != '\0')
	{
		UART_VidSendData(copy_dataString[local_counter]);
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	9b 81       	ldd	r25, Y+3	; 0x03
    24f6:	fc 01       	movw	r30, r24
    24f8:	e2 0f       	add	r30, r18
    24fa:	f3 1f       	adc	r31, r19
    24fc:	80 81       	ld	r24, Z
    24fe:	0e 94 46 12 	call	0x248c	; 0x248c <UART_VidSendData>
		local_counter++;
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	89 83       	std	Y+1, r24	; 0x01

/*send string to UART */
void UART_VidSendDataString(char *copy_dataString)
{
	uint8 local_counter=0;
	while(copy_dataString[local_counter] != '\0')
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	9b 81       	ldd	r25, Y+3	; 0x03
    2512:	fc 01       	movw	r30, r24
    2514:	e2 0f       	add	r30, r18
    2516:	f3 1f       	adc	r31, r19
    2518:	80 81       	ld	r24, Z
    251a:	88 23       	and	r24, r24
    251c:	39 f7       	brne	.-50     	; 0x24ec <UART_VidSendDataString+0x14>
	{
		UART_VidSendData(copy_dataString[local_counter]);
		local_counter++;
	}
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <UART_U8ReciveDataString>:

uint8 UART_U8ReciveDataString(uint8 *copy_dataString , uint8 copy_stringSize)
{
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <UART_U8ReciveDataString+0xa>
    2534:	00 d0       	rcall	.+0      	; 0x2536 <UART_U8ReciveDataString+0xc>
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	8b 83       	std	Y+3, r24	; 0x03
    2540:	6d 83       	std	Y+5, r22	; 0x05
	    uint8 local_counter = 0;
    2542:	1a 82       	std	Y+2, r1	; 0x02
	    uint8 local_ErrorState = NO_ERROR_STATE;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	89 83       	std	Y+1, r24	; 0x01
	    if(copy_dataString == NULL)
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	19 f4       	brne	.+6      	; 0x2556 <UART_U8ReciveDataString+0x2c>
	    {
	    	local_ErrorState = NULLPOINTER;
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	15 c0       	rjmp	.+42     	; 0x2580 <UART_U8ReciveDataString+0x56>
	    }
	    else
	    {
		    for(local_counter = 0 ; local_counter < copy_stringSize ; local_counter++)
    2556:	1a 82       	std	Y+2, r1	; 0x02
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <UART_U8ReciveDataString+0x4e>
		    {
		    	copy_dataString[local_counter] = UART_U8ReciveData();
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	8c 01       	movw	r16, r24
    2566:	02 0f       	add	r16, r18
    2568:	13 1f       	adc	r17, r19
    256a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <UART_U8ReciveData>
    256e:	f8 01       	movw	r30, r16
    2570:	80 83       	st	Z, r24
	    {
	    	local_ErrorState = NULLPOINTER;
	    }
	    else
	    {
		    for(local_counter = 0 ; local_counter < copy_stringSize ; local_counter++)
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	8f 5f       	subi	r24, 0xFF	; 255
    2576:	8a 83       	std	Y+2, r24	; 0x02
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	98 17       	cp	r25, r24
    257e:	68 f3       	brcs	.-38     	; 0x255a <UART_U8ReciveDataString+0x30>
		    {
		    	copy_dataString[local_counter] = UART_U8ReciveData();
		    }

	    }
	    return local_ErrorState;
    2580:	89 81       	ldd	r24, Y+1	; 0x01
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	08 95       	ret

00002596 <UART_U8DataAvailable>:

uint8 UART_U8DataAvailable(void)
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	0f 92       	push	r0
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
  // Check if receive complete flag is set
  if (UCSRA & (1 << UCSRA_RXC))
    25a0:	eb e2       	ldi	r30, 0x2B	; 43
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	1c f4       	brge	.+6      	; 0x25b0 <UART_U8DataAvailable+0x1a>
  {
    return 1; // Data available
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	01 c0       	rjmp	.+2      	; 0x25b2 <UART_U8DataAvailable+0x1c>
  }
  else
  {
    return 0; // No data available
    25b0:	19 82       	std	Y+1, r1	; 0x01
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
  }
}
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <UART_VidInit>:

/* initialize UART */
void UART_VidInit(uint8 copy_stopBit ,uint8 copy_ParityBit ,uint8 copy_dataBit)
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	2a 97       	sbiw	r28, 0x0a	; 10
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	8a 83       	std	Y+2, r24	; 0x02
    25d2:	6b 83       	std	Y+3, r22	; 0x03
    25d4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local = 0;
    25d6:	19 82       	std	Y+1, r1	; 0x01

	/* RX Enable And TX Enable */
	SET_BIT(UCSRB,UCSRB_RXEN);
    25d8:	aa e2       	ldi	r26, 0x2A	; 42
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	ea e2       	ldi	r30, 0x2A	; 42
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	88 60       	ori	r24, 0x08	; 8
    25e4:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
    25e6:	aa e2       	ldi	r26, 0x2A	; 42
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	ea e2       	ldi	r30, 0x2A	; 42
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	80 61       	ori	r24, 0x10	; 16
    25f2:	8c 93       	st	X, r24

	/* RX Enable INTERRUPT And TX Enable */
	SET_BIT(UCSRB,UCSRB_RXCIE);
    25f4:	aa e2       	ldi	r26, 0x2A	; 42
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	ea e2       	ldi	r30, 0x2A	; 42
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	80 68       	ori	r24, 0x80	; 128
    2600:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXCIE);
    2602:	aa e2       	ldi	r26, 0x2A	; 42
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	ea e2       	ldi	r30, 0x2A	; 42
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	80 64       	ori	r24, 0x40	; 64
    260e:	8c 93       	st	X, r24


	/* Register Select */
	SET_BIT(Local,UCSRC_URSEL);
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	80 68       	ori	r24, 0x80	; 128
    2614:	89 83       	std	Y+1, r24	; 0x01

	/* select stop bit */
	switch(copy_stopBit)
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	3a 87       	std	Y+10, r19	; 0x0a
    261e:	29 87       	std	Y+9, r18	; 0x09
    2620:	89 85       	ldd	r24, Y+9	; 0x09
    2622:	9a 85       	ldd	r25, Y+10	; 0x0a
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	31 f0       	breq	.+12     	; 0x2634 <UART_VidInit+0x78>
    2628:	29 85       	ldd	r18, Y+9	; 0x09
    262a:	3a 85       	ldd	r19, Y+10	; 0x0a
    262c:	21 30       	cpi	r18, 0x01	; 1
    262e:	31 05       	cpc	r19, r1
    2630:	29 f0       	breq	.+10     	; 0x263c <UART_VidInit+0x80>
    2632:	07 c0       	rjmp	.+14     	; 0x2642 <UART_VidInit+0x86>
	{
	case STOP_1BIT:
		CLEAR_BIT(Local,UCSRC_USBS);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	87 7f       	andi	r24, 0xF7	; 247
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	03 c0       	rjmp	.+6      	; 0x2642 <UART_VidInit+0x86>
		break;
	case STOP_2BIT:
		SET_BIT(Local,UCSRC_USBS);
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	88 60       	ori	r24, 0x08	; 8
    2640:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* select parity bit */
	switch(copy_ParityBit)
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	38 87       	std	Y+8, r19	; 0x08
    264a:	2f 83       	std	Y+7, r18	; 0x07
    264c:	8f 81       	ldd	r24, Y+7	; 0x07
    264e:	98 85       	ldd	r25, Y+8	; 0x08
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	91 05       	cpc	r25, r1
    2654:	e1 f0       	breq	.+56     	; 0x268e <UART_VidInit+0xd2>
    2656:	2f 81       	ldd	r18, Y+7	; 0x07
    2658:	38 85       	ldd	r19, Y+8	; 0x08
    265a:	22 30       	cpi	r18, 0x02	; 2
    265c:	31 05       	cpc	r19, r1
    265e:	2c f4       	brge	.+10     	; 0x266a <UART_VidInit+0xae>
    2660:	8f 81       	ldd	r24, Y+7	; 0x07
    2662:	98 85       	ldd	r25, Y+8	; 0x08
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	61 f0       	breq	.+24     	; 0x2680 <UART_VidInit+0xc4>
    2668:	26 c0       	rjmp	.+76     	; 0x26b6 <UART_VidInit+0xfa>
    266a:	2f 81       	ldd	r18, Y+7	; 0x07
    266c:	38 85       	ldd	r19, Y+8	; 0x08
    266e:	22 30       	cpi	r18, 0x02	; 2
    2670:	31 05       	cpc	r19, r1
    2672:	a1 f0       	breq	.+40     	; 0x269c <UART_VidInit+0xe0>
    2674:	8f 81       	ldd	r24, Y+7	; 0x07
    2676:	98 85       	ldd	r25, Y+8	; 0x08
    2678:	83 30       	cpi	r24, 0x03	; 3
    267a:	91 05       	cpc	r25, r1
    267c:	b1 f0       	breq	.+44     	; 0x26aa <UART_VidInit+0xee>
    267e:	1b c0       	rjmp	.+54     	; 0x26b6 <UART_VidInit+0xfa>
	{
	case DISABLED:
		CLEAR_BIT(Local,UCSRC_UPM0);
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	8f 7e       	andi	r24, 0xEF	; 239
    2684:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(Local,UCSRC_UPM1);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	8f 7d       	andi	r24, 0xDF	; 223
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <UART_VidInit+0xfa>
		break;
	case RESEVED:
		SET_BIT(Local,UCSRC_UPM0);
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	80 61       	ori	r24, 0x10	; 16
    2692:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(Local,UCSRC_UPM1);
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	8f 7d       	andi	r24, 0xDF	; 223
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	0d c0       	rjmp	.+26     	; 0x26b6 <UART_VidInit+0xfa>
		break;
	case EVEN_PARITY:
		CLEAR_BIT(Local,UCSRC_UPM0);
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	8f 7e       	andi	r24, 0xEF	; 239
    26a0:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UPM1);
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	80 62       	ori	r24, 0x20	; 32
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	06 c0       	rjmp	.+12     	; 0x26b6 <UART_VidInit+0xfa>
		break;
	case ODD_PARITY:
		SET_BIT(Local,UCSRC_UPM0);
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	80 61       	ori	r24, 0x10	; 16
    26ae:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UPM1);
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	80 62       	ori	r24, 0x20	; 32
    26b4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* select no of data bit */
	switch(copy_dataBit)
    26b6:	8c 81       	ldd	r24, Y+4	; 0x04
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	3e 83       	std	Y+6, r19	; 0x06
    26be:	2d 83       	std	Y+5, r18	; 0x05
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	82 30       	cpi	r24, 0x02	; 2
    26c6:	91 05       	cpc	r25, r1
    26c8:	b1 f1       	breq	.+108    	; 0x2736 <UART_VidInit+0x17a>
    26ca:	2d 81       	ldd	r18, Y+5	; 0x05
    26cc:	3e 81       	ldd	r19, Y+6	; 0x06
    26ce:	23 30       	cpi	r18, 0x03	; 3
    26d0:	31 05       	cpc	r19, r1
    26d2:	54 f4       	brge	.+20     	; 0x26e8 <UART_VidInit+0x12c>
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	9e 81       	ldd	r25, Y+6	; 0x06
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	89 f0       	breq	.+34     	; 0x26fe <UART_VidInit+0x142>
    26dc:	2d 81       	ldd	r18, Y+5	; 0x05
    26de:	3e 81       	ldd	r19, Y+6	; 0x06
    26e0:	21 30       	cpi	r18, 0x01	; 1
    26e2:	31 05       	cpc	r19, r1
    26e4:	d1 f0       	breq	.+52     	; 0x271a <UART_VidInit+0x15e>
    26e6:	50 c0       	rjmp	.+160    	; 0x2788 <UART_VidInit+0x1cc>
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	83 30       	cpi	r24, 0x03	; 3
    26ee:	91 05       	cpc	r25, r1
    26f0:	81 f1       	breq	.+96     	; 0x2752 <UART_VidInit+0x196>
    26f2:	2d 81       	ldd	r18, Y+5	; 0x05
    26f4:	3e 81       	ldd	r19, Y+6	; 0x06
    26f6:	27 30       	cpi	r18, 0x07	; 7
    26f8:	31 05       	cpc	r19, r1
    26fa:	c9 f1       	breq	.+114    	; 0x276e <UART_VidInit+0x1b2>
    26fc:	45 c0       	rjmp	.+138    	; 0x2788 <UART_VidInit+0x1cc>
	{
	case DATA_5BIT:
		CLEAR_BIT(Local,UCSRC_UCSZ0);
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	8d 7f       	andi	r24, 0xFD	; 253
    2702:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(Local,UCSRC_UCSZ1);
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	8b 7f       	andi	r24, 0xFB	; 251
    2708:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRB,UCSRB_UCSZ2);
    270a:	aa e2       	ldi	r26, 0x2A	; 42
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	ea e2       	ldi	r30, 0x2A	; 42
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	8b 7f       	andi	r24, 0xFB	; 251
    2716:	8c 93       	st	X, r24
    2718:	37 c0       	rjmp	.+110    	; 0x2788 <UART_VidInit+0x1cc>
		break;
	case DATA_6BIT:
		SET_BIT(Local,UCSRC_UCSZ0);
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	82 60       	ori	r24, 0x02	; 2
    271e:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(Local,UCSRC_UCSZ1);
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	8b 7f       	andi	r24, 0xFB	; 251
    2724:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRB,UCSRB_UCSZ2);
    2726:	aa e2       	ldi	r26, 0x2A	; 42
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ea e2       	ldi	r30, 0x2A	; 42
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8b 7f       	andi	r24, 0xFB	; 251
    2732:	8c 93       	st	X, r24
    2734:	29 c0       	rjmp	.+82     	; 0x2788 <UART_VidInit+0x1cc>
		break;
	case DATA_7BIT:
		CLEAR_BIT(Local,UCSRC_UCSZ0);
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	8d 7f       	andi	r24, 0xFD	; 253
    273a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UCSZ1);
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	84 60       	ori	r24, 0x04	; 4
    2740:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRB,UCSRB_UCSZ2);
    2742:	aa e2       	ldi	r26, 0x2A	; 42
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ea e2       	ldi	r30, 0x2A	; 42
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	8b 7f       	andi	r24, 0xFB	; 251
    274e:	8c 93       	st	X, r24
    2750:	1b c0       	rjmp	.+54     	; 0x2788 <UART_VidInit+0x1cc>
		break;
	case DATA_8BIT:
		SET_BIT(Local,UCSRC_UCSZ0);
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	82 60       	ori	r24, 0x02	; 2
    2756:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UCSZ1);
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	84 60       	ori	r24, 0x04	; 4
    275c:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRB,UCSRB_UCSZ2);
    275e:	aa e2       	ldi	r26, 0x2A	; 42
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	ea e2       	ldi	r30, 0x2A	; 42
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	8b 7f       	andi	r24, 0xFB	; 251
    276a:	8c 93       	st	X, r24
    276c:	0d c0       	rjmp	.+26     	; 0x2788 <UART_VidInit+0x1cc>
		break;
	case DATA_9BIT:
		SET_BIT(Local,UCSRC_UCSZ0);
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	82 60       	ori	r24, 0x02	; 2
    2772:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local,UCSRC_UCSZ1);
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	84 60       	ori	r24, 0x04	; 4
    2778:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRB,UCSRB_UCSZ2);
    277a:	aa e2       	ldi	r26, 0x2A	; 42
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	ea e2       	ldi	r30, 0x2A	; 42
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	84 60       	ori	r24, 0x04	; 4
    2786:	8c 93       	st	X, r24
		break;
	}

	/* Synchronos mode */
	CLEAR_BIT(Local,UCSRC_UMSEL);
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	8f 7b       	andi	r24, 0xBF	; 191
    278c:	89 83       	std	Y+1, r24	; 0x01

	/* 0x86 or 0b10000110 */
	UCSRC = Local;
    278e:	e0 e4       	ldi	r30, 0x40	; 64
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	80 83       	st	Z, r24


	/* Baud rate 9600bps */
	UBRRL = 51;
    2796:	e9 e2       	ldi	r30, 0x29	; 41
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	83 e3       	ldi	r24, 0x33	; 51
    279c:	80 83       	st	Z, r24
}
    279e:	2a 96       	adiw	r28, 0x0a	; 10
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <main>:
void print_temperature(void);
void activate_alarm(void);
void read_RFID(void);

int main()
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	2e 97       	sbiw	r28, 0x0e	; 14
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
	/* initialize all pins*/
	initialize_pins();
    27c4:	0e 94 8f 14 	call	0x291e	; 0x291e <initialize_pins>

	/* initialize all peripherals */
	initialize_peripherals();
    27c8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <initialize_peripherals>
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	aa e7       	ldi	r26, 0x7A	; 122
    27d2:	b3 e4       	ldi	r27, 0x43	; 67
    27d4:	8b 87       	std	Y+11, r24	; 0x0b
    27d6:	9c 87       	std	Y+12, r25	; 0x0c
    27d8:	ad 87       	std	Y+13, r26	; 0x0d
    27da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27de:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4a e7       	ldi	r20, 0x7A	; 122
    27ea:	53 e4       	ldi	r21, 0x43	; 67
    27ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8f 83       	std	Y+7, r24	; 0x07
    27f6:	98 87       	std	Y+8, r25	; 0x08
    27f8:	a9 87       	std	Y+9, r26	; 0x09
    27fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27fc:	6f 81       	ldd	r22, Y+7	; 0x07
    27fe:	78 85       	ldd	r23, Y+8	; 0x08
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e8       	ldi	r20, 0x80	; 128
    280a:	5f e3       	ldi	r21, 0x3F	; 63
    280c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2810:	88 23       	and	r24, r24
    2812:	2c f4       	brge	.+10     	; 0x281e <main+0x6e>
		__ticks = 1;
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
    281c:	3f c0       	rjmp	.+126    	; 0x289c <main+0xec>
	else if (__tmp > 65535)
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	3f ef       	ldi	r19, 0xFF	; 255
    282a:	4f e7       	ldi	r20, 0x7F	; 127
    282c:	57 e4       	ldi	r21, 0x47	; 71
    282e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2832:	18 16       	cp	r1, r24
    2834:	4c f5       	brge	.+82     	; 0x2888 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2836:	6b 85       	ldd	r22, Y+11	; 0x0b
    2838:	7c 85       	ldd	r23, Y+12	; 0x0c
    283a:	8d 85       	ldd	r24, Y+13	; 0x0d
    283c:	9e 85       	ldd	r25, Y+14	; 0x0e
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e2       	ldi	r20, 0x20	; 32
    2844:	51 e4       	ldi	r21, 0x41	; 65
    2846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	0f c0       	rjmp	.+30     	; 0x287e <main+0xce>
    2860:	89 e1       	ldi	r24, 0x19	; 25
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9c 83       	std	Y+4, r25	; 0x04
    2866:	8b 83       	std	Y+3, r24	; 0x03
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <main+0xbc>
    2870:	9c 83       	std	Y+4, r25	; 0x04
    2872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	9e 83       	std	Y+6, r25	; 0x06
    287c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287e:	8d 81       	ldd	r24, Y+5	; 0x05
    2880:	9e 81       	ldd	r25, Y+6	; 0x06
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	69 f7       	brne	.-38     	; 0x2860 <main+0xb0>
    2886:	14 c0       	rjmp	.+40     	; 0x28b0 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9e 83       	std	Y+6, r25	; 0x06
    289a:	8d 83       	std	Y+5, r24	; 0x05
    289c:	8d 81       	ldd	r24, Y+5	; 0x05
    289e:	9e 81       	ldd	r25, Y+6	; 0x06
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	9a 81       	ldd	r25, Y+2	; 0x02
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <main+0xf8>
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01

	/* print on lcd */
	_delay_ms(250);
	LCD_VidPrintString("Temperature: ");
    28b0:	80 e6       	ldi	r24, 0x60	; 96
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_VidPrintString>

	while (1)
	{
		/* print the temp value */
		print_temperature();
    28b8:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <print_temperature>

		/* check the temp value */
		if (analog_temp > 40)
    28bc:	80 91 9f 01 	lds	r24, 0x019F
    28c0:	90 91 a0 01 	lds	r25, 0x01A0
    28c4:	a0 91 a1 01 	lds	r26, 0x01A1
    28c8:	b0 91 a2 01 	lds	r27, 0x01A2
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e2       	ldi	r20, 0x20	; 32
    28d6:	52 e4       	ldi	r21, 0x42	; 66
    28d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	14 f4       	brge	.+4      	; 0x28e4 <main+0x134>
		{
			activate_alarm();
    28e0:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <activate_alarm>
		}
		/* check on flag if data is received from UART */
		if(isRFIDDataAvailable)
    28e4:	80 91 9c 01 	lds	r24, 0x019C
    28e8:	88 23       	and	r24, r24
    28ea:	31 f3       	breq	.-52     	; 0x28b8 <main+0x108>
		{
			// Access the RFID data from the global variable for further processing
			for(local_counter = 0 ; local_counter < 6 ; local_counter++)
    28ec:	10 92 9b 01 	sts	0x019B, r1
    28f0:	0f c0       	rjmp	.+30     	; 0x2910 <main+0x160>
			{
				SPI_TransReceive(RFID[local_counter]);
    28f2:	80 91 9b 01 	lds	r24, 0x019B
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	fc 01       	movw	r30, r24
    28fc:	ec 55       	subi	r30, 0x5C	; 92
    28fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2900:	80 81       	ld	r24, Z
    2902:	0e 94 cd 11 	call	0x239a	; 0x239a <SPI_TransReceive>
		}
		/* check on flag if data is received from UART */
		if(isRFIDDataAvailable)
		{
			// Access the RFID data from the global variable for further processing
			for(local_counter = 0 ; local_counter < 6 ; local_counter++)
    2906:	80 91 9b 01 	lds	r24, 0x019B
    290a:	8f 5f       	subi	r24, 0xFF	; 255
    290c:	80 93 9b 01 	sts	0x019B, r24
    2910:	80 91 9b 01 	lds	r24, 0x019B
    2914:	86 30       	cpi	r24, 0x06	; 6
    2916:	68 f3       	brcs	.-38     	; 0x28f2 <main+0x142>
			{
				SPI_TransReceive(RFID[local_counter]);
			}
			// Reset the flag
			isRFIDDataAvailable = 0;
    2918:	10 92 9c 01 	sts	0x019C, r1
    291c:	cd cf       	rjmp	.-102    	; 0x28b8 <main+0x108>

0000291e <initialize_pins>:
		}
	}
}

void initialize_pins(void)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
	/* set pin direction of MSTR */
	DIO_VidSetPinDirection(Port_B, Pin4, Input);     // SS: input pull up for master
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	64 e0       	ldi	r22, 0x04	; 4
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B, Pin5, Output);    // MOSI: master output slave input
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	65 e0       	ldi	r22, 0x05	; 5
    2934:	41 e0       	ldi	r20, 0x01	; 1
    2936:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B, Pin6, Input);     // MISO: master input slave output
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	66 e0       	ldi	r22, 0x06	; 6
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B, Pin7, Output);    // SCK: output
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	67 e0       	ldi	r22, 0x07	; 7
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>

	/* set pin direction of RX */
	DIO_VidSetPinDirection(Port_D, Pin0, Input);
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>


	/* set pin direction of Buzzer */
	DIO_VidSetPinDirection(Port_B, Pin1, Output);
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	61 e0       	ldi	r22, 0x01	; 1
    295c:	41 e0       	ldi	r20, 0x01	; 1
    295e:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>

	/* set pin direction of Fire Led */
	DIO_VidSetPinDirection(Port_D, Pin2, Output);
    2962:	83 e0       	ldi	r24, 0x03	; 3
    2964:	62 e0       	ldi	r22, 0x02	; 2
    2966:	41 e0       	ldi	r20, 0x01	; 1
    2968:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>

	/* set pin direction of RFID Interrupt */
	DIO_VidSetPinDirection(Port_D, Pin3, Input);
    296c:	83 e0       	ldi	r24, 0x03	; 3
    296e:	63 e0       	ldi	r22, 0x03	; 3
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>

	/* set pin direction of LCD */
	DIO_VidSetPortDirection(Port_C, Output);
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	61 e0       	ldi	r22, 0x01	; 1
    297a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(Port_A, Pin1, Output);
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	61 e0       	ldi	r22, 0x01	; 1
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_A, Pin2, Output);
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	62 e0       	ldi	r22, 0x02	; 2
    298c:	41 e0       	ldi	r20, 0x01	; 1
    298e:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_A, Pin3, Output);
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	63 e0       	ldi	r22, 0x03	; 3
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_VidSetPinDirection>
}
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <initialize_peripherals>:
void initialize_peripherals(void)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
	//	EXTINT_VidINT1_Init();
	//
	//	EXTINT_U8INT1_CallBack(&ISR_EXINT1);

	/* initialize ADC */
	ADC_VidInit();
    29aa:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_VidInit>

	/* initialize UART */
	UART_VidInit(STOP_1BIT, DISABLED, DATA_8BIT);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	43 e0       	ldi	r20, 0x03	; 3
    29b4:	0e 94 de 12 	call	0x25bc	; 0x25bc <UART_VidInit>

	/* initialize master */
	SPI_VidMaterInit(Fosc_16, CPHAS0, CPOL0);
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	0e 94 29 10 	call	0x2052	; 0x2052 <SPI_VidMaterInit>

	/* initialize LCD */
	LCD_Vid_Init();
    29c2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_Vid_Init>

	GIE_VidEnable();
    29c6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <GIE_VidEnable>
}
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <print_temperature>:

void print_temperature(void)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	2e 97       	sbiw	r28, 0x0e	; 14
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
	// take the digital reading of ADC
	digital_temp = ADC_U16ReadChannelSyn(0);
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_U16ReadChannelSyn>
    29ea:	90 93 9e 01 	sts	0x019E, r25
    29ee:	80 93 9d 01 	sts	0x019D, r24

	// convert the digital value to analog value
	analog_temp = (150 * digital_temp * 5.0) / (1023 * 1.5);
    29f2:	20 91 9d 01 	lds	r18, 0x019D
    29f6:	30 91 9e 01 	lds	r19, 0x019E
    29fa:	86 e9       	ldi	r24, 0x96	; 150
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	ac 01       	movw	r20, r24
    2a00:	24 9f       	mul	r18, r20
    2a02:	c0 01       	movw	r24, r0
    2a04:	25 9f       	mul	r18, r21
    2a06:	90 0d       	add	r25, r0
    2a08:	34 9f       	mul	r19, r20
    2a0a:	90 0d       	add	r25, r0
    2a0c:	11 24       	eor	r1, r1
    2a0e:	cc 01       	movw	r24, r24
    2a10:	a0 e0       	ldi	r26, 0x00	; 0
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 ea       	ldi	r20, 0xA0	; 160
    2a2a:	50 e4       	ldi	r21, 0x40	; 64
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 ed       	ldi	r19, 0xD0	; 208
    2a3c:	4f eb       	ldi	r20, 0xBF	; 191
    2a3e:	54 e4       	ldi	r21, 0x44	; 68
    2a40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	80 93 9f 01 	sts	0x019F, r24
    2a4c:	90 93 a0 01 	sts	0x01A0, r25
    2a50:	a0 93 a1 01 	sts	0x01A1, r26
    2a54:	b0 93 a2 01 	sts	0x01A2, r27
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	aa e7       	ldi	r26, 0x7A	; 122
    2a5e:	b3 e4       	ldi	r27, 0x43	; 67
    2a60:	8b 87       	std	Y+11, r24	; 0x0b
    2a62:	9c 87       	std	Y+12, r25	; 0x0c
    2a64:	ad 87       	std	Y+13, r26	; 0x0d
    2a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a e7       	ldi	r20, 0x7A	; 122
    2a76:	53 e4       	ldi	r21, 0x43	; 67
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8f 83       	std	Y+7, r24	; 0x07
    2a82:	98 87       	std	Y+8, r25	; 0x08
    2a84:	a9 87       	std	Y+9, r26	; 0x09
    2a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e8       	ldi	r20, 0x80	; 128
    2a96:	5f e3       	ldi	r21, 0x3F	; 63
    2a98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9c:	88 23       	and	r24, r24
    2a9e:	2c f4       	brge	.+10     	; 0x2aaa <print_temperature+0xda>
		__ticks = 1;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	3f c0       	rjmp	.+126    	; 0x2b28 <print_temperature+0x158>
	else if (__tmp > 65535)
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	4f e7       	ldi	r20, 0x7F	; 127
    2ab8:	57 e4       	ldi	r21, 0x47	; 71
    2aba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2abe:	18 16       	cp	r1, r24
    2ac0:	4c f5       	brge	.+82     	; 0x2b14 <print_temperature+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <print_temperature+0x13a>
    2aec:	89 e1       	ldi	r24, 0x19	; 25
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <print_temperature+0x128>
    2afc:	9c 83       	std	Y+4, r25	; 0x04
    2afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	69 f7       	brne	.-38     	; 0x2aec <print_temperature+0x11c>
    2b12:	14 c0       	rjmp	.+40     	; 0x2b3c <print_temperature+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b14:	6f 81       	ldd	r22, Y+7	; 0x07
    2b16:	78 85       	ldd	r23, Y+8	; 0x08
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	9a 81       	ldd	r25, Y+2	; 0x02
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <print_temperature+0x164>
    2b38:	9a 83       	std	Y+2, r25	; 0x02
    2b3a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(250);
	LCD_VidMoveCursor(0, 13);
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	6d e0       	ldi	r22, 0x0D	; 13
    2b40:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_VidMoveCursor>

	// print temp degree
	LCD_VidPrintNumber(analog_temp);
    2b44:	80 91 9f 01 	lds	r24, 0x019F
    2b48:	90 91 a0 01 	lds	r25, 0x01A0
    2b4c:	a0 91 a1 01 	lds	r26, 0x01A1
    2b50:	b0 91 a2 01 	lds	r27, 0x01A2
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_VidPrintNumber>

	// display the celsius
	LCD_VidSendData(0xDF);
    2b68:	8f ed       	ldi	r24, 0xDF	; 223
    2b6a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <LCD_VidSendData>
	LCD_VidSendData('c');
    2b6e:	83 e6       	ldi	r24, 0x63	; 99
    2b70:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <LCD_VidSendData>
	LCD_VidSendData(0x20);
    2b74:	80 e2       	ldi	r24, 0x20	; 32
    2b76:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <LCD_VidSendData>
}
    2b7a:	2e 96       	adiw	r28, 0x0e	; 14
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <activate_alarm>:

void activate_alarm(void)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	aa 97       	sbiw	r28, 0x2a	; 42
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
	/* activate the alarm */
	DIO_VidSetPinValue(Port_B, Pin1, PinHigh);
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	61 e0       	ldi	r22, 0x01	; 1
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>

	for (LedToggel = 0; LedToggel < 10; LedToggel++)
    2baa:	10 92 a3 01 	sts	0x01A3, r1
    2bae:	fb c0       	rjmp	.+502    	; 0x2da6 <activate_alarm+0x21a>
	{
		/* activate the led firing */
		DIO_VidSetPinValue(Port_D, Pin2, PinHigh);
    2bb0:	83 e0       	ldi	r24, 0x03	; 3
    2bb2:	62 e0       	ldi	r22, 0x02	; 2
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>

		LCD_VidMoveCursor(1,0);
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_VidMoveCursor>
		LCD_VidPrintString(".....Firing.....");
    2bc2:	8e e6       	ldi	r24, 0x6E	; 110
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_VidPrintString>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e8       	ldi	r25, 0x80	; 128
    2bce:	ab e3       	ldi	r26, 0x3B	; 59
    2bd0:	b4 e4       	ldi	r27, 0x44	; 68
    2bd2:	8f a3       	std	Y+39, r24	; 0x27
    2bd4:	98 a7       	std	Y+40, r25	; 0x28
    2bd6:	a9 a7       	std	Y+41, r26	; 0x29
    2bd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bda:	6f a1       	ldd	r22, Y+39	; 0x27
    2bdc:	78 a5       	ldd	r23, Y+40	; 0x28
    2bde:	89 a5       	ldd	r24, Y+41	; 0x29
    2be0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	4a e7       	ldi	r20, 0x7A	; 122
    2be8:	53 e4       	ldi	r21, 0x43	; 67
    2bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	8b a3       	std	Y+35, r24	; 0x23
    2bf4:	9c a3       	std	Y+36, r25	; 0x24
    2bf6:	ad a3       	std	Y+37, r26	; 0x25
    2bf8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    2c00:	9e a1       	ldd	r25, Y+38	; 0x26
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e8       	ldi	r20, 0x80	; 128
    2c08:	5f e3       	ldi	r21, 0x3F	; 63
    2c0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c0e:	88 23       	and	r24, r24
    2c10:	2c f4       	brge	.+10     	; 0x2c1c <activate_alarm+0x90>
		__ticks = 1;
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	9a a3       	std	Y+34, r25	; 0x22
    2c18:	89 a3       	std	Y+33, r24	; 0x21
    2c1a:	3f c0       	rjmp	.+126    	; 0x2c9a <activate_alarm+0x10e>
	else if (__tmp > 65535)
    2c1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c20:	8d a1       	ldd	r24, Y+37	; 0x25
    2c22:	9e a1       	ldd	r25, Y+38	; 0x26
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	3f ef       	ldi	r19, 0xFF	; 255
    2c28:	4f e7       	ldi	r20, 0x7F	; 127
    2c2a:	57 e4       	ldi	r21, 0x47	; 71
    2c2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c30:	18 16       	cp	r1, r24
    2c32:	4c f5       	brge	.+82     	; 0x2c86 <activate_alarm+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c34:	6f a1       	ldd	r22, Y+39	; 0x27
    2c36:	78 a5       	ldd	r23, Y+40	; 0x28
    2c38:	89 a5       	ldd	r24, Y+41	; 0x29
    2c3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e2       	ldi	r20, 0x20	; 32
    2c42:	51 e4       	ldi	r21, 0x41	; 65
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	cd 01       	movw	r24, r26
    2c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	9a a3       	std	Y+34, r25	; 0x22
    2c5a:	89 a3       	std	Y+33, r24	; 0x21
    2c5c:	0f c0       	rjmp	.+30     	; 0x2c7c <activate_alarm+0xf0>
    2c5e:	89 e1       	ldi	r24, 0x19	; 25
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	98 a3       	std	Y+32, r25	; 0x20
    2c64:	8f 8f       	std	Y+31, r24	; 0x1f
    2c66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c68:	98 a1       	ldd	r25, Y+32	; 0x20
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <activate_alarm+0xde>
    2c6e:	98 a3       	std	Y+32, r25	; 0x20
    2c70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c72:	89 a1       	ldd	r24, Y+33	; 0x21
    2c74:	9a a1       	ldd	r25, Y+34	; 0x22
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	9a a3       	std	Y+34, r25	; 0x22
    2c7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c80:	00 97       	sbiw	r24, 0x00	; 0
    2c82:	69 f7       	brne	.-38     	; 0x2c5e <activate_alarm+0xd2>
    2c84:	14 c0       	rjmp	.+40     	; 0x2cae <activate_alarm+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c86:	6b a1       	ldd	r22, Y+35	; 0x23
    2c88:	7c a1       	ldd	r23, Y+36	; 0x24
    2c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	9a a3       	std	Y+34, r25	; 0x22
    2c98:	89 a3       	std	Y+33, r24	; 0x21
    2c9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2ca0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ca4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <activate_alarm+0x11a>
    2caa:	9e 8f       	std	Y+30, r25	; 0x1e
    2cac:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(750);
		/* deactivate the led firing */
		DIO_VidSetPinValue(Port_D, Pin2, PinLow);
    2cae:	83 e0       	ldi	r24, 0x03	; 3
    2cb0:	62 e0       	ldi	r22, 0x02	; 2
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e8       	ldi	r25, 0x80	; 128
    2cbc:	ab e3       	ldi	r26, 0x3B	; 59
    2cbe:	b4 e4       	ldi	r27, 0x44	; 68
    2cc0:	89 8f       	std	Y+25, r24	; 0x19
    2cc2:	9a 8f       	std	Y+26, r25	; 0x1a
    2cc4:	ab 8f       	std	Y+27, r26	; 0x1b
    2cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4a e7       	ldi	r20, 0x7A	; 122
    2cd6:	53 e4       	ldi	r21, 0x43	; 67
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	8d 8b       	std	Y+21, r24	; 0x15
    2ce2:	9e 8b       	std	Y+22, r25	; 0x16
    2ce4:	af 8b       	std	Y+23, r26	; 0x17
    2ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cea:	7e 89       	ldd	r23, Y+22	; 0x16
    2cec:	8f 89       	ldd	r24, Y+23	; 0x17
    2cee:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e8       	ldi	r20, 0x80	; 128
    2cf6:	5f e3       	ldi	r21, 0x3F	; 63
    2cf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cfc:	88 23       	and	r24, r24
    2cfe:	2c f4       	brge	.+10     	; 0x2d0a <activate_alarm+0x17e>
		__ticks = 1;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	9c 8b       	std	Y+20, r25	; 0x14
    2d06:	8b 8b       	std	Y+19, r24	; 0x13
    2d08:	3f c0       	rjmp	.+126    	; 0x2d88 <activate_alarm+0x1fc>
	else if (__tmp > 65535)
    2d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d10:	98 8d       	ldd	r25, Y+24	; 0x18
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	3f ef       	ldi	r19, 0xFF	; 255
    2d16:	4f e7       	ldi	r20, 0x7F	; 127
    2d18:	57 e4       	ldi	r21, 0x47	; 71
    2d1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d1e:	18 16       	cp	r1, r24
    2d20:	4c f5       	brge	.+82     	; 0x2d74 <activate_alarm+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d22:	69 8d       	ldd	r22, Y+25	; 0x19
    2d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e2       	ldi	r20, 0x20	; 32
    2d30:	51 e4       	ldi	r21, 0x41	; 65
    2d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	9c 8b       	std	Y+20, r25	; 0x14
    2d48:	8b 8b       	std	Y+19, r24	; 0x13
    2d4a:	0f c0       	rjmp	.+30     	; 0x2d6a <activate_alarm+0x1de>
    2d4c:	89 e1       	ldi	r24, 0x19	; 25
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	9a 8b       	std	Y+18, r25	; 0x12
    2d52:	89 8b       	std	Y+17, r24	; 0x11
    2d54:	89 89       	ldd	r24, Y+17	; 0x11
    2d56:	9a 89       	ldd	r25, Y+18	; 0x12
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <activate_alarm+0x1cc>
    2d5c:	9a 8b       	std	Y+18, r25	; 0x12
    2d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d60:	8b 89       	ldd	r24, Y+19	; 0x13
    2d62:	9c 89       	ldd	r25, Y+20	; 0x14
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	9c 8b       	std	Y+20, r25	; 0x14
    2d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	69 f7       	brne	.-38     	; 0x2d4c <activate_alarm+0x1c0>
    2d72:	14 c0       	rjmp	.+40     	; 0x2d9c <activate_alarm+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d74:	6d 89       	ldd	r22, Y+21	; 0x15
    2d76:	7e 89       	ldd	r23, Y+22	; 0x16
    2d78:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9c 8b       	std	Y+20, r25	; 0x14
    2d86:	8b 8b       	std	Y+19, r24	; 0x13
    2d88:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8c:	98 8b       	std	Y+16, r25	; 0x10
    2d8e:	8f 87       	std	Y+15, r24	; 0x0f
    2d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d92:	98 89       	ldd	r25, Y+16	; 0x10
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <activate_alarm+0x208>
    2d98:	98 8b       	std	Y+16, r25	; 0x10
    2d9a:	8f 87       	std	Y+15, r24	; 0x0f
void activate_alarm(void)
{
	/* activate the alarm */
	DIO_VidSetPinValue(Port_B, Pin1, PinHigh);

	for (LedToggel = 0; LedToggel < 10; LedToggel++)
    2d9c:	80 91 a3 01 	lds	r24, 0x01A3
    2da0:	8f 5f       	subi	r24, 0xFF	; 255
    2da2:	80 93 a3 01 	sts	0x01A3, r24
    2da6:	80 91 a3 01 	lds	r24, 0x01A3
    2daa:	8a 30       	cpi	r24, 0x0A	; 10
    2dac:	08 f4       	brcc	.+2      	; 0x2db0 <activate_alarm+0x224>
    2dae:	00 cf       	rjmp	.-512    	; 0x2bb0 <activate_alarm+0x24>
		_delay_ms(750);
		/* deactivate the led firing */
		DIO_VidSetPinValue(Port_D, Pin2, PinLow);
		_delay_ms(750);
	}
	LCD_VidClear_Screen();
    2db0:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_VidClear_Screen>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	aa e7       	ldi	r26, 0x7A	; 122
    2dba:	b3 e4       	ldi	r27, 0x43	; 67
    2dbc:	8b 87       	std	Y+11, r24	; 0x0b
    2dbe:	9c 87       	std	Y+12, r25	; 0x0c
    2dc0:	ad 87       	std	Y+13, r26	; 0x0d
    2dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	4a e7       	ldi	r20, 0x7A	; 122
    2dd2:	53 e4       	ldi	r21, 0x43	; 67
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	8f 83       	std	Y+7, r24	; 0x07
    2dde:	98 87       	std	Y+8, r25	; 0x08
    2de0:	a9 87       	std	Y+9, r26	; 0x09
    2de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e8       	ldi	r20, 0x80	; 128
    2df2:	5f e3       	ldi	r21, 0x3F	; 63
    2df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df8:	88 23       	and	r24, r24
    2dfa:	2c f4       	brge	.+10     	; 0x2e06 <activate_alarm+0x27a>
		__ticks = 1;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9e 83       	std	Y+6, r25	; 0x06
    2e02:	8d 83       	std	Y+5, r24	; 0x05
    2e04:	3f c0       	rjmp	.+126    	; 0x2e84 <activate_alarm+0x2f8>
	else if (__tmp > 65535)
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	3f ef       	ldi	r19, 0xFF	; 255
    2e12:	4f e7       	ldi	r20, 0x7F	; 127
    2e14:	57 e4       	ldi	r21, 0x47	; 71
    2e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e1a:	18 16       	cp	r1, r24
    2e1c:	4c f5       	brge	.+82     	; 0x2e70 <activate_alarm+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e2       	ldi	r20, 0x20	; 32
    2e2c:	51 e4       	ldi	r21, 0x41	; 65
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	8d 83       	std	Y+5, r24	; 0x05
    2e46:	0f c0       	rjmp	.+30     	; 0x2e66 <activate_alarm+0x2da>
    2e48:	89 e1       	ldi	r24, 0x19	; 25
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	9c 83       	std	Y+4, r25	; 0x04
    2e4e:	8b 83       	std	Y+3, r24	; 0x03
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	9c 81       	ldd	r25, Y+4	; 0x04
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <activate_alarm+0x2c8>
    2e58:	9c 83       	std	Y+4, r25	; 0x04
    2e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	9e 83       	std	Y+6, r25	; 0x06
    2e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	00 97       	sbiw	r24, 0x00	; 0
    2e6c:	69 f7       	brne	.-38     	; 0x2e48 <activate_alarm+0x2bc>
    2e6e:	14 c0       	rjmp	.+40     	; 0x2e98 <activate_alarm+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e70:	6f 81       	ldd	r22, Y+7	; 0x07
    2e72:	78 85       	ldd	r23, Y+8	; 0x08
    2e74:	89 85       	ldd	r24, Y+9	; 0x09
    2e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	8d 83       	std	Y+5, r24	; 0x05
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	9a 83       	std	Y+2, r25	; 0x02
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <activate_alarm+0x304>
    2e94:	9a 83       	std	Y+2, r25	; 0x02
    2e96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	LCD_VidMoveCursor(0,0);
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	60 e0       	ldi	r22, 0x00	; 0
    2e9c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_VidMoveCursor>
	LCD_VidPrintString("Temperature: ");
    2ea0:	80 e6       	ldi	r24, 0x60	; 96
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_VidPrintString>

	/* deactivate the alarm */
	DIO_VidSetPinValue(Port_B, Pin1, PinLow);
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	61 e0       	ldi	r22, 0x01	; 1
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_VidSetPinValue>
}
    2eb2:	aa 96       	adiw	r28, 0x2a	; 42
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <read_RFID>:

void read_RFID(void)
{
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62

	/* check if the data is available or not */
	if(UART_U8DataAvailable())
    2ed0:	0e 94 cb 12 	call	0x2596	; 0x2596 <UART_U8DataAvailable>
    2ed4:	88 23       	and	r24, r24
    2ed6:	f9 f0       	breq	.+62     	; 0x2f16 <read_RFID+0x52>
	{
		/* receive the string from UART */
		for(local_counter = 0 ; local_counter < 6 ; local_counter++)
    2ed8:	10 92 9b 01 	sts	0x019B, r1
    2edc:	0f c0       	rjmp	.+30     	; 0x2efc <read_RFID+0x38>
		{
			RFID[local_counter] = UART_U8ReciveData();
    2ede:	80 91 9b 01 	lds	r24, 0x019B
    2ee2:	08 2f       	mov	r16, r24
    2ee4:	10 e0       	ldi	r17, 0x00	; 0
    2ee6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <UART_U8ReciveData>
    2eea:	f8 01       	movw	r30, r16
    2eec:	ec 55       	subi	r30, 0x5C	; 92
    2eee:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef0:	80 83       	st	Z, r24

	/* check if the data is available or not */
	if(UART_U8DataAvailable())
	{
		/* receive the string from UART */
		for(local_counter = 0 ; local_counter < 6 ; local_counter++)
    2ef2:	80 91 9b 01 	lds	r24, 0x019B
    2ef6:	8f 5f       	subi	r24, 0xFF	; 255
    2ef8:	80 93 9b 01 	sts	0x019B, r24
    2efc:	80 91 9b 01 	lds	r24, 0x019B
    2f00:	86 30       	cpi	r24, 0x06	; 6
    2f02:	68 f3       	brcs	.-38     	; 0x2ede <read_RFID+0x1a>
		{
			RFID[local_counter] = UART_U8ReciveData();
		}

		if (local_counter == 6)
    2f04:	80 91 9b 01 	lds	r24, 0x019B
    2f08:	86 30       	cpi	r24, 0x06	; 6
    2f0a:	29 f4       	brne	.+10     	; 0x2f16 <read_RFID+0x52>
		{
			local_counter = 0;
    2f0c:	10 92 9b 01 	sts	0x019B, r1
			// Send RFID data to main program using a global variable or queue
			isRFIDDataAvailable = 1;
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	80 93 9c 01 	sts	0x019C, r24
		}
	}
}
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret

00002f20 <__vector_13>:


void __vector_13 (void) __attribute__((signal));

void __vector_13 (void)
{
    2f20:	1f 92       	push	r1
    2f22:	0f 92       	push	r0
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	0f 92       	push	r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	2f 93       	push	r18
    2f2c:	3f 93       	push	r19
    2f2e:	4f 93       	push	r20
    2f30:	5f 93       	push	r21
    2f32:	6f 93       	push	r22
    2f34:	7f 93       	push	r23
    2f36:	8f 93       	push	r24
    2f38:	9f 93       	push	r25
    2f3a:	af 93       	push	r26
    2f3c:	bf 93       	push	r27
    2f3e:	ef 93       	push	r30
    2f40:	ff 93       	push	r31
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
	read_RFID();
    2f4a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <read_RFID>
}
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	ff 91       	pop	r31
    2f54:	ef 91       	pop	r30
    2f56:	bf 91       	pop	r27
    2f58:	af 91       	pop	r26
    2f5a:	9f 91       	pop	r25
    2f5c:	8f 91       	pop	r24
    2f5e:	7f 91       	pop	r23
    2f60:	6f 91       	pop	r22
    2f62:	5f 91       	pop	r21
    2f64:	4f 91       	pop	r20
    2f66:	3f 91       	pop	r19
    2f68:	2f 91       	pop	r18
    2f6a:	0f 90       	pop	r0
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	0f 90       	pop	r0
    2f70:	1f 90       	pop	r1
    2f72:	18 95       	reti

00002f74 <__prologue_saves__>:
    2f74:	2f 92       	push	r2
    2f76:	3f 92       	push	r3
    2f78:	4f 92       	push	r4
    2f7a:	5f 92       	push	r5
    2f7c:	6f 92       	push	r6
    2f7e:	7f 92       	push	r7
    2f80:	8f 92       	push	r8
    2f82:	9f 92       	push	r9
    2f84:	af 92       	push	r10
    2f86:	bf 92       	push	r11
    2f88:	cf 92       	push	r12
    2f8a:	df 92       	push	r13
    2f8c:	ef 92       	push	r14
    2f8e:	ff 92       	push	r15
    2f90:	0f 93       	push	r16
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	ca 1b       	sub	r28, r26
    2f9e:	db 0b       	sbc	r29, r27
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	09 94       	ijmp

00002fac <__epilogue_restores__>:
    2fac:	2a 88       	ldd	r2, Y+18	; 0x12
    2fae:	39 88       	ldd	r3, Y+17	; 0x11
    2fb0:	48 88       	ldd	r4, Y+16	; 0x10
    2fb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fba:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fbe:	b9 84       	ldd	r11, Y+9	; 0x09
    2fc0:	c8 84       	ldd	r12, Y+8	; 0x08
    2fc2:	df 80       	ldd	r13, Y+7	; 0x07
    2fc4:	ee 80       	ldd	r14, Y+6	; 0x06
    2fc6:	fd 80       	ldd	r15, Y+5	; 0x05
    2fc8:	0c 81       	ldd	r16, Y+4	; 0x04
    2fca:	1b 81       	ldd	r17, Y+3	; 0x03
    2fcc:	aa 81       	ldd	r26, Y+2	; 0x02
    2fce:	b9 81       	ldd	r27, Y+1	; 0x01
    2fd0:	ce 0f       	add	r28, r30
    2fd2:	d1 1d       	adc	r29, r1
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	ed 01       	movw	r28, r26
    2fe0:	08 95       	ret

00002fe2 <itoa>:
    2fe2:	fb 01       	movw	r30, r22
    2fe4:	9f 01       	movw	r18, r30
    2fe6:	e8 94       	clt
    2fe8:	42 30       	cpi	r20, 0x02	; 2
    2fea:	c4 f0       	brlt	.+48     	; 0x301c <itoa+0x3a>
    2fec:	45 32       	cpi	r20, 0x25	; 37
    2fee:	b4 f4       	brge	.+44     	; 0x301c <itoa+0x3a>
    2ff0:	4a 30       	cpi	r20, 0x0A	; 10
    2ff2:	29 f4       	brne	.+10     	; 0x2ffe <itoa+0x1c>
    2ff4:	97 fb       	bst	r25, 7
    2ff6:	1e f4       	brtc	.+6      	; 0x2ffe <itoa+0x1c>
    2ff8:	90 95       	com	r25
    2ffa:	81 95       	neg	r24
    2ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffe:	64 2f       	mov	r22, r20
    3000:	77 27       	eor	r23, r23
    3002:	0e 94 22 18 	call	0x3044	; 0x3044 <__udivmodhi4>
    3006:	80 5d       	subi	r24, 0xD0	; 208
    3008:	8a 33       	cpi	r24, 0x3A	; 58
    300a:	0c f0       	brlt	.+2      	; 0x300e <itoa+0x2c>
    300c:	89 5d       	subi	r24, 0xD9	; 217
    300e:	81 93       	st	Z+, r24
    3010:	cb 01       	movw	r24, r22
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	a1 f7       	brne	.-24     	; 0x2ffe <itoa+0x1c>
    3016:	16 f4       	brtc	.+4      	; 0x301c <itoa+0x3a>
    3018:	5d e2       	ldi	r21, 0x2D	; 45
    301a:	51 93       	st	Z+, r21
    301c:	10 82       	st	Z, r1
    301e:	c9 01       	movw	r24, r18
    3020:	0c 94 12 18 	jmp	0x3024	; 0x3024 <strrev>

00003024 <strrev>:
    3024:	dc 01       	movw	r26, r24
    3026:	fc 01       	movw	r30, r24
    3028:	67 2f       	mov	r22, r23
    302a:	71 91       	ld	r23, Z+
    302c:	77 23       	and	r23, r23
    302e:	e1 f7       	brne	.-8      	; 0x3028 <strrev+0x4>
    3030:	32 97       	sbiw	r30, 0x02	; 2
    3032:	04 c0       	rjmp	.+8      	; 0x303c <strrev+0x18>
    3034:	7c 91       	ld	r23, X
    3036:	6d 93       	st	X+, r22
    3038:	70 83       	st	Z, r23
    303a:	62 91       	ld	r22, -Z
    303c:	ae 17       	cp	r26, r30
    303e:	bf 07       	cpc	r27, r31
    3040:	c8 f3       	brcs	.-14     	; 0x3034 <strrev+0x10>
    3042:	08 95       	ret

00003044 <__udivmodhi4>:
    3044:	aa 1b       	sub	r26, r26
    3046:	bb 1b       	sub	r27, r27
    3048:	51 e1       	ldi	r21, 0x11	; 17
    304a:	07 c0       	rjmp	.+14     	; 0x305a <__udivmodhi4_ep>

0000304c <__udivmodhi4_loop>:
    304c:	aa 1f       	adc	r26, r26
    304e:	bb 1f       	adc	r27, r27
    3050:	a6 17       	cp	r26, r22
    3052:	b7 07       	cpc	r27, r23
    3054:	10 f0       	brcs	.+4      	; 0x305a <__udivmodhi4_ep>
    3056:	a6 1b       	sub	r26, r22
    3058:	b7 0b       	sbc	r27, r23

0000305a <__udivmodhi4_ep>:
    305a:	88 1f       	adc	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	5a 95       	dec	r21
    3060:	a9 f7       	brne	.-22     	; 0x304c <__udivmodhi4_loop>
    3062:	80 95       	com	r24
    3064:	90 95       	com	r25
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	08 95       	ret

0000306c <_exit>:
    306c:	f8 94       	cli

0000306e <__stop_program>:
    306e:	ff cf       	rjmp	.-2      	; 0x306e <__stop_program>
